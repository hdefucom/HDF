using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace DCSoft.Common
{
	                                                                    /// <summary>
	                                                                    ///       测试数据生成器
	                                                                    ///       </summary>
	[ComVisible(false)]
	[DocumentComment]
	public class TestValueGenerator
	{
		private class ValueInfo
		{
			public double LastValue = double.NaN;

			public bool direction = true;

			public int dirCount = 0;
		}

		private static string[] firstname = new string[157]
		{
			"白",
			"毕",
			"卞",
			"蔡",
			"曹",
			"岑",
			"常",
			"车",
			"陈",
			"成",
			"程",
			"池",
			"邓",
			"丁",
			"范",
			"方",
			"樊",
			"费",
			"冯",
			"符",
			"傅",
			"甘",
			"高",
			"葛",
			"龚",
			"古",
			"关",
			"郭",
			"韩",
			"何",
			"贺",
			"洪",
			"侯",
			"胡",
			"华",
			"黄",
			"霍",
			"姬",
			"简",
			"江",
			"姜",
			"蒋",
			"金",
			"康",
			"柯",
			"孔",
			"赖",
			"郎",
			"乐",
			"雷",
			"黎",
			"李",
			"连",
			"廉",
			"梁",
			"廖",
			"林",
			"凌",
			"刘",
			"柳",
			"龙",
			"卢",
			"鲁",
			"陆",
			"路",
			"吕",
			"罗",
			"骆",
			"马",
			"梅",
			"孟",
			"莫",
			"母",
			"穆",
			"倪",
			"宁",
			"欧",
			"区",
			"潘",
			"彭",
			"蒲",
			"皮",
			"齐",
			"戚",
			"钱",
			"强",
			"秦",
			"丘",
			"邱",
			"饶",
			"任",
			"沈",
			"盛",
			"施",
			"石",
			"时",
			"史",
			"司徒",
			"苏",
			"孙",
			"谭",
			"汤",
			"唐",
			"陶",
			"田",
			"童",
			"涂",
			"王",
			"危",
			"韦",
			"卫",
			"魏",
			"温",
			"文",
			"翁",
			"巫",
			"邬",
			"吴",
			"伍",
			"武",
			"席",
			"夏",
			"萧",
			"谢",
			"辛",
			"邢",
			"徐",
			"许",
			"薛",
			"严",
			"颜",
			"杨",
			"叶",
			"易",
			"殷",
			"尤",
			"于",
			"余",
			"俞",
			"虞",
			"元",
			"袁",
			"岳",
			"云",
			"曾",
			"詹",
			"张",
			"章",
			"赵",
			"郑",
			"钟",
			"周",
			"邹",
			"朱",
			"褚",
			"庄",
			"卓"
		};

		private static string[] secondnameman = new string[301]
		{
			"梁",
			"栋",
			"维",
			"启",
			"克",
			"伦",
			"翔",
			"旭",
			"鹏",
			"泽",
			"晨",
			"辰",
			"士",
			"以",
			"建",
			"家",
			"致",
			"树",
			"炎",
			"盛",
			"雄",
			"琛",
			"钧",
			"冠",
			"策",
			"腾",
			"楠",
			"榕",
			"风",
			"航",
			"弘",
			"义",
			"兴",
			"良",
			"飞",
			"彬",
			"富",
			"和",
			"鸣",
			"朋",
			"斌",
			"行",
			"时",
			"泰",
			"博",
			"磊",
			"民",
			"友",
			"志",
			"清",
			"坚",
			"庆",
			"若",
			"德",
			"彪",
			"伟",
			"刚",
			"勇",
			"毅",
			"俊",
			"峰",
			"强",
			"军",
			"平",
			"保",
			"东",
			"文",
			"辉",
			"力",
			"明",
			"永",
			"健",
			"世",
			"广",
			"海",
			"山",
			"仁",
			"波",
			"宁",
			"福",
			"生",
			"龙",
			"元",
			"全",
			"国",
			"胜",
			"学",
			"祥",
			"才",
			"发",
			"武",
			"新",
			"利",
			"顺",
			"信",
			"子",
			"杰",
			"涛",
			"昌",
			"成",
			"康",
			"星",
			"光",
			"天",
			"达",
			"安",
			"岩",
			"中",
			"茂",
			"进",
			"林",
			"有",
			"诚",
			"先",
			"敬",
			"震",
			"振",
			"壮",
			"会",
			"思",
			"群",
			"豪",
			"心",
			"邦",
			"承",
			"乐",
			"绍",
			"功",
			"松",
			"善",
			"厚",
			"裕",
			"河",
			"哲",
			"江",
			"超",
			"浩",
			"亮",
			"政",
			"谦",
			"亨",
			"奇",
			"固",
			"之",
			"轮",
			"翰",
			"朗",
			"伯",
			"宏",
			"言",
			"伟",
			"刚",
			"勇",
			"毅",
			"俊",
			"峰",
			"强",
			"军",
			"平",
			"保",
			"东",
			"文",
			"辉",
			"力",
			"明",
			"永",
			"健",
			"世",
			"广",
			"志",
			"义",
			"兴",
			"良",
			"海",
			"山",
			"仁",
			"波",
			"宁",
			"贵",
			"福",
			"生",
			"龙",
			"元",
			"全",
			"国",
			"胜",
			"学",
			"祥",
			"才",
			"发",
			"武",
			"新",
			"利",
			"清",
			"飞",
			"彬",
			"富",
			"顺",
			"信",
			"子",
			"杰",
			"涛",
			"昌",
			"成",
			"康",
			"星",
			"光",
			"天",
			"达",
			"安",
			"岩",
			"中",
			"茂",
			"进",
			"林",
			"有",
			"坚",
			"和",
			"彪",
			"博",
			"诚",
			"先",
			"敬",
			"震",
			"振",
			"壮",
			"会",
			"思",
			"群",
			"豪",
			"心",
			"邦",
			"承",
			"乐",
			"绍",
			"功",
			"松",
			"善",
			"厚",
			"庆",
			"磊",
			"民",
			"友",
			"裕",
			"河",
			"哲",
			"江",
			"超",
			"浩",
			"亮",
			"政",
			"谦",
			"亨",
			"奇",
			"固",
			"之",
			"轮",
			"翰",
			"朗",
			"伯",
			"宏",
			"言",
			"若",
			"鸣",
			"朋",
			"斌",
			"梁",
			"栋",
			"维",
			"启",
			"克",
			"伦",
			"翔",
			"旭",
			"鹏",
			"泽",
			"晨",
			"辰",
			"士",
			"以",
			"建",
			"家",
			"致",
			"树",
			"炎",
			"德",
			"行",
			"时",
			"泰",
			"盛",
			"雄",
			"琛",
			"钧",
			"冠",
			"策",
			"腾",
			"楠",
			"榕",
			"风",
			"航",
			"弘"
		};

		private static string[] secondnamewoman = new string[297]
		{
			"秀",
			"娟",
			"英",
			"华",
			"慧",
			"巧",
			"美",
			"娜",
			"静",
			"淑",
			"惠",
			"珠",
			"翠",
			"雅",
			"芝",
			"玉",
			"萍",
			"红",
			"娥",
			"玲",
			"芬",
			"芳",
			"燕",
			"彩",
			"春",
			"菊",
			"兰",
			"凤",
			"洁",
			"梅",
			"琳",
			"素",
			"云",
			"莲",
			"真",
			"环",
			"雪",
			"荣",
			"爱",
			"妹",
			"霞",
			"香",
			"月",
			"莺",
			"媛",
			"艳",
			"瑞",
			"凡",
			"佳",
			"嘉",
			"琼",
			"勤",
			"珍",
			"贞",
			"莉",
			"桂",
			"娣",
			"叶",
			"璧",
			"璐",
			"娅",
			"琦",
			"晶",
			"妍",
			"茜",
			"秋",
			"珊",
			"莎",
			"锦",
			"黛",
			"青",
			"倩",
			"婷",
			"姣",
			"婉",
			"娴",
			"瑾",
			"颖",
			"露",
			"瑶",
			"怡",
			"婵",
			"雁",
			"蓓",
			"纨",
			"仪",
			"荷",
			"丹",
			"蓉",
			"眉",
			"君",
			"琴",
			"蕊",
			"薇",
			"菁",
			"梦",
			"岚",
			"苑",
			"婕",
			"馨",
			"瑗",
			"琰",
			"韵",
			"融",
			"园",
			"艺",
			"咏",
			"卿",
			"聪",
			"澜",
			"纯",
			"毓",
			"悦",
			"昭",
			"冰",
			"爽",
			"琬",
			"茗",
			"羽",
			"希",
			"宁",
			"欣",
			"飘",
			"育",
			"滢",
			"馥",
			"筠",
			"柔",
			"竹",
			"霭",
			"凝",
			"晓",
			"欢",
			"霄",
			"枫",
			"芸",
			"菲",
			"寒",
			"伊",
			"亚",
			"宜",
			"可",
			"姬",
			"舒",
			"影",
			"荔",
			"枝",
			"思",
			"丽",
			"蕊",
			"薇",
			"菁",
			"梦",
			"岚",
			"苑",
			"婕",
			"馨",
			"瑗",
			"琰",
			"韵",
			"融",
			"园",
			"艺",
			"咏",
			"卿",
			"聪",
			"澜",
			"纯",
			"爽",
			"琬",
			"茗",
			"羽",
			"希",
			"宁",
			"欣",
			"飘",
			"育",
			"滢",
			"馥",
			"筠",
			"柔",
			"竹",
			"霭",
			"凝",
			"晓",
			"欢",
			"霄",
			"伊",
			"亚",
			"宜",
			"可",
			"姬",
			"舒",
			"影",
			"荔",
			"枝",
			"思",
			"丽",
			"芬",
			"芳",
			"燕",
			"莺",
			"媛",
			"艳",
			"珊",
			"莎",
			"蓉",
			"眉",
			"君",
			"琴",
			"毓",
			"悦",
			"昭",
			"冰",
			"枫",
			"芸",
			"菲",
			"寒",
			"锦",
			"玲",
			"秋",
			"秀",
			"娟",
			"英",
			"华",
			"慧",
			"巧",
			"美",
			"娜",
			"静",
			"淑",
			"惠",
			"珠",
			"翠",
			"雅",
			"芝",
			"玉",
			"萍",
			"红",
			"月",
			"彩",
			"春",
			"菊",
			"兰",
			"凤",
			"洁",
			"梅",
			"琳",
			"素",
			"云",
			"莲",
			"真",
			"环",
			"雪",
			"荣",
			"爱",
			"妹",
			"霞",
			"香",
			"瑞",
			"凡",
			"佳",
			"嘉",
			"琼",
			"勤",
			"珍",
			"贞",
			"莉",
			"桂",
			"娣",
			"叶",
			"璧",
			"璐",
			"娅",
			"琦",
			"晶",
			"妍",
			"茜",
			"黛",
			"青",
			"倩",
			"婷",
			"姣",
			"婉",
			"娴",
			"瑾",
			"颖",
			"露",
			"瑶",
			"怡",
			"婵",
			"雁",
			"蓓",
			"纨",
			"仪",
			"荷",
			"丹"
		};

		private static Dictionary<string, ValueInfo> _Infos = new Dictionary<string, ValueInfo>();

		private static Random random_0 = new Random();

		private static float _NoiseRate = 0f;

		private static float _JumpRate = 0.05f;

		                                                                    /// <summary>
		                                                                    ///       噪音比率
		                                                                    ///       </summary>
		public static float NoiseRate
		{
			get
			{
				return _NoiseRate;
			}
			set
			{
				_NoiseRate = value;
			}
		}

		                                                                    /// <summary>
		                                                                    ///       每次跳跃的比率
		                                                                    ///       </summary>
		public static float JumpRate
		{
			get
			{
				return _JumpRate;
			}
			set
			{
				_JumpRate = value;
			}
		}

		                                                                    /// <summary>
		                                                                    ///       自动生成姓名
		                                                                    ///       </summary>
		                                                                    /// <param name="forMan">生成男性姓名</param>
		                                                                    /// <returns>生成的姓名</returns>
		public static string GenerateName(bool forMan)
		{
			StringBuilder stringBuilder = new StringBuilder();
			stringBuilder.Append(firstname[random_0.Next(0, firstname.Length)]);
			if (forMan)
			{
				stringBuilder.Append(secondnameman[random_0.Next(0, secondnameman.Length)]);
			}
			else
			{
				stringBuilder.Append(secondnamewoman[random_0.Next(0, secondnamewoman.Length)]);
			}
			if (random_0.NextDouble() > 0.3)
			{
				if (forMan)
				{
					stringBuilder.Append(secondnameman[random_0.Next(0, secondnameman.Length)]);
				}
				else
				{
					stringBuilder.Append(secondnamewoman[random_0.Next(0, secondnamewoman.Length)]);
				}
			}
			return stringBuilder.ToString();
		}

		                                                                    /// <summary>
		                                                                    ///       生成测试数据
		                                                                    ///       </summary>
		                                                                    /// <param name="name">名称</param>
		                                                                    /// <param name="minValue">最大值</param>
		                                                                    /// <param name="maxValue">最小值</param>
		                                                                    /// <returns>生成的数值</returns>
		public static double Generate(string name, double minValue, double maxValue)
		{
			ValueInfo valueInfo;
			if (_Infos.ContainsKey(name))
			{
				valueInfo = _Infos[name];
				valueInfo.dirCount++;
				if (valueInfo.dirCount > 20 && random_0.NextDouble() < 0.3)
				{
					valueInfo.dirCount = 0;
					valueInfo.direction = !valueInfo.direction;
				}
				double num = random_0.NextDouble() * (maxValue - minValue) * (double)JumpRate;
				if (!valueInfo.direction)
				{
					num = 0.0 - num;
				}
				double num2 = valueInfo.LastValue + num;
				if (num2 < minValue)
				{
					num2 = minValue;
					valueInfo.direction = true;
					valueInfo.dirCount = 0;
				}
				if (num2 > maxValue)
				{
					num2 = maxValue;
					valueInfo.direction = false;
					valueInfo.dirCount = 0;
				}
				valueInfo.LastValue = num2;
				if (_NoiseRate > 0f)
				{
					num2 += random_0.NextDouble() * (maxValue - minValue) * (double)_NoiseRate;
					if (num2 > maxValue)
					{
						num2 = maxValue;
					}
					if (num2 < minValue)
					{
						num2 = minValue;
					}
				}
				return num2;
			}
			valueInfo = new ValueInfo();
			_Infos[name] = valueInfo;
			valueInfo.LastValue = minValue + random_0.NextDouble() * (maxValue - minValue);
			return valueInfo.LastValue;
		}
	}
}
