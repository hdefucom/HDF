using DCSoft.Common;
using DCSoft.Data;
using DCSoft.Drawing;
using DCSoft.Printing;
using DCSoft.WinForms;
using DCSoft.Writer;
using DCSoft.Writer.Commands;
using DCSoft.Writer.Controls;
using DCSoft.Writer.Data;
using DCSoft.Writer.Dom;
using DCSoft.Writer.Extension;
using DCSoft.Writer.Extension.Medical;
using DCSoft.Writer.MedicalExpression;
using DCSoft.Writer.Printing;
using DCSoft.Writer.Security;
using DCSoftDotfuscate;
using Microsoft.Win32;
using NsoOfficeLib;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Imaging;
using System.Drawing.Printing;
using System.IO;
using System.Net;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Web;
using System.Windows.Forms;
using System.Xml;

namespace AxNsoOfficeLib
{
	                                                                    /// <summary>
	                                                                    ///       在编辑器的基础上添加新的方法，用于兼容其他电子病历控件的编程接口。
	                                                                    ///       </summary>
	                                                                    /// <remarks>
	                                                                    ///       使用这个控件，可以快速替换掉其他编辑器控件而不修改任何用户代码。
	                                                                    ///       </remarks>
	                                                                    /// <summary>
	                                                                    ///       表格相关函数
	                                                                    ///       </summary>
	                                                                    /// <summary>
	                                                                    ///       数据结构
	                                                                    ///       </summary>
	                                                                    /// <summary>
	                                                                    ///       页眉页脚处理
	                                                                    ///       </summary>
	                                                                    /// <summary>
	                                                                    ///       打印相关接口
	                                                                    ///       </summary>
	                                                                    /// <summary>
	                                                                    ///       在编辑器的基础上添加新的方法，用于兼容其他电子病历控件的编程接口。
	                                                                    ///       </summary>
	                                                                    /// <summary>
	                                                                    ///       日期框 特有接口 
	                                                                    ///       </summary>
	                                                                    /// <summary>
	                                                                    ///       NsoControl的IO相关操作功能函数
	                                                                    ///       </summary>
	                                                                    /// <summary>
	                                                                    ///       数值框 特有接口
	                                                                    ///       </summary>
	                                                                    /// <summary>
	                                                                    ///       文本框特有接口
	                                                                    ///       </summary>
	[DocumentComment]
	[ComVisible(true)]
	[ToolboxItem(false)]
	[DCPublishAPI]
	[Guid("40B76C7E-EB05-4A13-95D2-B1C7466898B9")]
	public class AxNsoControlBase : UserControl, ISupportInitialize, IObjectSafety
	{
		private enum Company
		{
			Winning
		}

		[Flags]
		private enum CallbackEvent
		{
			All = 0x0,
			GainFocus = 0x1,
			LostFocus = 0x0,
			CursorEnter = 0x0,
			CursorLeft = 0x0,
			Changed = 0x0,
			Click = 0x0,
			DBClick = 0x0,
			CheckedChanged = 0x0,
			DropDown = 0x0,
			BeforeDropDown = 0x0
		}

		private class StructListenerInfo
		{
			private string _StructName = null;

			private int _ListenType = 0;

			private INsoCallback _Callback = null;

			public string StructName
			{
				get
				{
					return _StructName;
				}
				set
				{
					_StructName = value;
				}
			}

			public int ListenType
			{
				get
				{
					return _ListenType;
				}
				set
				{
					_ListenType = value;
				}
			}

			public INsoCallback Callback
			{
				get
				{
					return _Callback;
				}
				set
				{
					_Callback = value;
				}
			}
		}

		private class StructNavigationInfo
		{
			public string FloatInform = null;

			public string PropertyContent = null;

			public string ImagePath = null;

			public string IdType = null;

			public string ID = null;

			public int ImageIndex = -1;
		}

		private const string _IID_IDispatch = "{00020400-0000-0000-C000-000000000046}";

		private const string _IID_IDispatchEx = "{a6ef9860-c720-11d0-9337-00a0c90dcaa9}";

		private const string _IID_IPersistStorage = "{0000010A-0000-0000-C000-000000000046}";

		private const string _IID_IPersistStream = "{00000109-0000-0000-C000-000000000046}";

		private const string _IID_IPersistPropertyBag = "{37D84F60-42CB-11CE-8135-00AA004BB851}";

		private const int INTERFACESAFE_FOR_UNTRUSTED_CALLER = 1;

		private const int INTERFACESAFE_FOR_UNTRUSTED_DATA = 2;

		private const int S_OK = 0;

		private const int E_FAIL = -2147467259;

		private const int E_NOINTERFACE = -2147467262;

		                                                                    /// <summary>
		                                                                    ///       表示文档节类型的标识字段值
		                                                                    ///       </summary>
		public const string DataSectionFlag = "DataSection";

		public const string AttributeName_Reserve = "Reserve";

		private static bool InnerDebugMode;

		                                                                    /// <summary>
		                                                                    ///       在编辑模式下允许执行ExecuteCommand命令
		                                                                    ///       </summary>
		private bool _EnableExecuteCommandInEditMode = true;

		private Company CompanyType;

		private bool _HandlingEvent = false;

		private static string _LogFileName;

		private int _MaxLogFileSize = 0;

		private static StreamWriter _LogFileWriter;

		private static DateTime _LastLogTime;

		private int _LogFunctionLevel = 0;

		private string _ControlTitleText = null;

		private Timer _FocusTimer = null;

		private FunctionControlVisibility _TrackListVisible = FunctionControlVisibility.Hide;

		private FunctionControlVisibility _NavigateTreeVisible = FunctionControlVisibility.Auto;

		private bool _IsAlertNotSupportedMember = true;

		private List<StructListenerInfo> _StructListeners = new List<StructListenerInfo>();

		private XTextElementList _AllTables = new XTextElementList();

		private XTextElementList _ListForSetTableStyleProtected = new XTextElementList();

		private XTextElementList _ListForSetTableDeleteProtected = new XTextElementList();

		private string _TextForSetTableCellErrorMsgWhenProtected = null;

		                                                                    /// <summary>
		                                                                    ///       保存时是否检查输入域是否可以为空
		                                                                    ///       </summary>
		private bool _ValidateRequireWhenSave = false;

		private bool _DesignTemplateMode = false;

		private bool _ShowDesignInfoToolTip = false;

		                                                                    /// <summary>
		                                                                    ///       若文档2整个文档的第一个段落含有分页符，那么返回= 3.
		                                                                    ///       若文档2整个文档的第一个段落含有分页符，并且该段落为空段落，那么那么返回= 1.
		                                                                    ///       若文档2整个文档的第一个段落含有分页符，并且该段落的字符窜只有空格，那么那么返回= 2.
		                                                                    ///       </summary>
		private int _Value_GetStatusAfterMerged = 0;

		private bool _SetPrintWithTableBorder_Value = true;

		private List<StructNavigationInfo> _ListForSetStructNavigationInfo = null;

		                                                                    /// <summary>
		                                                                    ///       是否开启奇偶数打印 true开启 false关闭
		                                                                    ///       </summary>
		private bool _IsSetPrinterRightLeft = false;

		private int _PrinterRightLeftModel = 3;

		private bool _EnableSectionNested = true;

		private int _Max_SetLimitNumOfPasteCharacters = 0;

		private string _Msg_SetLimitNumOfPasteCharacters = null;

		private bool _Value_SetCanCopyFromActiveX = true;

		private string _Value_SetExtraCopyInformation = null;

		private bool _SetSpecialPasteEx_OutFormat = true;

		private bool _SetSpecialPasteEx_InFormat = true;

		private bool _fSafeForScripting = true;

		private bool _fSafeForInitializing = true;

		private AxHost.State _OcxState = null;

		                                                                    /// <summary>
		                                                                    ///       是否响应Section的事件
		                                                                    ///       </summary>
		private bool _NeedSection = false;

		                                                                    /// <summary>
		                                                                    ///       是否响应NewControl的事件
		                                                                    ///       </summary>
		private bool _NeedNewControl = false;

		                                                                    /// <summary>
		                                                                    ///       是否响应CustomToolbar的事件
		                                                                    ///       </summary>
		private bool _NeedCustomToolbar = false;

		                                                                    /// <summary>
		                                                                    ///       是否响应对象添加或删除事件
		                                                                    ///       </summary>
		private bool _NeedDelAndIns = false;

		private bool _ValueOfSetProtectAreaHighlight = false;

		private static Dictionary<int, string> _NsoDateTimeFormats;

		private bool _EnableRaiseOnNsoAuthorityStatus = true;

		private bool _EnableRaiseOnNsoBeforeFilePrinted = true;

		private bool _EnableRaiseOnNsoBeforeFilePrintedEx = true;

		private bool _EnableRaiseOnNsoBeforeFileSaved = true;

		private bool _EnableRaiseOnNsoDragAndDropCompleted = true;

		private bool _EnableRaiseOnNsoFileClosingEvent = true;

		private bool _EnableRaiseOnNsoFileModifyChanged = true;

		private bool _EnableRaiseOnNsoFileOpenCompleted = true;

		private bool _EnableRaiseOnNsoFileReOpenedWhenCrash = true;

		private bool _EnableRaiseOnNsoFileSavedCompleted = true;

		private bool _EnableRaiseOnNsoImageClick = true;

		private bool _EnableRaiseOnNsoImageDBClick = true;

		private bool _EnableRaiseOnNsoIntellectiveEvent = true;

		private bool _EnableRaiseOnNsoKeyPressedEvent = true;

		private bool _EnableRaiseOnNsoKeyPressedEvent2 = true;

		private bool _EnableRaiseOnNsoLButtonDown = true;

		private bool _EnableRaiseOnNsoNetDogStatus = true;

		private bool _EnableRaiseOnNsoNewControlBeforeDropDown = true;

		private bool _EnableRaiseOnNsoNewControlChanged = true;

		private bool _EnableRaiseOnNsoNewControlCheckedChanged = true;

		private bool _EnableRaiseOnNsoNewControlClick = true;

		private bool _EnableRaiseOnNsoNewControlCursorEnter = true;

		private bool _EnableRaiseOnNsoNewControlCursorLeft = true;

		private bool _EnableRaiseOnNsoNewControlDBClick = true;

		private bool _EnableRaiseOnNsoNewControlDropDown = true;

		private bool _EnableRaiseOnNsoNewControlGainFocus = true;

		private bool _EnableRaiseOnNsoNewControlInsertOrDelEvent = true;

		private bool _EnableRaiseOnNsoNewControlLostFocus = true;

		private bool _EnableRaiseOnNsoOLEClick = true;

		private bool _EnableRaiseOnNsoPreviewExitEvent = true;

		private bool _EnableRaiseOnNsoRadioButtonCheckChanged = true;

		private bool _EnableRaiseOnNsoRButtonUp = true;

		private bool _EnableRaiseOnNsoRegionDBClick = true;

		private bool _EnableRaiseOnNsoRegionGainFocus = true;

		private bool _EnableRaiseOnNsoRegionLostFocus = true;

		private bool _EnableRaiseOnNsoRegionChanged = true;

		private bool _EnableRaiseOnNsoSectionChanged = true;

		private bool _EnableRaiseOnNsoSectionClick = true;

		private bool _EnableRaiseOnNsoSectionCursorEnter = true;

		private bool _EnableRaiseOnNsoSectionCursorLeft = true;

		private bool _EnableRaiseOnNsoSectionDBClick = true;

		private bool _EnableRaiseOnNsoSectionGainFocus = true;

		private bool _EnableRaiseOnNsoSectionInsertOrDelEvent = true;

		private bool _EnableRaiseOnNsoSectionLostFocus = true;

		private bool _EnableRaiseOnNsoSelectionChanged = true;

		private bool _EnableRaiseOnNsoTableAddNewRowWhenPressTabKey = true;

		private bool _EnableRaiseOnNsoToolbarAddinEvent = true;

		private bool _EnableRaiseOnNsoUserMenuItemEvent = true;

		private bool _EnableRaiseOnNsoUserToolbarEvent = true;

		private TrackListBoxControler _TrackListController = null;

		private static EnableState _DefaultNewControlHighlight;

		private int _SupportSuperscript = 0;

		                                                                    /// <summary> 
		                                                                    ///       必需的设计器变量。
		                                                                    ///       </summary>
		private IContainer components = null;

		private int _InstanceIndex = 0;

		public MenuStrip mainMenuStrip;

		public ToolStripMenuItem menuPickList;

		public ToolStripMenuItem menuPageDialog;

		public WriterCommandControler myCommandControler;

		public ToolStripMenuItem menuPrint;

		public ToolStripMenuItem menuEditMenu;

		public ToolStripMenuItem menuUndo;

		public ToolStripMenuItem menuRedo;

		public ToolStripSeparator toolStripSeparator4;

		public ToolStripMenuItem menuCut;

		public ToolStripMenuItem menuCopy;

		public ToolStripMenuItem menuPaste;

		public ToolStripMenuItem menuPasteSpecial;

		public ToolStripMenuItem menuSelectAll;

		public ToolStripSeparator toolStripSeparator6;

		public ToolStripMenuItem menuSearchDialog;

		public ToolStripMenuItem menuViewMenu;

		public ToolStripMenuItem mJumpPrint;

		public ToolStripSeparator toolStripSeparator18;

		public ToolStripMenuItem mPageViewMode;

		public ToolStripMenuItem mNormalViewMode;

		public ToolStripSeparator toolStripSeparator21;

		public ToolStripMenuItem mCleanViewMode;

		public ToolStripMenuItem mComplexViewMode;

		public ToolStripMenuItem menuFormatMenu;

		public ToolStripMenuItem menuParagraphDialog;

		public ToolStripMenuItem menuFontDialog;

		public ToolStripMenuItem mTextColor;

		public ToolStripMenuItem mBackColor;

		public ToolStripSeparator toolStripSeparator7;

		public ToolStripMenuItem mSup;

		public ToolStripMenuItem mSub;

		public ToolStripSeparator toolStripSeparator8;

		public ToolStripMenuItem mAlignLeft;

		public ToolStripMenuItem mCenterAlign;

		public ToolStripMenuItem mRightAlign;

		public ToolStripSeparator toolStripSeparator9;

		public ToolStripMenuItem mNumerList;

		public ToolStripMenuItem mBulleteList;

		public ToolStripMenuItem mFirstIndent;

		public ToolStripSeparator toolStripSeparator26;

		public ToolStripMenuItem mFieldHighlight;

		public ToolStripMenuItem menuTableMenu;

		public ToolStripMenuItem menuTableInsertMenu;

		public ToolStripMenuItem menuTableDeleteMenu;

		public ToolStripSeparator toolStripSeparator20;

		public ToolStripMenuItem mCellAlign;

		public ToolStripMenuItem mAlignTopLeft;

		public ToolStripMenuItem mAlignTopCenter;

		public ToolStripMenuItem mAlignTopRight;

		public ToolStripMenuItem mAlignMiddleLeft;

		public ToolStripMenuItem mAlignMiddleCenter;

		public ToolStripMenuItem mAlignMiddleRight;

		public ToolStripMenuItem mAlignBottomLeft;

		public ToolStripMenuItem mAlignBottomCenter;

		public ToolStripMenuItem mAlignBottomRight;

		public ToolStripSeparator toolStripSeparator16;

		public ToolStripMenuItem menuMergeCells;

		public ToolStripMenuItem menuSplitCell;

		public ToolStripMenuItem menuHeadingRowsRepeat;

		public ToolStrip standardbar;

		public ToolStripButton btnCut;

		public ToolStripButton btnCopy;

		public ToolStripButton btnPaste;

		public ToolStripSeparator toolStripSeparator12;

		public ToolStripButton btnUndo;

		public ToolStripButton btnRedo;

		public ToolStripSeparator toolStripSeparator13;

		public ToolStripComboBox cboFontName;

		public ToolStripComboBox cboFontSize;

		public ToolStripButton btnFont;

		public ToolStripButton btnBold;

		public ToolStripButton btnItalic;

		public ToolStripButton btnUnderline;

		public ToolStripButton btnColor;

		public ToolStripButton btnBackColor;

		public ToolStripButton btnSup;

		public ToolStripButton btnSub;

		public ToolStripSeparator toolStripSeparator14;

		public ToolStripButton btnAlignLeft;

		public ToolStripButton btnAlignCenter;

		public ToolStripButton btnAlignRight;

		public ToolStripSeparator toolStripSeparator15;

		public ToolStripButton btnNumberedList;

		public ToolStripButton btnBulletedList;

		public ToolStripMenuItem cmCut;

		public ToolStripMenuItem cmCopy;

		public ToolStripMenuItem cmUndo;

		public ToolStripMenuItem cmPaste;

		public ToolStripMenuItem cmRedo;

		public ToolStripMenuItem cmDelete;

		public ToolStripMenuItem cmColor;

		public ToolStripMenuItem cmFont;

		public ToolStripMenuItem cmAlignLeft;

		public ToolStripMenuItem cmAlignCenter;

		public ToolStripMenuItem cmAlignRight;

		public ToolStripSeparator toolStripMenuItem4;

		public ToolStripSeparator toolStripMenuItem5;

		public ContextMenuStrip cmEdit;

		public ToolStripSeparator toolStripMenuItem6;

		public ToolStripSeparator toolStripMenuItem8;

		public WriterControl myEditControl;

		public ContextMenuStrip cmImage;

		public ToolStripMenuItem cmi_Redo;

		public ToolStripMenuItem cmi_Undo;

		public ToolStripSeparator toolStripSeparator27;

		public ToolStripMenuItem cmi_Cut;

		public ToolStripMenuItem cmi_Copy;

		public ToolStripMenuItem cmi_Paste;

		public ToolStripMenuItem cmi_Delete;

		public ToolStripSeparator toolStripSeparator28;

		public ToolStripMenuItem cmi_Properties;

		public ToolStripSeparator toolStripSeparator31;

		public ToolStripMenuItem cmi_BorderBackground;

		public ToolStripMenuItem cmi_EditImage;

		public ToolStripMenuItem mDocumentGridLine;

		public ContextMenuStrip cmTableCell;

		public ToolStripMenuItem cmc_Redo;

		public ToolStripMenuItem cmc_Undo;

		public ToolStripSeparator toolStripSeparator34;

		public ToolStripMenuItem cmc_Cut;

		public ToolStripMenuItem cmc_Copy;

		public ToolStripMenuItem cmc_Paste;

		public ToolStripMenuItem cmc_TableRowProperties;

		public ToolStripMenuItem cmc_CellProperties;

		public ToolStripSeparator toolStripSeparator37;

		public ToolStripMenuItem cmc_CellContentAlign;

		public ToolStripMenuItem toolStripMenuItem28;

		public ToolStripMenuItem toolStripMenuItem29;

		public ToolStripMenuItem toolStripMenuItem30;

		public ToolStripMenuItem toolStripMenuItem31;

		public ToolStripMenuItem toolStripMenuItem32;

		public ToolStripMenuItem toolStripMenuItem33;

		public ToolStripMenuItem toolStripMenuItem34;

		public ToolStripMenuItem toolStripMenuItem35;

		public ToolStripMenuItem toolStripMenuItem36;

		public ToolStripMenuItem cmc_Insert;

		public ToolStripMenuItem toolStripMenuItem37;

		public ToolStripMenuItem toolStripMenuItem38;

		public ToolStripSeparator toolStripSeparator38;

		public ToolStripMenuItem toolStripMenuItem40;

		public ToolStripMenuItem toolStripMenuItem9;

		public ToolStripMenuItem cmc_DeleteRow;

		public ToolStripMenuItem cmc_DeleteColumn;

		public ToolStripSeparator toolStripSeparator39;

		public ToolStripMenuItem cmc_MergeCell;

		public ToolStripMenuItem cmc_SplitCell;

		public ToolStripSeparator toolStripMenuItem14;

		public ToolStripMenuItem cmc_CellBorderBackground;

		public ToolStripMenuItem menuPrintPreview;

		public ToolStripMenuItem cmc_Properties;

		public ToolStripSeparator toolStripMenuItem17;

		public ToolStripMenuItem mHeaderBottomLine;

		public ToolStripSeparator toolStripSeparator2;

		public ToolStripMenuItem cmi_EmitInText;

		public ToolStripMenuItem cmi_TextSurrdings;

		public TreeView tvwNavigate;

		public SplitContainer mySplitContainer;

		private TabControl tabFunction;

		private TabPage tpNavigate;

		private TabPage tpTrack;

		private ListBox lstTrack;

		public ContextMenuStrip cmField;

		public ToolStripMenuItem cmf_Undo;

		public ToolStripMenuItem cmf_Redo;

		public ToolStripSeparator toolStripSeparator3;

		public ToolStripMenuItem cmf_Cut;

		public ToolStripMenuItem cmf_Copy;

		public ToolStripMenuItem cmf_Paste;

		public ToolStripMenuItem cmf_Delete;

		private ToolStripMenuItem cmf_ClearFieldValue;

		public ToolStripSeparator toolStripSeparator11;

		public ToolStripMenuItem cmf_Color;

		public ToolStripMenuItem cmf_Font;

		public ToolStripSeparator toolStripSeparator22;

		public ToolStripMenuItem cmf_LeftAlign;

		public ToolStripMenuItem cmf_AlignCenter;

		public ToolStripMenuItem cmf_AlignRight;

		public ToolStripSeparator toolStripSeparator23;

		private ToolStripMenuItem toolStripMenuItem7;

		private ToolStripMenuItem mDebugout;

		private ToolStripMenuItem toolStripMenuItem1;

		private Panel pnlStatus;

		private TrackBar tbZoom;

		private Label lblZoom;

		private Label lblInsState;

		private Label lblPosition;

		private ToolStripMenuItem menuTableDialog;

		private ToolStripMenuItem toolStripMenuItem12;

		private ToolStripMenuItem toolStripMenuItem13;

		private Panel pnlPrintPreview;

		internal WriterPrintPreviewControl myPreviewControl;

		private ToolStripMenuItem menuResetAttributes;

		private ToolStripMenuItem menuStatusBarVisible;

		private ToolStripMenuItem menuAvailableToolbars;

		private ToolStripMenuItem menuInsertPageHeader;

		private ToolStripMenuItem menuInsertPageFooter;

		private ToolStripMenuItem menuInsertMenu;

		private ToolStripMenuItem menuInsertBreak;

		private ToolStripMenuItem menuFieldMenu;

		private ToolStripMenuItem menuInsertSymbol;

		private ToolStripMenuItem menuInsertAnnotation;

		private ToolStripMenuItem menuGraphicMenu;

		private ToolStripMenuItem menuInsertDoc;

		private ToolStripMenuItem menuInsertMediFormula;

		private ToolStripMenuItem menuInsertTableElement;

		private ToolStripMenuItem toolStripMenuItem10;

		private ToolStripMenuItem toolStripMenuItem15;

		private ToolStripMenuItem toolStripMenuItem16;

		private ToolStripMenuItem toolStripMenuItem18;

		private ToolStripMenuItem toolStripMenuItem19;

		private ToolStripMenuItem toolStripMenuItem20;

		private ToolStripMenuItem toolStripMenuItem21;

		private ToolStripMenuItem menuProtect;

		private ToolStripMenuItem menuUnSetCellsReadOnly;

		private ToolStripMenuItem menuHelpMenu;

		private ToolStripMenuItem menuAbout;

		private ToolStripMenuItem menunewDoc;

		private ToolStripMenuItem menuOpen;

		private ToolStripMenuItem menuSave;

		private ToolStripMenuItem menuSaveAs;

		private ToolStripMenuItem menuTableBoundaries;

		private ToolStripMenuItem menuTableSelectMenu;

		private ToolStripMenuItem menuSelectTable;

		private ToolStripMenuItem menuSelectRow;

		private ToolStripMenuItem menuSelectCell;

		private ToolStripMenuItem menuBulletsAndNumberingDialog;

		private ToolStripMenuItem menuZoom;

		private ToolStripMenuItem menuZoomIn;

		private ToolStripMenuItem menuZoomOut;

		private ToolStripMenuItem menuZoomReset;

		private ToolStripMenuItem menuZoomAuto;

		private ToolStripMenuItem menuSetDocumentProperties;

		private ToolStripMenuItem menuQuit;

		private ToolStripSeparator toolStripSeparator24;

		private ToolStripSeparator toolStripSeparator19;

		private ToolStripSeparator toolStripSeparator25;

		private ToolStripSeparator toolStripSeparator10;

		private ToolStripSeparator toolStripSeparator29;

		private ToolStripMenuItem menuControlCodes;

		private ToolStripMenuItem menuExportToPDF;

		private ToolStripMenuItem menuInsertDateTime;

		private ToolStripMenuItem menuInsertPageIndex;

		private ToolStripMenuItem menuInsertInputField;

		private ToolStripMenuItem menuExecuteCommand;

		private ToolStripMenuItem menuDeleteComment;

		private ToolStripMenuItem menudebugOut;

		private ToolStripMenuItem menuOptions;

		private ToolStripMenuItem cmDebug;

		private ToolStripMenuItem 执行命令ToolStripMenuItem;

		private ToolStripMenuItem 调试暑促和ToolStripMenuItem;

		private ToolStripMenuItem 系统设置ToolStripMenuItem;

		private ToolStripMenuItem 控件属性ToolStripMenuItem;

		private ToolStripMenuItem 元素属性ToolStripMenuItem;

		private ToolStripMenuItem cmCopyWithFormat;

		private ToolStripMenuItem toolStripMenuItem2;

		private ToolStripMenuItem toolStripMenuItem3;

		private ToolStripMenuItem toolStripMenuItem11;

		private ToolStripMenuItem toolStripMenuItem22;

		private ToolStripMenuItem toolStripMenuItem23;

		private ToolStripMenuItem toolStripMenuItem24;

		private ContextMenuStrip cmComment;

		private ToolStripMenuItem cmEditComment;

		private ToolStripMenuItem cmDeleteComment;

		private ToolStripContainer pnlMainContainer;

		private ToolStripButton btnFileNew;

		private ToolStripButton btnOpen;

		private ToolStripButton btnSave;

		private ToolStripSeparator toolStripSeparator5;

		private ToolStripSeparator toolStripSeparator1;

		private ToolStripButton btnSaveAs;

		private ToolStrip insertbar;

		private ToolStripButton btnInsertTable;

		private ToolStripButton btnInsertComment;

		private ToolStripSeparator toolStripSeparator17;

		private ToolStripButton btnInsertFileContent;

		private ToolStripButton btnInsertSpecifyCharacter;

		private ToolStripButton btnInsertImage;

		private ToolStripButton btnInsertMedicalExpression;

		private ToolStrip newcontrols;

		private ToolStripButton btnNsoInsertTextBox;

		private ToolStripButton btnNsoInsertNumberBox;

		private ToolStripButton btnNsoInsertCheckbox;

		private ToolStripSeparator toolStripSeparator30;

		private ToolStripButton btnNsoInsertList;

		private ToolStripButton btnNsoInsertRadio;

		private ToolStripButton btnNsoInsertCombobox;

		private ToolStripSeparator toolStripSeparator32;

		private ToolStripButton btnNsoInsertMulListBox;

		private ToolStripButton btnNsoInsertMulCombobox;

		private ToolStripButton btnNsoInsertDateTimeBox;

		private ToolStripButton btnPreviewMode;

		private ToolStripSeparator toolStripSeparator33;

		private ToolStripMenuItem mTools;

		private ToolStripMenuItem mVisibleExpression;

		private ToolStripMenuItem toolStripMenuItem25;

		private ToolStripMenuItem toolStripMenuItem26;

		private ToolStripMenuItem mHighlight;

		private ToolStripMenuItem toolStripMenuItem27;

		private ContextMenuStrip cmSingleCopy;

		private ToolStripMenuItem toolStripMenuItem39;

		private ToolStripMenuItem toolStripMenuItem41;

		private ToolStripMenuItem toolStripMenuItem42;

		private ToolStripMenuItem cmc_CellFont;

		private ToolStripButton btnInsertMedicalExpress;

		private ToolStripSeparator toolStripSeparator35;

		private ToolStripButton toolStripButton2;

		private ToolStripMenuItem cmParagraph;

		private List<string> _DictFileNames = new List<string>();

		private string _ValueOfHasFileOpened = "-1";

		private bool _AutoLockFile = true;

		private FileStream _CurrentLockFileStream = null;

		private bool _EnableFloatbar = true;

		private Dictionary<string, ToolStripItem> _UIButtons = null;

		private Dictionary<string, object> _UIMenuItems = null;

		                                                                    /// <summary>
		                                                                    ///       内置的编辑器控件对象
		                                                                    ///       </summary>
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		[ComVisible(false)]
		public WriterControl WriterControl => myEditControl;

		                                                                    /// <summary>
		                                                                    ///       能否记录日志文件
		                                                                    ///       </summary>
		private bool CanLogFile => !string.IsNullOrEmpty(_LogFileName);

		                                                                    /// <summary>
		                                                                    ///       控件标题文本
		                                                                    ///       </summary>
		[Browsable(false)]
		[DefaultValue(null)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[ComVisible(true)]
		public string ControlTitleText
		{
			get
			{
				return _ControlTitleText;
			}
			set
			{
				if (_ControlTitleText != value)
				{
					_ControlTitleText = value;
					Invalidate();
				}
			}
		}

		                                                                    /// <summary>
		                                                                    ///       文档对象，仅供DCWriter内部使用
		                                                                    ///       </summary>
		[Browsable(false)]
		[ComVisible(false)]
		public XTextDocument Document => myEditControl.Document;

		                                                                    /// <summary>
		                                                                    ///       注册码
		                                                                    ///       </summary>
		[DefaultValue(null)]
		[Category("Data")]
		public string RegisterCode
		{
			get
			{
				return myEditControl.RegisterCode;
			}
			set
			{
				myEditControl.RegisterCode = value;
			}
		}

		                                                                    /// <summary>
		                                                                    /// </summary>
		                                                                    /// <remarks>
		                                                                    /// </remarks>
		[DefaultValue(0)]
		[Category("Appearance")]
		public int PageTitlePosition
		{
			get
			{
				return (int)myEditControl.PageTitlePosition;
			}
			set
			{
				myEditControl.PageTitlePosition = (PageTitlePosition)value;
			}
		}

		                                                                    /// <summary>
		                                                                    ///       内置的文档编辑器控件
		                                                                    ///       </summary>
		[Browsable(false)]
		public WriterControl InnerWriterControl => myEditControl;

		                                                                    /// <summary>
		                                                                    ///       用户修改痕迹列表可见性设置
		                                                                    ///       </summary>
		[DefaultValue(FunctionControlVisibility.Hide)]
		[Description("用户修改痕迹列表可见性设置")]
		[Browsable(false)]
		public FunctionControlVisibility TrackListVisible
		{
			get
			{
				return _TrackListVisible;
			}
			set
			{
				if (_TrackListVisible != value)
				{
					_TrackListVisible = value;
					if (myEditControl.IsHandleCreated && tvwNavigate.IsHandleCreated)
					{
						RefreshFunctionControl();
					}
				}
			}
		}

		                                                                    /// <summary>
		                                                                    ///       导航树状列表可见性设置
		                                                                    ///       </summary>
		[Description("导航树状列表可见性设置")]
		[Browsable(false)]
		[DefaultValue(FunctionControlVisibility.Auto)]
		public FunctionControlVisibility NavigateTreeVisible
		{
			get
			{
				return _NavigateTreeVisible;
			}
			set
			{
				_NavigateTreeVisible = value;
				if (myEditControl.IsHandleCreated && tvwNavigate.IsHandleCreated)
				{
					RefreshFunctionControl();
				}
			}
		}

		[DefaultValue(true)]
		public bool IsAlertNotSupportedMember
		{
			get
			{
				return _IsAlertNotSupportedMember;
			}
			set
			{
				_IsAlertNotSupportedMember = value;
			}
		}

		                                                                    /// <summary>
		                                                                    ///       当前是否显示快键菜单
		                                                                    ///       </summary>
		private bool ShowContextMenu => true;

		                                                                    /// <summary>
		                                                                    ///       显示模板设计相关的提示信息
		                                                                    ///       </summary>
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[DefaultValue(false)]
		[Browsable(false)]
		[ComVisible(true)]
		public bool ShowDesignInfoToolTip
		{
			get
			{
				return _ShowDesignInfoToolTip;
			}
			set
			{
				_ShowDesignInfoToolTip = value;
			}
		}

		                                                                    /// <summary>
		                                                                    ///        属性读写：
		                                                                    ///       可读写, 
		                                                                    ///       BOOL类型值
		                                                                    ///       功能描述：
		                                                                    ///       读取当前光标位置或者选中区域的字体是否粗体。
		                                                                    ///       参数：无
		                                                                    ///       返回值：True – 粗体
		                                                                    ///              False – 非粗体
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1. TextBold = True（写设置）
		                                                                    ///       If AxNSOOffice1. TextBold = False then
		                                                                    ///         ….
		                                                                    ///        EndIf  ‘读设置
		                                                                    ///        Date:10-8 Jy
		                                                                    ///        </summary>
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		[ComVisible(true)]
		public bool TextBold
		{
			get
			{
				return myEditControl.CurrentStyle.Bold;
			}
			set
			{
				myEditControl.ExecuteCommand("Bold", showUI: false, value);
			}
		}

		                                                                    /// <summary>
		                                                                    ///       属性读写：
		                                                                    ///       可读写, 
		                                                                    ///       BSTR类型值
		                                                                    ///       功能描述：
		                                                                    ///       设置/读取当前光标位置或者选中区域的字体字库类型。
		                                                                    ///       参数：
		                                                                    ///       无
		                                                                    ///       返回值：BSTR
		                                                                    ///       例如 宋体,仿宋
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1. TextAsianName = “宋体”（写设置）
		                                                                    ///       If AxNSOOffice1. TextAsianName = “仿宋” then
		                                                                    ///       ….
		                                                                    ///       EndIf  ‘读设置
		                                                                    ///       Date:10-8 Jy
		                                                                    ///       </summary>
		[Browsable(false)]
		[ComVisible(true)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public string TextAsianName
		{
			get
			{
				return myEditControl.CurrentStyle.FontName;
			}
			set
			{
				myEditControl.ExecuteCommand("FontName", showUI: false, value);
			}
		}

		                                                                    /// <summary>
		                                                                    ///       属性读写：
		                                                                    ///       可读写, 
		                                                                    ///       LONG类型值
		                                                                    ///       功能描述：
		                                                                    ///       设置/读取当前光标位置或者选中区域的字体大小。
		                                                                    ///       参数：
		                                                                    ///       无
		                                                                    ///       返回值：LONG
		                                                                    ///       例如 10,11
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1. TextSize = 10（写设置）
		                                                                    ///       If AxNSOOffice1. TextSize = 11 then
		                                                                    ///       ….
		                                                                    ///       EndIf  ‘读设置
		                                                                    ///       实现说明
		                                                                    ///       Date:10-8 Jy
		                                                                    ///       </summary>
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[ComVisible(true)]
		public long TextSize
		{
			get
			{
				return long.Parse(myEditControl.CurrentStyle.FontSize.ToString());
			}
			set
			{
				myEditControl.ExecuteCommand("FontSize", showUI: false, Convert.ToDouble(value));
			}
		}

		                                                                    /// <summary>
		                                                                    ///       属性读写：
		                                                                    ///       可读写, 
		                                                                    ///       LONG类型值
		                                                                    ///       功能描述：
		                                                                    ///       设置/读取当前光标位置或者选中区域的对齐方式。
		                                                                    ///       参数：
		                                                                    ///       1		左对齐
		                                                                    ///       2		居中
		                                                                    ///       3		右对齐
		                                                                    ///       4		两端对齐
		                                                                    ///       返回值：LONG        
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1. TextAlignment= 1（写设置）
		                                                                    ///       If AxNSOOffice1. TextFirstLineIndent = 2 then
		                                                                    ///       ….
		                                                                    ///       EndIf  ‘读设置
		                                                                    ///       Date:10-8 Jy
		                                                                    ///       </summary>
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[ComVisible(true)]
		public int TextAlignment
		{
			get
			{
				switch (myEditControl.CurrentStyle.Align)
				{
				default:
					return -1;
				case DocumentContentAlignment.Left:
					return 1;
				case DocumentContentAlignment.Center:
					return 2;
				case DocumentContentAlignment.Right:
					return 3;
				case DocumentContentAlignment.Justify:
					return 4;
				}
			}
			set
			{
				int num = 0;
				switch (value)
				{
				case 1:
					myEditControl.ExecuteCommand("AlignLeft", showUI: false, null);
					break;
				case 2:
					myEditControl.ExecuteCommand("AlignCenter", showUI: false, null);
					break;
				case 3:
					myEditControl.ExecuteCommand("AlignRight", showUI: false, null);
					break;
				case 4:
					myEditControl.ExecuteCommand("AlignJustify", showUI: false, null);
					break;
				}
			}
		}

		[ComVisible(true)]
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public virtual bool IsDebug
		{
			get
			{
				if (myEditControl == null)
				{
					return false;
				}
				return myEditControl.DocumentOptions.BehaviorOptions.DebugMode;
			}
			set
			{
				if (myEditControl != null)
				{
					myEditControl.DocumentOptions.BehaviorOptions.DebugMode = value;
				}
			}
		}

		[Browsable(false)]
		[ComVisible(true)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public int TextBackColor
		{
			get
			{
				if (Document != null && Document.CurrentStyleInfo != null && Document.CurrentStyleInfo.Content != null)
				{
					return Document.CurrentStyleInfo.Content.BackgroundColor.ToArgb();
				}
				return Color.Transparent.ToArgb();
			}
			set
			{
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[ComVisible(true)]
		public bool TextBackColorPrintable
		{
			get
			{
				return true;
			}
			set
			{
			}
		}

		[Browsable(false)]
		[ComVisible(true)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public int TextColor
		{
			get
			{
				if (Document != null && Document.CurrentStyleInfo != null && Document.CurrentStyleInfo.Content != null)
				{
					return Document.CurrentStyleInfo.Content.Color.ToArgb();
				}
				return Color.Black.ToArgb();
			}
			set
			{
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[DispId(286)]
		[ComVisible(true)]
		[Browsable(false)]
		public int TextFirstLineIndent
		{
			get
			{
				if (Document != null && Document.CurrentStyleInfo != null && Document.CurrentStyleInfo.Content != null)
				{
					return (int)Document.CurrentStyleInfo.Paragraph.FirstLineIndent;
				}
				return 0;
			}
			set
			{
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[ComVisible(true)]
		public bool TextItalic
		{
			get
			{
				if (Document != null && Document.CurrentStyleInfo != null && Document.CurrentStyleInfo.Content != null)
				{
					return Document.CurrentStyleInfo.Content.Italic;
				}
				return false;
			}
			set
			{
				int num = 16;
				if (myEditControl != null)
				{
					myEditControl.ExecuteCommand("Italic", showUI: false, value);
				}
			}
		}

		[Browsable(false)]
		[ComVisible(true)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public WdUnderLine TextUnderLine
		{
			get
			{
				int num = 3;
				if (myEditControl == null)
				{
					return WdUnderLine.wdNoUnderLine;
				}
				if (myEditControl.IsCommandChecked("Underline"))
				{
					return WdUnderLine.wdSingleLine;
				}
				return WdUnderLine.wdNoUnderLine;
			}
			set
			{
				int num = 3;
				if (myEditControl != null)
				{
					myEditControl.ExecuteCommand("Underline", showUI: false, value != WdUnderLine.wdNoUnderLine);
				}
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[ComVisible(true)]
		[Browsable(false)]
		public string TextWestName
		{
			get
			{
				return null;
			}
			set
			{
			}
		}

		[ComVisible(true)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public string Version1
		{
			get
			{
				Version version = new Version(base.ProductVersion);
				return version.Major.ToString();
			}
		}

		[ComVisible(true)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[DispId(371)]
		public string Version2
		{
			get
			{
				Version version = new Version(base.ProductVersion);
				return version.Minor.ToString();
			}
		}

		                                                                    /// <summary>
		                                                                    ///       输入域(Section)是否可以嵌套插入，默认为true，表示可以嵌套插入
		                                                                    ///       </summary>
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public bool EnableSectionNested
		{
			get
			{
				return _EnableSectionNested;
			}
			set
			{
				_EnableSectionNested = value;
			}
		}

		                                                                    /// <summary>
		                                                                    ///       无用的属性
		                                                                    ///       </summary>
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[ComVisible(true)]
		public AxHost.State OcxState
		{
			get
			{
				return _OcxState;
			}
			set
			{
				_OcxState = value;
			}
		}

		                                                                    /// <summary>
		                                                                    ///       内置的文档编辑器控件
		                                                                    ///       </summary>
		[ComVisible(true)]
		private WriterControl MyWriterControl => myEditControl;

		private static Dictionary<int, string> NsoDateTimeFormats
		{
			get
			{
				int num = 17;
				if (_NsoDateTimeFormats == null)
				{
					_NsoDateTimeFormats = new Dictionary<int, string>();
					_NsoDateTimeFormats[0] = "yyyy-MM-dd HH:mm";
					_NsoDateTimeFormats[1] = "yyyy-MM-dd HH";
					_NsoDateTimeFormats[2] = "yyyy-MM-dd";
					_NsoDateTimeFormats[3] = "MM-dd";
					_NsoDateTimeFormats[4] = "HH:mm";
					_NsoDateTimeFormats[5] = "yyyy年M月d日HH时mm分";
					_NsoDateTimeFormats[6] = "yyyy年M月d日HH时";
					_NsoDateTimeFormats[7] = "yyyy年M月d日";
					_NsoDateTimeFormats[8] = "M月d日";
					_NsoDateTimeFormats[9] = "HH时mm分";
					_NsoDateTimeFormats[10] = "yyyy/M/d";
					_NsoDateTimeFormats[11] = "yyyy-MM-dd 星期";
					_NsoDateTimeFormats[12] = "yyyy-MM-dd 星期 HH:mm";
					_NsoDateTimeFormats[13] = "MM-dd 星期";
					_NsoDateTimeFormats[14] = "yyyy年M月d日 星期 HH时mm分";
					_NsoDateTimeFormats[15] = "yyyy年M月d日 星期 HH时";
					_NsoDateTimeFormats[16] = "yyyy年M月d日 星期";
					_NsoDateTimeFormats[17] = "M月d日 星期";
					_NsoDateTimeFormats[18] = "yyyy/M/d 星期";
					_NsoDateTimeFormats[19] = "yyyy-MM-dd (星期) HH:mm:ss";
				}
				return _NsoDateTimeFormats;
			}
		}

		private bool EnableRaiseOnNsoAuthorityStatus
		{
			get
			{
				return _EnableRaiseOnNsoAuthorityStatus;
			}
			set
			{
				_EnableRaiseOnNsoAuthorityStatus = value;
			}
		}

		private bool EnableRaiseOnNsoBeforeFilePrinted
		{
			get
			{
				return _EnableRaiseOnNsoBeforeFilePrinted;
			}
			set
			{
				_EnableRaiseOnNsoBeforeFilePrinted = value;
			}
		}

		private bool EnableRaiseOnNsoBeforeFilePrintedEx
		{
			get
			{
				return _EnableRaiseOnNsoBeforeFilePrintedEx;
			}
			set
			{
				_EnableRaiseOnNsoBeforeFilePrintedEx = value;
			}
		}

		private bool EnableRaiseOnNsoBeforeFileSaved
		{
			get
			{
				return _EnableRaiseOnNsoBeforeFileSaved;
			}
			set
			{
				_EnableRaiseOnNsoBeforeFileSaved = value;
			}
		}

		private bool EnableRaiseOnNsoDragAndDropCompleted
		{
			get
			{
				return _EnableRaiseOnNsoDragAndDropCompleted;
			}
			set
			{
				_EnableRaiseOnNsoDragAndDropCompleted = value;
			}
		}

		private bool EnableRaiseOnNsoFileClosingEvent
		{
			get
			{
				return _EnableRaiseOnNsoFileClosingEvent;
			}
			set
			{
				_EnableRaiseOnNsoFileClosingEvent = value;
			}
		}

		private bool EnableRaiseOnNsoFileModifyChanged
		{
			get
			{
				return _EnableRaiseOnNsoFileModifyChanged;
			}
			set
			{
				_EnableRaiseOnNsoFileModifyChanged = value;
			}
		}

		private bool EnableRaiseOnNsoFileOpenCompleted
		{
			get
			{
				return _EnableRaiseOnNsoFileOpenCompleted;
			}
			set
			{
				_EnableRaiseOnNsoFileOpenCompleted = value;
			}
		}

		private bool EnableRaiseOnNsoFileReOpenedWhenCrash
		{
			get
			{
				return _EnableRaiseOnNsoFileReOpenedWhenCrash;
			}
			set
			{
				_EnableRaiseOnNsoFileReOpenedWhenCrash = value;
			}
		}

		private bool EnableRaiseOnNsoFileSavedCompleted
		{
			get
			{
				return _EnableRaiseOnNsoFileSavedCompleted;
			}
			set
			{
				_EnableRaiseOnNsoFileSavedCompleted = value;
			}
		}

		private bool EnableRaiseOnNsoImageClick
		{
			get
			{
				return _EnableRaiseOnNsoImageClick;
			}
			set
			{
				_EnableRaiseOnNsoImageClick = value;
			}
		}

		private bool EnableRaiseOnNsoImageDBClick
		{
			get
			{
				return _EnableRaiseOnNsoImageDBClick;
			}
			set
			{
				_EnableRaiseOnNsoImageDBClick = value;
			}
		}

		private bool EnableRaiseOnNsoIntellectiveEvent
		{
			get
			{
				return _EnableRaiseOnNsoIntellectiveEvent;
			}
			set
			{
				_EnableRaiseOnNsoIntellectiveEvent = value;
			}
		}

		private bool EnableRaiseOnNsoKeyPressedEvent
		{
			get
			{
				return _EnableRaiseOnNsoKeyPressedEvent;
			}
			set
			{
				_EnableRaiseOnNsoKeyPressedEvent = value;
			}
		}

		private bool EnableRaiseOnNsoKeyPressedEvent2
		{
			get
			{
				return _EnableRaiseOnNsoKeyPressedEvent2;
			}
			set
			{
				_EnableRaiseOnNsoKeyPressedEvent2 = value;
			}
		}

		private bool EnableRaiseOnNsoLButtonDown
		{
			get
			{
				return _EnableRaiseOnNsoLButtonDown;
			}
			set
			{
				_EnableRaiseOnNsoLButtonDown = value;
			}
		}

		private bool EnableRaiseOnNsoNetDogStatus
		{
			get
			{
				return _EnableRaiseOnNsoNetDogStatus;
			}
			set
			{
				_EnableRaiseOnNsoNetDogStatus = value;
			}
		}

		private bool EnableRaiseOnNsoNewControlBeforeDropDown
		{
			get
			{
				return _EnableRaiseOnNsoNewControlBeforeDropDown;
			}
			set
			{
				_EnableRaiseOnNsoNewControlBeforeDropDown = value;
			}
		}

		private bool EnableRaiseOnNsoNewControlChanged
		{
			get
			{
				return _EnableRaiseOnNsoNewControlChanged;
			}
			set
			{
				_EnableRaiseOnNsoNewControlChanged = value;
			}
		}

		private bool EnableRaiseOnNsoNewControlCheckedChanged
		{
			get
			{
				return _EnableRaiseOnNsoNewControlCheckedChanged;
			}
			set
			{
				_EnableRaiseOnNsoNewControlCheckedChanged = value;
			}
		}

		private bool EnableRaiseOnNsoNewControlClick
		{
			get
			{
				return _EnableRaiseOnNsoNewControlClick;
			}
			set
			{
				_EnableRaiseOnNsoNewControlClick = value;
			}
		}

		private bool EnableRaiseOnNsoNewControlCursorEnter
		{
			get
			{
				return _EnableRaiseOnNsoNewControlCursorEnter;
			}
			set
			{
				_EnableRaiseOnNsoNewControlCursorEnter = value;
			}
		}

		private bool EnableRaiseOnNsoNewControlCursorLeft
		{
			get
			{
				return _EnableRaiseOnNsoNewControlCursorLeft;
			}
			set
			{
				_EnableRaiseOnNsoNewControlCursorLeft = value;
			}
		}

		private bool EnableRaiseOnNsoNewControlDBClick
		{
			get
			{
				return _EnableRaiseOnNsoNewControlDBClick;
			}
			set
			{
				_EnableRaiseOnNsoNewControlDBClick = value;
			}
		}

		private bool EnableRaiseOnNsoNewControlDropDown
		{
			get
			{
				return _EnableRaiseOnNsoNewControlDropDown;
			}
			set
			{
				_EnableRaiseOnNsoNewControlDropDown = value;
			}
		}

		private bool EnableRaiseOnNsoNewControlGainFocus
		{
			get
			{
				return _EnableRaiseOnNsoNewControlGainFocus;
			}
			set
			{
				_EnableRaiseOnNsoNewControlGainFocus = value;
			}
		}

		private bool EnableRaiseOnNsoNewControlInsertOrDelEvent
		{
			get
			{
				return _EnableRaiseOnNsoNewControlInsertOrDelEvent;
			}
			set
			{
				_EnableRaiseOnNsoNewControlInsertOrDelEvent = value;
			}
		}

		private bool EnableRaiseOnNsoNewControlLostFocus
		{
			get
			{
				return _EnableRaiseOnNsoNewControlLostFocus;
			}
			set
			{
				_EnableRaiseOnNsoNewControlLostFocus = value;
			}
		}

		private bool EnableRaiseOnNsoOLEClick
		{
			get
			{
				return _EnableRaiseOnNsoOLEClick;
			}
			set
			{
				_EnableRaiseOnNsoOLEClick = value;
			}
		}

		private bool EnableRaiseOnNsoPreviewExitEvent
		{
			get
			{
				return _EnableRaiseOnNsoPreviewExitEvent;
			}
			set
			{
				_EnableRaiseOnNsoPreviewExitEvent = value;
			}
		}

		private bool EnableRaiseOnNsoRadioButtonCheckChanged
		{
			get
			{
				return _EnableRaiseOnNsoRadioButtonCheckChanged;
			}
			set
			{
				_EnableRaiseOnNsoRadioButtonCheckChanged = value;
			}
		}

		private bool EnableRaiseOnNsoRButtonUp
		{
			get
			{
				return _EnableRaiseOnNsoRButtonUp;
			}
			set
			{
				_EnableRaiseOnNsoRButtonUp = value;
			}
		}

		private bool EnableRaiseOnNsoRegionDBClick
		{
			get
			{
				return _EnableRaiseOnNsoRegionDBClick;
			}
			set
			{
				_EnableRaiseOnNsoRegionDBClick = value;
			}
		}

		private bool EnableRaiseOnNsoRegionGainFocus
		{
			get
			{
				return _EnableRaiseOnNsoRegionGainFocus;
			}
			set
			{
				_EnableRaiseOnNsoRegionGainFocus = value;
			}
		}

		private bool EnableRaiseOnNsoRegionLostFocus
		{
			get
			{
				return _EnableRaiseOnNsoRegionLostFocus;
			}
			set
			{
				_EnableRaiseOnNsoRegionLostFocus = value;
			}
		}

		private bool EnableRaiseOnNsoRegionChanged
		{
			get
			{
				return _EnableRaiseOnNsoRegionChanged;
			}
			set
			{
				_EnableRaiseOnNsoRegionChanged = value;
			}
		}

		private bool EnableRaiseOnNsoSectionChanged
		{
			get
			{
				return _EnableRaiseOnNsoSectionChanged;
			}
			set
			{
				_EnableRaiseOnNsoSectionChanged = value;
			}
		}

		private bool EnableRaiseOnNsoSectionClick
		{
			get
			{
				return _EnableRaiseOnNsoSectionClick;
			}
			set
			{
				_EnableRaiseOnNsoSectionClick = value;
			}
		}

		private bool EnableRaiseOnNsoSectionCursorEnter
		{
			get
			{
				return _EnableRaiseOnNsoSectionCursorEnter;
			}
			set
			{
				_EnableRaiseOnNsoSectionCursorEnter = value;
			}
		}

		private bool EnableRaiseOnNsoSectionCursorLeft
		{
			get
			{
				return _EnableRaiseOnNsoSectionCursorLeft;
			}
			set
			{
				_EnableRaiseOnNsoSectionCursorLeft = value;
			}
		}

		private bool EnableRaiseOnNsoSectionDBClick
		{
			get
			{
				return _EnableRaiseOnNsoSectionDBClick;
			}
			set
			{
				_EnableRaiseOnNsoSectionDBClick = value;
			}
		}

		private bool EnableRaiseOnNsoSectionGainFocus
		{
			get
			{
				return _EnableRaiseOnNsoSectionGainFocus;
			}
			set
			{
				_EnableRaiseOnNsoSectionGainFocus = value;
			}
		}

		private bool EnableRaiseOnNsoSectionInsertOrDelEvent
		{
			get
			{
				return _EnableRaiseOnNsoSectionInsertOrDelEvent;
			}
			set
			{
				_EnableRaiseOnNsoSectionInsertOrDelEvent = value;
			}
		}

		private bool EnableRaiseOnNsoSectionLostFocus
		{
			get
			{
				return _EnableRaiseOnNsoSectionLostFocus;
			}
			set
			{
				_EnableRaiseOnNsoSectionLostFocus = value;
			}
		}

		private bool EnableRaiseOnNsoSelectionChanged
		{
			get
			{
				return _EnableRaiseOnNsoSelectionChanged;
			}
			set
			{
				_EnableRaiseOnNsoSelectionChanged = value;
			}
		}

		private bool EnableRaiseOnNsoTableAddNewRowWhenPressTabKey
		{
			get
			{
				return _EnableRaiseOnNsoTableAddNewRowWhenPressTabKey;
			}
			set
			{
				_EnableRaiseOnNsoTableAddNewRowWhenPressTabKey = value;
			}
		}

		private bool EnableRaiseOnNsoToolbarAddinEvent
		{
			get
			{
				return _EnableRaiseOnNsoToolbarAddinEvent;
			}
			set
			{
				_EnableRaiseOnNsoToolbarAddinEvent = value;
			}
		}

		private bool EnableRaiseOnNsoUserMenuItemEvent
		{
			get
			{
				return _EnableRaiseOnNsoUserMenuItemEvent;
			}
			set
			{
				_EnableRaiseOnNsoUserMenuItemEvent = value;
			}
		}

		private bool EnableRaiseOnNsoUserToolbarEvent
		{
			get
			{
				return _EnableRaiseOnNsoUserToolbarEvent;
			}
			set
			{
				_EnableRaiseOnNsoUserToolbarEvent = value;
			}
		}

		                                                                    /// <summary>
		                                                                    ///       自动锁定文档
		                                                                    ///       </summary>
		[DefaultValue(true)]
		public bool AutoLockFile
		{
			get
			{
				return _AutoLockFile;
			}
			set
			{
				_AutoLockFile = value;
				if (!_AutoLockFile)
				{
					UnlockCurrentFile();
				}
			}
		}

		private Dictionary<string, ToolStripItem> UIButtons
		{
			get
			{
				int num = 2;
				if (_UIButtons == null)
				{
					_UIButtons = new Dictionary<string, ToolStripItem>();
					_UIButtons["standardbar.PreviewMode"] = btnPreviewMode;
					_UIButtons["standardbar.newDoc"] = btnFileNew;
					_UIButtons["standardbar.Open"] = btnOpen;
					_UIButtons["standardbar.Save"] = btnSave;
					_UIButtons["standardbar.SaveAs"] = btnSaveAs;
					_UIButtons["standardbar.ExportDirectToPDF"] = null;
					_UIButtons["standardbar.PrintDefault"] = null;
					_UIButtons["standardbar.PrintPreview"] = null;
					_UIButtons["standardbar.TroopInput"] = null;
					_UIButtons["standardbar.Cut"] = btnCut;
					_UIButtons["standardbar.Copy"] = btnCopy;
					_UIButtons["standardbar.Paste"] = btnPaste;
					_UIButtons["standardbar.FormatPaintbrush"] = null;
					_UIButtons["standardbar.Undo"] = btnUndo;
					_UIButtons["standardbar.Redo"] = btnRedo;
					_UIButtons["standardbar.InsertTable"] = btnInsertTable;
					_UIButtons["standardbar.InsertDraw"] = null;
					_UIButtons["standardbar.SearchDialog"] = null;
					_UIButtons["standardbar.Navigator"] = null;
					_UIButtons["standardbar.Gallery"] = null;
					_UIButtons["standardbar.ControlCodes"] = null;
					_UIButtons["standardbar.Zoom"] = null;
					_UIButtons["textobjectbar.DesignerDialog"] = null;
					_UIButtons["textobjectbar.StyleApply"] = null;
					_UIButtons["textobjectbar.CharFontName"] = cboFontName;
					_UIButtons["textobjectbar.FontHeight"] = cboFontSize;
					_UIButtons["textobjectbar.Font"] = btnFont;
					_UIButtons["textobjectbar.Bold"] = btnBold;
					_UIButtons["textobjectbar.Italic"] = btnItalic;
					_UIButtons["textobjectbar.Underline"] = btnUnderline;
					_UIButtons["textobjectbar.SuperScript"] = btnSup;
					_UIButtons["textobjectbar.SubScript"] = btnSub;
					_UIButtons["textobjectbar.LeftPara"] = btnAlignLeft;
					_UIButtons["textobjectbar.CenterPara"] = btnAlignCenter;
					_UIButtons["textobjectbar.RightPara"] = btnAlignRight;
					_UIButtons["textobjectbar.JustifyPara"] = null;
					_UIButtons["textobjectbar.DefaultNumbering"] = btnNumberedList;
					_UIButtons["textobjectbar.DefaultBullet"] = btnBulletedList;
					_UIButtons["textobjectbar.DecrementIndent"] = null;
					_UIButtons["textobjectbar.IncrementIndent"] = null;
					_UIButtons["textobjectbar.FontColor"] = btnColor;
					_UIButtons["textobjectbar.BackColor"] = btnBackColor;
					_UIButtons["textobjectbar.BackgroudColor"] = null;
					_UIButtons["insertbar.InsertTable"] = null;
					_UIButtons["insertbar.InsertAnnotation"] = null;
					_UIButtons["insertbar.InsertDoc"] = btnInsertFileContent;
					_UIButtons["insertbar.InsertSymbol"] = btnInsertSpecifyCharacter;
					_UIButtons["insertbar.InsertFieldCtrl"] = null;
					_UIButtons["insertbar.InsertGraphic"] = btnInsertImage;
					_UIButtons["insertbar.InsertAVMedia"] = null;
					_UIButtons["insertbar.InsertMediFormula"] = btnInsertMedicalExpression;
					_UIButtons["insertbar.InsertObject"] = null;
				}
				return _UIButtons;
			}
		}

		private Dictionary<string, object> UIMenuItems
		{
			get
			{
				int num = 14;
				if (_UIMenuItems == null)
				{
					_UIMenuItems = new Dictionary<string, object>();
					_UIMenuItems["newDoc"] = menunewDoc;
					_UIMenuItems["Open"] = menuOpen;
					_UIMenuItems["Save"] = menuSave;
					_UIMenuItems["SaveAs"] = menuSaveAs;
					_UIMenuItems["PageDialog"] = menuPageDialog;
					_UIMenuItems["Print"] = menuPrint;
					_UIMenuItems["PrintPreview"] = menuPrintPreview;
					_UIMenuItems["ExportToPDF"] = menuExportToPDF;
					_UIMenuItems["SetDocumentProperties"] = menuSetDocumentProperties;
					_UIMenuItems["Quit"] = menuQuit;
					_UIMenuItems["Undo"] = menuUndo;
					_UIMenuItems["Redo"] = menuRedo;
					_UIMenuItems["Cut"] = menuCut;
					_UIMenuItems["Copy"] = menuCopy;
					_UIMenuItems["Paste"] = menuPaste;
					_UIMenuItems["PasteSpecial"] = menuPasteSpecial;
					_UIMenuItems["ResetAttributes"] = menuResetAttributes;
					_UIMenuItems["SelectAll"] = menuSelectAll;
					_UIMenuItems["SearchDialog"] = menuSearchDialog;
					_UIMenuItems["AvailableToolbars"] = menuAvailableToolbars;
					_UIMenuItems["StatusBarVisible"] = menuStatusBarVisible;
					_UIMenuItems["ControlCodes"] = menuControlCodes;
					_UIMenuItems["InsertPageHeader"] = menuInsertPageHeader;
					_UIMenuItems["InsertPageFooter"] = menuInsertPageFooter;
					_UIMenuItems["Zoom"] = menuZoom;
					_UIMenuItems["InsertBreak"] = menuInsertBreak;
					_UIMenuItems["FieldMenu"] = menuFieldMenu;
					_UIMenuItems["InsertSymbol"] = menuInsertSymbol;
					_UIMenuItems["InsertAnnotation"] = menuInsertAnnotation;
					_UIMenuItems["GraphicMenu"] = menuGraphicMenu;
					_UIMenuItems["InsertDoc"] = menuInsertDoc;
					_UIMenuItems["InsertMediFormula"] = menuInsertMediFormula;
					_UIMenuItems["FontDialog"] = menuFontDialog;
					_UIMenuItems["ParagraphDialog"] = menuParagraphDialog;
					_UIMenuItems["BulletsAndNumberingDialog"] = menuBulletsAndNumberingDialog;
					_UIMenuItems["TableInsertMenu"] = menuTableInsertMenu;
					_UIMenuItems["TableDeleteMenu"] = menuTableDeleteMenu;
					_UIMenuItems["TableSelectMenu"] = menuTableSelectMenu;
					_UIMenuItems["MergeCells"] = menuMergeCells;
					_UIMenuItems["SplitCell"] = menuSplitCell;
					_UIMenuItems["Protect"] = menuProtect;
					_UIMenuItems["UnSetCellsReadOnly"] = menuUnSetCellsReadOnly;
					_UIMenuItems["HeadingRowsRepeat"] = menuHeadingRowsRepeat;
					_UIMenuItems["TableBoundaries"] = menuTableBoundaries;
					_UIMenuItems["TableDialog"] = menuTableDialog;
					_UIMenuItems["About"] = menuAbout;
					_UIMenuItems["PickList"] = menuPickList;
					_UIMenuItems["EditMenu"] = menuEditMenu;
					_UIMenuItems["ViewMenu"] = menuViewMenu;
					_UIMenuItems["InsertMenu"] = menuInsertMenu;
					_UIMenuItems["FormatMenu"] = menuFormatMenu;
					_UIMenuItems["TableMenu"] = menuTableMenu;
					_UIMenuItems["HelpMenu"] = menuHelpMenu;
				}
				return _UIMenuItems;
			}
		}

		public event ODTDecryptBinaryEventHandler EventODTDecryptBinary = null;

		public event ODTDecryptBase64StringEventHandler EventODTDecryptBase64String = null;

		static AxNsoControlBase()
		{
			InnerDebugMode = false;
			_LogFileName = null;
			_LogFileWriter = null;
			_LastLogTime = DateTime.MinValue;
			_NsoDateTimeFormats = null;
			_DefaultNewControlHighlight = EnableState.Enabled;
			DCWriterPublish.Start();
			ODTSerializer contentSerializer_ = new ODTSerializer
			{
				Priority = -10
			};
			WriterAppHost.Default.ContentSerializers.AddSerializer(contentSerializer_);
			WriterAppHost.LicenseFileName = Path.Combine(Application.StartupPath, "都昌DCWriter编辑器授权文件.txt");
		}

		                                                                    /// <summary>
		                                                                    ///       初始化控件
		                                                                    ///       </summary>
		public AxNsoControlBase()
		{
			WriterControl.EnableVisualStyles();
			InitializeComponent();
			pnlMainContainer.Dock = DockStyle.Fill;
			pnlMainContainer.Visible = false;
			pnlPrintPreview.Dock = DockStyle.Fill;
			pnlPrintPreview.Visible = false;
			myPreviewControl.ShowPageSettingsButton = false;
			insertbar.Visible = false;
			newcontrols.Visible = false;
			ToolStripButton toolStripButton = new ToolStripButton("关闭预览");
			toolStripButton.Alignment = ToolStripItemAlignment.Right;
			toolStripButton.DisplayStyle = ToolStripItemDisplayStyle.Text;
			toolStripButton.AutoToolTip = false;
			toolStripButton.Click += btnClosePreview_Click;
			ToolStripSeparator value = new ToolStripSeparator
			{
				Alignment = ToolStripItemAlignment.Right
			};
			myPreviewControl.MainToolStrip.Items.Insert(0, value);
			myPreviewControl.MainToolStrip.Items.Insert(0, toolStripButton);
			myPreviewControl.ShowPrinterSettingsBeforePrint = false;
			myEditControl.AllowDragContent = true;
			myEditControl.RuleVisible = true;
			pnlMainContainer.TopToolStripPanelVisible = false;
			base.BorderStyle = BorderStyle.FixedSingle;
			myEditControl.CommentContextMenuStrip = cmComment;
			myEditControl.DocumentOptions.ViewOptions.FieldBackColor = Color.Transparent;
			myEditControl.DocumentOptions.ViewOptions.ShowParagraphFlag = false;
			myEditControl.DocumentOptions.ViewOptions.FieldHoverBackColor = Color.CornflowerBlue;
			myEditControl.DocumentOptions.ViewOptions.FieldBackColor = Color.FromArgb(221, 232, 249);
			myEditControl.DocumentOptions.ViewOptions.FieldFocusedBackColor = Color.FromArgb(221, 232, 249);
			myEditControl.DocumentOptions.ViewOptions.BackgroundTextColor = Color.FromArgb(172, 183, 199);
			myEditControl.DocumentOptions.ViewOptions.FieldBorderColor = Color.FromArgb(99, 154, 231);
			myEditControl.DocumentOptions.ViewOptions.IgnoreFieldBorderWhenPrint = false;
			myEditControl.DocumentOptions.ViewOptions.HiddenFieldBorderWhenLostFocus = false;
			myEditControl.DocumentOptions.ViewOptions.IgnoreFieldBorderWhenPrint = true;
			myEditControl.DocumentOptions.ViewOptions.IgnoreFieldBorderWhenPrint = false;
			myEditControl.DocumentOptions.EditOptions.ValueValidateMode = DocumentValueValidateMode.LostFocus;
			myEditControl.DocumentOptions.BehaviorOptions.FillCommentToUserTrackList = true;
			myEditControl.DocumentOptions.BehaviorOptions.SimpleElementProperties = true;
			myEditControl.DocumentOptions.BehaviorOptions.EnableCalculateControl = false;
			myEditControl.DocumentOptions.ViewOptions.PreserveBackgroundTextWhenPrint = true;
			myEditControl.DocumentOptions.ViewOptions.PrintBackgroundText = false;
			myEditControl.DocumentOptions.ViewOptions.ShowPageBreak = true;
			myEditControl.DocumentOptions.BehaviorOptions.InsertDocumentWithCheckMRID = InsertDocumentWithCheckMRIDType.None;
			myEditControl.DocumentOptions.BehaviorOptions.PromptProtectedContent = PromptProtectedContentMode.Flash;
			myEditControl.DocumentOptions.BehaviorOptions.ExtendingPrintDialog = false;
			myEditControl.DocumentOptions.BehaviorOptions.AutoUpdateButtonVisible = false;
			myEditControl.DocumentOptions.BehaviorOptions.ValidateIDRepeatMode = DCValidateIDRepeatMode.AutoFix;
			myEditControl.DocumentOptions.BehaviorOptions.AppErrorHandleMode = AppErrorHandleModeConsts.Ignore;
			myEditControl.DocumentOptions.BehaviorOptions.ParagraphFlagFollowTableOrSection = true;
			myEditControl.DocumentOptions.BehaviorOptions.PageLineUnderPageBreak = true;
			myEditControl.MoveFocusHotKey = MoveFocusHotKeys.Tab;
			myEditControl.IsAdministrator = false;
			btnPreviewMode.Checked = !myEditControl.IsAdministrator;
			myEditControl.CommandControler.SetCommandUIVisible("ElementProperties", visible: false);
			cmDebug.Visible = false;
			mySplitContainer.Panel1Collapsed = true;
			tbZoom.ValueChanged += tbZoom_ValueChanged;
			myEditControl.EventZoomChanged += myEditControl_EventZoomChanged;
			myEditControl.EventCollectProtectedElements += myEditControl_EventCollectProtectedElements;
			myEditControl.EventReadonlyChanged += myEditControl_EventReadonlyChanged;
			EnableCopyFromExternal(bEnable: true);
			LoadRegisterCode();
			myPreviewControl.AllowUserChangePrintArea = false;
			if (InnerDebugMode)
			{
				_InstanceIndex = GClass364.smethod_2(this, null);
				string text = GClass364.smethod_4(GetType(), _InstanceIndex);
				MessageBox.Show(text);
			}
			if (!base.DesignMode)
			{
				ClearSystemEventUserPreferenceChangedEventHandler();
			}
		}

		                                                                    /// <summary>
		                                                                    ///       处理键盘命令
		                                                                    ///       </summary>
		                                                                    /// <param name="msg">
		                                                                    /// </param>
		                                                                    /// <param name="keyData">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		protected override bool ProcessCmdKey(ref Message message_0, Keys keyData)
		{
			int num = 11;
			if (_EnableExecuteCommandInEditMode && keyData == Keys.F9)
			{
				WriterControl.ExecuteCommand("DeveloperTools", showUI: true, null);
				return true;
			}
			return base.ProcessCmdKey(ref message_0, keyData);
		}

		                                                                    /// <summary>
		                                                                    ///       特别为上海卫宁公司而初始化控件
		                                                                    ///       </summary>
		                                                                    /// <param name="registerCode">注册码</param>
		[ComVisible(true)]
		public void InitForWinning(string registerCode)
		{
			int num = 10;
			if (!string.IsNullOrEmpty(registerCode))
			{
				WriterControl.RegisterCode = registerCode;
			}
			WriterControl.DocumentOptions.BehaviorOptions.SimpleElementProperties = false;
			_EnableExecuteCommandInEditMode = false;
			WriterControl.SetCommandEnableHotKey("ExecuteCommand", enableHotKey: false);
			menuHelpMenu.Visible = false;
			WriterControl.DocumentOptions.EditOptions.GridLinePreviewText = "金仕达卫宁-中国智慧医疗健康信息化解决方案及服务的先行者。";
			CompanyType = Company.Winning;
		}

		private void myEditControl_EventReadonlyChanged(object sender, WriterEventArgs e)
		{
			if (myEditControl.Readonly)
			{
				myEditControl.ContextMenuStrip = cmSingleCopy;
			}
			else
			{
				myEditControl.ContextMenuStrip = null;
			}
		}

		                                                                    /// <summary>
		                                                                    ///       加载注册码进行注册
		                                                                    ///       </summary>
		                                                                    /// <returns>
		                                                                    /// </returns>
		private bool LoadRegisterCode()
		{
			int num = 16;
			try
			{
				string text = WriterAppHost.LicenseFileName;
				if (!File.Exists(text) && !File.Exists(text))
				{
					text = null;
					string[] files = Directory.GetFiles(Application.StartupPath, "*.dclic");
					int num2 = 0;
					if (0 < files.Length)
					{
						string text2 = files[num2];
						text = text2;
					}
					if (text == null)
					{
						return false;
					}
				}
				using (StreamReader streamReader = new StreamReader(text, Encoding.Default, detectEncodingFromByteOrderMarks: true))
				{
					string text3 = streamReader.ReadToEnd();
					if (text3 != null)
					{
						text3 = text3.Trim();
						myEditControl.RegisterCode = text3;
						return true;
					}
				}
				return false;
			}
			catch (Exception ex)
			{
				MessageBox.Show(ex.Message);
			}
			return false;
		}

		private void myEditControl_EventCollectProtectedElements(object sender, CollectProtectedElementsEventArgs e)
		{
			foreach (XTextElement rootElement in e.RootElements)
			{
				if (_ListForSetTableDeleteProtected.Contains(rootElement))
				{
					ContentProtectedInfo item = new ContentProtectedInfo(rootElement, _TextForSetTableCellErrorMsgWhenProtected, ContentProtectedReason.None);
					e.Infos.Add(item);
				}
				else if ((rootElement is XTextTableRowElement || rootElement is XTextTableColumnElement) && _ListForSetTableStyleProtected.Contains(rootElement.Parent))
				{
					ContentProtectedInfo item = new ContentProtectedInfo(rootElement, _TextForSetTableCellErrorMsgWhenProtected, ContentProtectedReason.None);
					e.Infos.Add(item);
				}
			}
		}

		private void btnClosePreview_Click(object sender, EventArgs e)
		{
			CancelPrintPreview();
		}

		private void tbZoom_ValueChanged(object sender, EventArgs e)
		{
			int num = 12;
			if (!_HandlingEvent)
			{
				try
				{
					_HandlingEvent = true;
					float num2 = (float)tbZoom.Value / (float)tbZoom.Maximum;
					if ((double)num2 > 0.5)
					{
						myEditControl.ExecuteCommand("Zoom", showUI: false, 1.0 + ((double)num2 - 0.5) / 0.5 * (double)(myEditControl.DocumentOptions.BehaviorOptions.MaxZoomRate - 1f));
					}
					else
					{
						myEditControl.ExecuteCommand("Zoom", showUI: false, (double)myEditControl.DocumentOptions.BehaviorOptions.MinZoomRate + (double)(1f - myEditControl.DocumentOptions.BehaviorOptions.MinZoomRate) * ((double)num2 / 0.5));
					}
				}
				finally
				{
					_HandlingEvent = false;
				}
			}
		}

		private void myEditControl_EventZoomChanged(object sender, WriterEventArgs e)
		{
			float xZoomRate = myEditControl.XZoomRate;
			lblZoom.Text = Convert.ToInt32(xZoomRate * 100f) + "%";
			bool handlingEvent = _HandlingEvent;
			try
			{
				_HandlingEvent = true;
				tbZoom.Enabled = !myEditControl.AutoZoom;
				if (tbZoom.Enabled)
				{
					if (xZoomRate > 1f)
					{
						tbZoom.Value = (int)((float)(tbZoom.Maximum / 2) + (float)(tbZoom.Maximum / 2) * (xZoomRate - 1f) / (myEditControl.DocumentOptions.BehaviorOptions.MaxZoomRate - 1f));
					}
					else
					{
						tbZoom.Value = (int)((double)(xZoomRate - myEditControl.DocumentOptions.BehaviorOptions.MinZoomRate) / (1.0 - (double)myEditControl.DocumentOptions.BehaviorOptions.MinZoomRate) * (double)(tbZoom.Maximum / 2));
					}
				}
			}
			finally
			{
				_HandlingEvent = handlingEvent;
			}
		}

		private void LogFileWriteLine(string string_0)
		{
			int num = 0;
			if (CanLogFile)
			{
				DateTime now = DateTime.Now;
				if (now.ToString("yyyy-MM-dd HH:mm") != _LastLogTime.ToString("yyyy-MM-dd HH:mm"))
				{
					LogFileWriteRaw("======== " + now.ToString("yyyy-MM-dd HH:mm:ss") + " ============" + Environment.NewLine);
					_LastLogTime = now;
				}
				string str = now.ToString("mm:ss.fff");
				LogFileWriteRaw(str + ":" + string_0 + Environment.NewLine);
			}
		}

		private void LogFileWriteRaw(string string_0)
		{
			if (!string.IsNullOrEmpty(string_0) && !string.IsNullOrEmpty(_LogFileName))
			{
				try
				{
					if (_LogFileWriter == null)
					{
						_LogFileWriter = new StreamWriter(_LogFileName, append: true, Encoding.Default);
					}
					_LogFileWriter.Write(string_0);
					_LogFileWriter.Flush();
				}
				catch (Exception)
				{
					CloseLogFileWriter();
				}
			}
		}

		private void CloseLogFileWriter()
		{
			if (_LogFileWriter != null)
			{
				StreamWriter logFileWriter = _LogFileWriter;
				_LogFileWriter = null;
				try
				{
					logFileWriter.Close();
				}
				catch (Exception)
				{
				}
			}
		}

		                                                                    /// <summary>
		                                                                    ///       设置日志文件名 
		                                                                    ///       </summary>
		                                                                    /// <param name="fileName">日志文件名，如果为空表示禁止输出日志文件</param>
		public void DCSetLogFile(string fileName)
		{
			_LogFileName = fileName;
			CloseLogFileWriter();
		}

		                                                                    /// <summary>
		                                                                    ///       关闭输出日志文件的功能
		                                                                    ///       </summary>
		public void DCCloseLogFile()
		{
			_LogFileName = null;
		}

		                                                                    /// <summary>
		                                                                    ///       开始记录一个成员方法的执行
		                                                                    ///       </summary>
		                                                                    /// <param name="functionName">函数名</param>
		                                                                    /// <param name="msg">消息</param>
		public void BeginLogFunction(string functionName, string string_0)
		{
			int num = 17;
			if (CanLogFile)
			{
				string string_ = new string(' ', _LogFunctionLevel * 2) + "函数:" + functionName + " " + string_0;
				LogFileWriteLine(string_);
			}
		}

		                                                                    /// <summary>
		                                                                    ///       开始记录一个成员方法的执行
		                                                                    ///       </summary>
		                                                                    /// <param name="functionName">函数名</param>
		public void BeginLogFunction(string functionName)
		{
			int num = 18;
			if (CanLogFile)
			{
				string string_ = new string(' ', _LogFunctionLevel * 2) + "函数:" + functionName;
				LogFileWriteLine(string_);
			}
		}

		public void LogMessage(string string_0)
		{
			if (CanLogFile)
			{
				LogFileWriteLine(new string(' ', _LogFunctionLevel * 2) + string_0);
			}
		}

		                                                                    /// <summary>
		                                                                    ///       记录方法参数
		                                                                    ///       </summary>
		                                                                    /// <param name="name">参数名</param>
		                                                                    /// <param name="v">参数值</param>
		public void LogFunctionParameter(string name, object object_0)
		{
			int num = 15;
			if (CanLogFile)
			{
				string str = new string(' ', _LogFunctionLevel * 2) + name + "=";
				str += GClass369.smethod_4(object_0);
				LogFileWriteLine(str);
			}
		}

		                                                                    /// <summary>
		                                                                    ///       结束记录一个成员方法的支持
		                                                                    ///       </summary>
		                                                                    /// <param name="result">执行结果</param>
		public void EndLogFunction(object result)
		{
			int num = 9;
			if (CanLogFile && result != null)
			{
				LogFileWriteLine(new string(' ', _LogFunctionLevel * 2) + "结果:" + result);
			}
		}

		                                                                    /// <summary>
		                                                                    ///       预先加载系统中的功能模块，提高第一次加载文件的速度
		                                                                    ///       </summary>
		public void PreloadSystem()
		{
			WriterAppHost.PreloadSystem();
		}

		protected override void OnPaint(PaintEventArgs pevent)
		{
			int num = 2;
			try
			{
				using (StringFormat stringFormat = new StringFormat())
				{
					stringFormat.Alignment = StringAlignment.Center;
					stringFormat.LineAlignment = StringAlignment.Center;
					using (Font font = new Font(Font.Name, 12f, FontStyle.Bold))
					{
						string text = ControlTitleText;
						if (string.IsNullOrEmpty(text))
						{
							text = "南京都昌科技模拟器医疗版 " + base.ProductVersion + " 控件";
						}
						SizeF sizeF = pevent.Graphics.MeasureString(text, font, 10000, stringFormat);
						RectangleF rectangleF = new RectangleF(((float)base.ClientSize.Width - sizeF.Width) / 2f, ((float)base.ClientSize.Height - sizeF.Height) / 2f, sizeF.Width, sizeF.Height + 8f);
						if (pevent.ClipRectangle.IntersectsWith(Rectangle.Ceiling(rectangleF)))
						{
							pevent.Graphics.FillRectangle(Brushes.White, rectangleF);
							pevent.Graphics.DrawString(text, font, Brushes.Black, rectangleF, stringFormat);
						}
					}
				}
				base.OnPaint(pevent);
			}
			catch (Exception ex)
			{
				Console.WriteLine(ex.Message ?? "");
			}
		}

		                                                                    /// <summary>
		                                                                    ///       将厘米转换为文档长度
		                                                                    ///       </summary>
		                                                                    /// <param name="cm">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		private double CMToDocumentUnit(double double_0)
		{
			if (myEditControl == null)
			{
				return GraphicsUnitConvert.Convert(double_0 * 10.0, GraphicsUnit.Millimeter, GraphicsUnit.Document);
			}
			return GraphicsUnitConvert.Convert(double_0 * 10.0, GraphicsUnit.Millimeter, myEditControl.Document.DocumentGraphicsUnit);
		}

		private XTextElement GetElementById(string string_0)
		{
			if (string.IsNullOrEmpty(string_0))
			{
				return null;
			}
			if (myEditControl == null)
			{
				return null;
			}
			return myEditControl.GetElementById(string_0);
		}

		[ComVisible(true)]
		public object ExecuteCommand(string commandName, bool showUI, object parameter)
		{
			return myEditControl.ExecuteCommand(commandName, showUI, parameter);
		}

		                                                                    /// <summary>
		                                                                    ///       控件加载事件处理
		                                                                    ///       </summary>
		                                                                    /// <param name="e">参数</param>
		protected override void OnLoad(EventArgs eventArgs_0)
		{
			int num = 10;
			DocumentViewOptions.ShowLocalizationDisplayName = false;
			GClass360.smethod_1(bool_1: false);
			new ExtensionStart().Start();
			base.OnLoad(eventArgs_0);
			if (!base.DesignMode)
			{
				myEditControl.ContextMenuManager.Enabled = ShowContextMenu;
				myEditControl.AllowDrop = true;
				myEditControl.Font = new Font("宋体", 10.5f);
				myEditControl.RaiseDocumentFoucsEventWhenControlFocusEvent = false;
				myEditControl.AppHost.Services.AddService(typeof(IErrorReporter), new MyErrorReporter());
				myEditControl.FilterValue += MyWriterControl_FilterValue;
				StartNsoEvents();
				myEditControl.ContextMenuManager.TableCellMenu = cmTableCell;
				myEditControl.ContextMenuManager.InputFieldMenu = cmEdit;
				myEditControl.ContextMenuManager.ImageMenu = cmImage;
				myEditControl.ContextMenuManager.DefaultMenu = cmEdit;
				myEditControl.CommandControler = myCommandControler;
				myCommandControler.Start();
				_ = WriterAppHost.Default;
				_IsSetPrinterRightLeft = false;
				if (!pnlMainContainer.IsHandleCreated)
				{
					pnlMainContainer.CreateControl();
				}
				if (!myEditControl.IsHandleCreated)
				{
					myEditControl.CreateControl();
				}
				_FocusTimer = new Timer();
				_FocusTimer.Interval = 100;
				_FocusTimer.Tick += _FocusTimer_Tick;
				ClearSystemEventUserPreferenceChangedEventHandler();
			}
		}

		private static bool ClearSystemEventUserPreferenceChangedEventHandler()
		{
			int num = 1;
			try
			{
				IDictionary dictionary = InnerGetFieldValue(typeof(SystemEvents), null, "_handlers") as IDictionary;
				if (dictionary != null)
				{
					object obj = InnerGetFieldValue(typeof(SystemEvents), null, "OnUserPreferenceChangedEvent");
					if (obj != null && dictionary.Contains(obj))
					{
						IList list = dictionary[obj] as IList;
						if (list != null)
						{
							for (int num2 = list.Count - 1; num2 >= 0; num2--)
							{
								object obj2 = InnerGetFieldValue(null, list[num2], "_delegate");
								if (obj2 is Delegate)
								{
									Delegate @delegate = (Delegate)obj2;
									if ((object)@delegate != null && (@delegate.Target is ToolStripItem || @delegate.Target is ToolStrip))
									{
										list.RemoveAt(num2);
									}
								}
							}
							return true;
						}
					}
				}
			}
			catch (Exception ex)
			{
				Console.WriteLine("ClearSystemEventUserPreferenceChangedEventHandler:" + ex.Message);
			}
			return false;
		}

		private static object InnerGetFieldValue(Type type_0, object instance, string fieldName)
		{
			if (instance != null)
			{
				type_0 = instance.GetType();
			}
			if (type_0 == null)
			{
				return null;
			}
			FieldInfo field = type_0.GetField(fieldName, BindingFlags.IgnoreCase | BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic);
			if (field != null)
			{
				if (field.IsStatic)
				{
					return field.GetValue(null);
				}
				return field.GetValue(instance);
			}
			return null;
		}

		private void _FocusTimer_Tick(object sender, EventArgs e)
		{
			if (tbZoom.IsHandleCreated && tbZoom.Focused && myEditControl.IsHandleCreated)
			{
				myEditControl.Focus();
			}
		}

		protected override void OnResize(EventArgs eventArgs_0)
		{
			base.OnResize(eventArgs_0);
			if (!pnlMainContainer.Visible && !pnlPrintPreview.Visible)
			{
				Invalidate();
			}
		}

		                                                                    /// <summary>
		                                                                    ///       处理退格键
		                                                                    ///       </summary>
		                                                                    /// <remarks>
		                                                                    ///       当控件承载在IE浏览器中运行时，默认会按下Backspace键时浏览器会跳到上一个历史页面。
		                                                                    ///       本控件提供一个HandleBackspace方法，而在浏览器中编写javascript函数响应浏览器的
		                                                                    ///       onkeydown事件。若按键为backspace键，则javascript调用HandleBackspace方法。
		                                                                    ///       若该方法返回true，表示编辑器处理了backspace事件。浏览器无需继续执行该方法。
		                                                                    ///       若返回false，表示编辑器没有处理backspace事件，浏览器可按默认方式进行处理。
		                                                                    ///       </remarks>
		                                                                    /// <returns>控件是否处理了backspace按键事件</returns>
		public bool HandleBackspace()
		{
			return myEditControl.HandleBackspace();
		}

		                                                                    /// <summary>
		                                                                    ///       响应选择区域发生改变事件，根据当前元素设置文本框的快捷菜单
		                                                                    ///       </summary>
		                                                                    /// <param name="sender">
		                                                                    /// </param>
		                                                                    /// <param name="e">
		                                                                    /// </param>
		private void myEditControl_SelectionChanged(object sender, WriterEventArgs e)
		{
			int num = 2;
			lblPosition.Text = myEditControl.PositionInfoText;
			if (myEditControl.IsCommandChecked("InsertMode"))
			{
				lblInsState.Text = "插入";
			}
			else
			{
				lblInsState.Text = "改写";
			}
		}

		                                                                    /// <summary>
		                                                                    ///       刷新功能控件状态
		                                                                    ///       </summary>
		public void RefreshFunctionControl()
		{
		}

		private void myEditControl_DocumentNavigateContentChanged(object sender, EventArgs e)
		{
			RefreshFunctionControl();
		}

		private void btnFieldGroup_Click(object sender, EventArgs e)
		{
			int num = 0;
			XTextInputFieldElement xTextInputFieldElement = (XTextInputFieldElement)myEditControl.ExecuteCommand("ConvertContentToField", showUI: false, null);
			if (xTextInputFieldElement != null)
			{
				xTextInputFieldElement.ID = Guid.NewGuid().ToString();
				xTextInputFieldElement.Attributes = new XAttributeList();
				xTextInputFieldElement.EnableHighlight = EnableState.Disabled;
				xTextInputFieldElement.Attributes.SetValue("DataSection", "1");
				xTextInputFieldElement.Attributes.SetValue("ClickID", Guid.NewGuid().ToString());
				xTextInputFieldElement.AcceptChildElementTypes2 = ElementType.All;
			}
			else
			{
				MessageBox.Show("无法生成数据组!");
			}
		}

		private void myEditControl_Load(object sender, EventArgs e)
		{
			myEditControl.AllowDragContent = true;
		}

		private void AxNsoControlBase_Load(object sender, EventArgs e)
		{
		}

		private void mPrintPreview_Click(object sender, EventArgs e)
		{
			PrintPreview(myEditControl.DocumentOptions.ViewOptions.ShowLineNumber);
		}

		private void tvwNavigate_AfterSelect(object sender, TreeViewEventArgs e)
		{
			if (e.Node.Tag is StructNavigationInfo)
			{
				StructNavigationInfo info = (StructNavigationInfo)e.Node.Tag;
				InnerNavigateTo(info, selectSection: true);
				myEditControl.DelayFocus(100);
			}
		}

		private void menuStatusBarVisible_Click(object sender, EventArgs e)
		{
			pnlStatus.Visible = menuStatusBarVisible.Checked;
		}

		private void menuAvailableToolbars_Click(object sender, EventArgs e)
		{
			standardbar.Visible = menuAvailableToolbars.Checked;
		}

		private void menuInsertPageHeader_Click(object sender, EventArgs e)
		{
			InsertHeader();
		}

		private void menuInsertPageFooter_Click(object sender, EventArgs e)
		{
			InsertFooter();
		}

		private XTextElementList GetHandledCells()
		{
			XTextElementList xTextElementList = new XTextElementList();
			if (myEditControl.Selection.Length == 0)
			{
				if (myEditControl.CurrentTableCell != null)
				{
					xTextElementList.Add(myEditControl.CurrentTableCell);
				}
			}
			else
			{
				if (myEditControl.Selection.Cells != null)
				{
					foreach (XTextTableCellElement cell in myEditControl.Selection.Cells)
					{
						xTextElementList.Add(cell);
					}
				}
				foreach (XTextElement item in myEditControl.Selection)
				{
					XTextTableCellElement element = item.OwnerCell;
					if (element != null && !xTextElementList.Contains(element))
					{
						xTextElementList.Add(element);
					}
				}
			}
			return xTextElementList;
		}

		private void menuProtect_Click(object sender, EventArgs e)
		{
			XTextElementList handledCells = GetHandledCells();
			if (handledCells != null)
			{
				foreach (XTextTableCellElement item in handledCells)
				{
					item.ContentReadonly = ContentReadonlyState.True;
				}
			}
		}

		private void menuUnSetCellsReadOnly_Click(object sender, EventArgs e)
		{
			XTextElementList handledCells = GetHandledCells();
			if (handledCells != null)
			{
				foreach (XTextTableCellElement item in handledCells)
				{
					item.ContentReadonly = ContentReadonlyState.Inherit;
				}
			}
		}

		private void menunewDoc_Click(object sender, EventArgs e)
		{
			CreateNew("swriter");
		}

		private void menuOpen_Click(object sender, EventArgs e)
		{
			int num = 2;
			using (OpenFileDialog openFileDialog = new OpenFileDialog())
			{
				openFileDialog.CheckFileExists = true;
				openFileDialog.Filter = "*.xml|*.xml";
				if (openFileDialog.ShowDialog(this) == DialogResult.OK)
				{
					OpenDocument(openFileDialog.FileName, 2);
				}
			}
		}

		private void menuTableBoundaries_Click(object sender, EventArgs e)
		{
			SetTableGridlinesVisible(menuTableBoundaries.Checked);
		}

		private void menuTableSelectMenu_Click(object sender, EventArgs e)
		{
		}

		private void menuSelectTable_Click(object sender, EventArgs e)
		{
			if (myEditControl.CurrentTable != null)
			{
				myEditControl.CurrentTable.Select();
			}
		}

		private void menuSelectRow_Click(object sender, EventArgs e)
		{
			if (myEditControl.CurrentTableRow != null)
			{
				myEditControl.CurrentTableRow.Select();
			}
		}

		private void menuSelectCell_Click(object sender, EventArgs e)
		{
			if (myEditControl.CurrentTableCell != null)
			{
				myEditControl.CurrentTableCell.Select();
			}
		}

		private void menuZoomAuto_Click(object sender, EventArgs e)
		{
			myEditControl.ExecuteCommand("Zoom", showUI: false, "auto");
		}

		private void menuQuit_Click(object sender, EventArgs e)
		{
			Close();
		}

		private void menuControlCodes_Click(object sender, EventArgs e)
		{
			SetFormatTagVisible(menuControlCodes.Checked);
		}

		private void menuExportToPDF_Click(object sender, EventArgs e)
		{
			int num = 19;
			using (SaveFileDialog saveFileDialog = new SaveFileDialog())
			{
				saveFileDialog.CheckPathExists = true;
				saveFileDialog.OverwritePrompt = true;
				saveFileDialog.Filter = "PDF文件(*.pdf)|*.pdf";
				if (saveFileDialog.ShowDialog(this) == DialogResult.OK)
				{
					myEditControl.SaveDocument(saveFileDialog.FileName, "pdf");
				}
			}
		}

		private void cmEdit_Opening(object sender, CancelEventArgs e)
		{
		}

		private void cmCopyWithFormat_Click(object sender, EventArgs e)
		{
			int num = 3;
			WriterDataFormats acceptDataFormats = myEditControl.AcceptDataFormats;
			myEditControl.AcceptDataFormats = WriterDataFormats.All;
			try
			{
				myEditControl.ExecuteCommand("Paste", showUI: false, null);
			}
			finally
			{
				myEditControl.AcceptDataFormats = acceptDataFormats;
			}
		}

		private void menuInsertDoc_Click(object sender, EventArgs e)
		{
			int num = 9;
			using (OpenFileDialog openFileDialog = new OpenFileDialog())
			{
				openFileDialog.Filter = "*.xml;*.odt|*.xml;*.odt";
				openFileDialog.CheckFileExists = true;
				if (openFileDialog.ShowDialog(this) == DialogResult.OK)
				{
					XTextDocument xTextDocument = new XTextDocument();
					byte[] byte_ = FileHelper.LoadBinaryFile(openFileDialog.FileName, throwException: true);
					if (InnerOpenDocumentBinary(byte_, xTextDocument))
					{
						myEditControl.ExecuteCommand("InsertFileContent", showUI: false, xTextDocument);
					}
				}
			}
		}

		private void btnNsoInsertTextBox_Click(object sender, EventArgs e)
		{
			InsertNewControlAtCurrentCursor("", "", 3);
		}

		private void btnNsoInsertNumberBox_Click(object sender, EventArgs e)
		{
			InsertNewControlAtCurrentCursor("", "", 5);
		}

		private void btnNsoInsertCheckbox_Click(object sender, EventArgs e)
		{
			InsertNewControlAtCurrentCursor("", "", 4);
		}

		private void btnNsoInsertList_Click(object sender, EventArgs e)
		{
			InsertNewControlAtCurrentCursor("", "", 2);
		}

		private void btnNsoInsertRadio_Click(object sender, EventArgs e)
		{
			InsertNewControlAtCurrentCursor("", "", 9);
		}

		private void btnNsoInsertCombobox_Click(object sender, EventArgs e)
		{
			InsertNewControlAtCurrentCursor("", "", 1);
		}

		private void btnNsoInsertMulListBox_Click(object sender, EventArgs e)
		{
			InsertNewControlAtCurrentCursor("", "", 6);
		}

		private void btnNsoInsertMulCombobox_Click(object sender, EventArgs e)
		{
			InsertNewControlAtCurrentCursor("", "", 7);
		}

		private void btnNsoInsertDateTimeBox_Click(object sender, EventArgs e)
		{
			InsertNewControlAtCurrentCursor("", "", 8);
		}

		private void btnPreviewMode_Click(object sender, EventArgs e)
		{
			myEditControl.IsAdministrator = !btnPreviewMode.Checked;
			myEditControl.DocumentOptions.BehaviorOptions.EnableExpression = btnPreviewMode.Checked;
			myEditControl.DocumentOptions.BehaviorOptions.DesignMode = !btnPreviewMode.Checked;
			myEditControl.RefreshDocument();
		}

		private void AlertNotSupportedMember(string memberName)
		{
			int num = 16;
			if (IsAlertNotSupportedMember)
			{
				MessageBox.Show(this, "AlertNotSupportedMember.不支持成员 " + memberName, "系统提示", MessageBoxButtons.OK, MessageBoxIcon.Hand);
			}
		}

		private void mFieldHighlight_Click(object sender, EventArgs e)
		{
			EnableState enableState = mFieldHighlight.Checked ? EnableState.Enabled : EnableState.Disabled;
			bool flag = false;
			foreach (XTextInputFieldElement item in myEditControl.Document.GetElementsByType(typeof(XTextInputFieldElement)))
			{
				if (IsNewControl(item) && item.EnableHighlight != enableState)
				{
					item.EnableHighlight = enableState;
					item.InvalidateHighlightInfo();
					flag = true;
				}
			}
			if (flag)
			{
				myEditControl.Modified = true;
				myEditControl.Invalidate();
			}
		}

		private void btnOpen_Click(object sender, EventArgs e)
		{
			int num = 7;
			using (OpenFileDialog openFileDialog = new OpenFileDialog())
			{
				openFileDialog.Filter = "*.odt;*.xml|*.odt;*.xml";
				openFileDialog.CheckFileExists = true;
				openFileDialog.ShowReadOnly = false;
				openFileDialog.FileName = myEditControl.Document.FileName;
				if (openFileDialog.ShowDialog(this) == DialogResult.OK)
				{
					OpenDocument(openFileDialog.FileName, 1);
				}
			}
		}

		private void mHighlight_Click(object sender, EventArgs e)
		{
			XTextElementList elementsByType = Document.GetElementsByType(typeof(XTextInputFieldElement));
			if (elementsByType != null && elementsByType.Count > 0)
			{
				foreach (XTextInputFieldElement item in elementsByType)
				{
					if (IsNewControl(item))
					{
						item.EnableHighlight = EnableState.Enabled;
					}
				}
			}
			Document.Options.ViewOptions.FieldHoverBackColor = Color.CornflowerBlue;
		}

		private void tbZoom_Enter(object sender, EventArgs e)
		{
			myEditControl.Focus();
		}

		[ComVisible(true)]
		public void RemoveAllStructsListeners()
		{
			BeginLogFunction("RemoveAllStructsListeners", null);
			_StructListeners.Clear();
			EndLogFunction(null);
		}

		                                                                    /// <summary>
		                                                                    ///       为某个结构增加回调事件
		                                                                    ///       </summary>
		public void AddListenerForOneStruct(string sStructName, int lListenType, INsoCallback myCallback)
		{
			BeginLogFunction("AddListenerForOneStruct", "sStructName=" + sStructName + "  lListenType=" + lListenType + "  myCallback=" + myCallback);
			StructListenerInfo structListenerInfo = new StructListenerInfo();
			structListenerInfo.StructName = sStructName;
			structListenerInfo.ListenType = lListenType;
			structListenerInfo.Callback = myCallback;
			_StructListeners.Add(structListenerInfo);
			EndLogFunction(null);
		}

		private INsoCallback[] GetCallbacks(string structName, CallbackEvent listenType)
		{
			List<INsoCallback> list = new List<INsoCallback>();
			foreach (StructListenerInfo structListener in _StructListeners)
			{
				if (structListener.StructName == structName && structListener.Callback != null && (structListener.ListenType == 0 || (structListener.ListenType & (int)listenType) == (int)listenType))
				{
					list.Add(structListener.Callback);
				}
			}
			return list.ToArray();
		}

		[ComVisible(true)]
		public virtual void RemoveSelectionChangedListener()
		{
			BeginLogFunction("RemoveSelectionChangedListener", null);
			EnableRaiseOnNsoSectionChanged = false;
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public virtual void RemoveDragDropListner()
		{
			BeginLogFunction("RemoveDragDropListner", null);
			EnableRaiseOnNsoDragAndDropCompleted = false;
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public virtual void AddSelectionChangedListener()
		{
			BeginLogFunction("AddSelectionChangedListener", null);
			AlertNotSupportedMember("AddSelectionChangedListener");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual void AddDragDropListner()
		{
			BeginLogFunction("AddDragDropListner", null);
			AlertNotSupportedMember("AddDragDropListner");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       AddKeyListener（Long bReserve）
		                                                                    ///       功能描述：
		                                                                    ///       开启键盘监听器。
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       bReserve	Long	保留字段,目前无效	 必需	
		                                                                    ///       返回值：
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. AddKeyListener (0)
		                                                                    ///       实现说明：
		                                                                    ///       无
		                                                                    ///       Date:10-10 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="bReserve">
		                                                                    /// </param>
		[ComVisible(true)]
		public void AddKeyListener(int bReserve)
		{
			BeginLogFunction("AddKeyListener", "bReserve=" + bReserve);
			EnableRaiseOnNsoKeyPressedEvent = true;
			EnableRaiseOnNsoKeyPressedEvent2 = true;
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public void SetGlobalDocumentListener(bool bNeedSection, bool bNeedNewControl, bool bNeedCustomToolBar, bool bNeedDelAndIns)
		{
			BeginLogFunction("SetGlobalDocumentListener", "bNeedSection=" + bNeedSection + "  bNeedNewControl" + bNeedNewControl + "  bNeedCustomToolBar" + bNeedCustomToolBar + "  bNeedDelAndIns" + bNeedDelAndIns);
			_NeedSection = bNeedSection;
			EnableRaiseOnNsoSectionChanged = bNeedSection;
			EnableRaiseOnNsoSectionClick = bNeedSection;
			EnableRaiseOnNsoSectionCursorEnter = bNeedSection;
			EnableRaiseOnNsoSectionCursorLeft = bNeedSection;
			EnableRaiseOnNsoSectionDBClick = bNeedSection;
			EnableRaiseOnNsoSectionGainFocus = bNeedSection;
			EnableRaiseOnNsoSectionInsertOrDelEvent = bNeedSection;
			EnableRaiseOnNsoSectionLostFocus = bNeedSection;
			_NeedNewControl = bNeedNewControl;
			EnableRaiseOnNsoNewControlBeforeDropDown = bNeedNewControl;
			EnableRaiseOnNsoNewControlChanged = bNeedNewControl;
			EnableRaiseOnNsoNewControlCheckedChanged = bNeedNewControl;
			EnableRaiseOnNsoNewControlClick = bNeedNewControl;
			EnableRaiseOnNsoNewControlCursorEnter = bNeedNewControl;
			EnableRaiseOnNsoNewControlCursorLeft = bNeedNewControl;
			EnableRaiseOnNsoNewControlDBClick = bNeedNewControl;
			EnableRaiseOnNsoNewControlDropDown = bNeedNewControl;
			EnableRaiseOnNsoNewControlGainFocus = bNeedNewControl;
			EnableRaiseOnNsoNewControlInsertOrDelEvent = bNeedNewControl;
			EnableRaiseOnNsoNewControlLostFocus = bNeedNewControl;
			EnableRaiseOnNsoRadioButtonCheckChanged = bNeedNewControl;
			_NeedCustomToolbar = bNeedCustomToolBar;
			EnableRaiseOnNsoToolbarAddinEvent = bNeedCustomToolBar;
			EnableRaiseOnNsoUserMenuItemEvent = bNeedCustomToolBar;
			EnableRaiseOnNsoUserToolbarEvent = bNeedCustomToolBar;
			_NeedDelAndIns = bNeedDelAndIns;
			EnableRaiseOnNsoSectionInsertOrDelEvent = bNeedDelAndIns;
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public void SetUserUIListener(bool bNeedUserToolbar, bool bNeedUserMenuItem, bool bReserved)
		{
		}

		[ComVisible(true)]
		public void AddMouseListener(int nType)
		{
			BeginLogFunction("AddMouseListener", "nType=" + nType);
			switch (nType)
			{
			case 0:
				myEditControl.ContextMenuManager.Enabled = ShowContextMenu;
				break;
			case 1:
				myEditControl.ContextMenuManager.Enabled = false;
				break;
			}
			EnableRaiseOnNsoImageClick = true;
			EnableRaiseOnNsoImageDBClick = true;
			EnableRaiseOnNsoNewControlClick = true;
			EnableRaiseOnNsoNewControlDBClick = true;
			EnableRaiseOnNsoOLEClick = true;
			EnableRaiseOnNsoRegionDBClick = true;
			EnableRaiseOnNsoSectionClick = true;
			EnableRaiseOnNsoSectionDBClick = true;
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public virtual bool MergeTableCellRange(string sTable, string sStartCell, string sEndCell)
		{
			int num = 18;
			BeginLogFunction("MergeTableCellRange", "sTable=" + sTable + "  sStartCell=" + sStartCell + "  sEndCell=" + sEndCell);
			XTextTableElement xTextTableElement = GetElementById(sTable) as XTextTableElement;
			if (xTextTableElement != null)
			{
				MegeCellCommandParameter megeCellCommandParameter = new MegeCellCommandParameter();
				megeCellCommandParameter.Cell = xTextTableElement.GetCellByCellIndex(sStartCell, throwException: false);
				if (megeCellCommandParameter.Cell == null)
				{
					return false;
				}
				GClass344 gClass = new GClass344(sStartCell);
				GClass344 gClass2 = new GClass344(sEndCell);
				megeCellCommandParameter.NewRowSpan = gClass2.method_2() - gClass.method_2() + 1;
				megeCellCommandParameter.NewColSpan = gClass2.method_6() - gClass.method_6() + 1;
				XTextTableCellElement xTextTableCellElement = (XTextTableCellElement)myEditControl.ExecuteCommand("Table_MergeCell", showUI: false, megeCellCommandParameter);
				if (xTextTableCellElement != null)
				{
					EndLogFunction("true");
					return true;
				}
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool SplitTableCellRange(string sTable, string sCell, int columns, int rows)
		{
			AlertNotSupportedMember("SplitTableCellRange");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool SelectOneTable(string sName)
		{
			AlertNotSupportedMember("SelectOneTable");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool PutCellContentByArray(string strTableName, object lstCell, object lstContent)
		{
			AlertNotSupportedMember("PutCellContentByArray");
			throw new NotSupportedException();
		}

		                                                                    /// <summary>
		                                                                    ///       设置表格的标题行是否重复，重复多少行
		                                                                    ///       </summary>
		                                                                    /// <param name="sTableName">表格名</param>
		                                                                    /// <param name="bNeed">是否需要重复,True 是,False 否</param>
		                                                                    /// <param name="nRowLine">重复行数,只有bNeed为True才有效</param>
		                                                                    /// <returns>True – 成功  False – 失败</returns>
		                                                                    ///       实现说明：
		                                                                    ///       当bNeed为True的时候,nRowLine不能大于表格的最大行数
		                                                                    ///       比如一个表格一共只有3行，你设置了重复4行标题行，那其实就是3。
		[ComVisible(true)]
		public virtual bool RepeatTableHeadLine(string sTableName, bool bNeed, int nRowLine)
		{
			int num = 17;
			BeginLogFunction("RepeatTableHeadLine", "sTableName=" + sTableName + "bNeed=" + bNeed + "nRowLine=" + nRowLine);
			XTextTableElement xTextTableElement = myEditControl.Document.GetElementById(sTableName) as XTextTableElement;
			if (bNeed)
			{
				int num2 = (nRowLine > xTextTableElement.RowsCount) ? xTextTableElement.RowsCount : nRowLine;
				for (int i = 0; i < num2; i++)
				{
					((XTextTableRowElement)xTextTableElement.Rows[i]).HeaderStyle = true;
				}
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool InsertTableWithoutHeader(string tableN, int int_0, int int_1)
		{
			int num = 16;
			BeginLogFunction("InsertTableWithoutHeader", "tableN=" + tableN + " col=" + int_0 + " row" + int_1);
			XTextTableElementProperties xTextTableElementProperties = new XTextTableElementProperties();
			xTextTableElementProperties.RowsCount = int_1;
			xTextTableElementProperties.ColumnsCount = int_0;
			xTextTableElementProperties.ID = tableN;
			XTextTableElement xTextTableElement = (XTextTableElement)myEditControl.ExecuteCommand("Table_InsertTable", showUI: false, xTextTableElementProperties);
			if (xTextTableElement != null)
			{
				xTextTableElement.ID = tableN;
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		public virtual bool ExistCellByTable(string sTable, string sCell)
		{
			AlertNotSupportedMember("ExistCellByTable");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool EnableSpecialEnterAtLastTableCell(bool bEnable)
		{
			AlertNotSupportedMember("EnableSpecialEnterAtLastTableCell");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool EnableSpecialTabAtLastTableCell(bool bEnable)
		{
			AlertNotSupportedMember("EnableSpecialTabAtLastTableCell");
			throw new NotSupportedException();
		}

		                                                                    /// <summary>
		                                                                    ///        .192	GetTableNameByCurrentCursor
		                                                                    ///       函数说明：
		                                                                    ///           BSTR GetTableNameByCurrentCursor()
		                                                                    ///       功能描述：
		                                                                    ///            返回当前光标位置的表格名
		                                                                    ///         参数：
		                                                                    ///              无
		                                                                    ///       返回值：表格名称
		                                                                    ///       代码示例：
		                                                                    ///           AxNsoControl1.GetTableNameByCurrentCursor()
		                                                                    ///       实现说明： 无
		                                                                    ///       Date:10-8 Jy
		                                                                    ///        </summary>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public string GetTableNameByCurrentCursor()
		{
			BeginLogFunction("GetTableNameByCurrentCursor", null);
			XTextTableElement xTextTableElement = myEditControl.Document.GetCurrentElement(typeof(XTextTableElement)) as XTextTableElement;
			if (xTextTableElement != null && !string.IsNullOrEmpty(xTextTableElement.ID))
			{
				EndLogFunction(xTextTableElement.ID);
				return xTextTableElement.ID;
			}
			EndLogFunction("");
			return "";
		}

		[ComVisible(true)]
		public void DeleteTableRowByParam(string tableName, string cellName, string string_0, string string_1)
		{
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       void InsertTable ( BSTR TableN, int col , int row )
		                                                                    ///       功能描述：
		                                                                    ///       在指定位置插入表格。
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       TableN	BSTR	插入的表格名称	必需	
		                                                                    ///       Col	Int	表格列数	必需	
		                                                                    ///       Row	Int	表格行数	必需	
		                                                                    ///       返回值：无
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1.InsertTable("test", 3,2 )
		                                                                    ///       Date:10-10 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="TableN">
		                                                                    /// </param>
		                                                                    /// <param name="col">
		                                                                    /// </param>
		                                                                    /// <param name="row">
		                                                                    /// </param>
		[ComVisible(true)]
		public void InsertTable(string TableN, int int_0, int int_1)
		{
			int num = 2;
			if (pnlMainContainer.Visible)
			{
				BeginLogFunction("InsertTable", "TableN=" + TableN + " col=" + int_0 + " row" + int_1);
				XTextTableElementProperties xTextTableElementProperties = new XTextTableElementProperties();
				xTextTableElementProperties.ColumnsCount = int_0;
				xTextTableElementProperties.ID = TableN;
				xTextTableElementProperties.RowsCount = int_1;
				myEditControl.ExecuteCommand("Table_InsertTable", showUI: false, xTextTableElementProperties);
				EndLogFunction(null);
			}
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BOOL IncMultiRows ( BSTR tableN,  int index ,int count)
		                                                                    ///       功能描述：
		                                                                    ///       对指定表格的某行之后插入数行。
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       tableN	BSTR	表格名称	必需	
		                                                                    ///       Index	Int	插入的参照位置在第几行	可选	从1开始整数(0表示表格第一行上面插入行)
		                                                                    ///       Count	Int		可选	从1开始整数
		                                                                    ///       返回值：BOOL，False：失败   True：成功
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1.IncMultiRows("test", 1, 1)
		                                                                    ///       实现说明：无
		                                                                    ///       Date:10-10 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="TableN">
		                                                                    /// </param>
		                                                                    /// <param name="index">
		                                                                    /// </param>
		                                                                    /// <param name="count">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool IncMultiRows(string TableN, int index, int count)
		{
			int num = 8;
			BeginLogFunction("IncMultiRows", "TableN=" + TableN + "  index=" + index + "  count=" + count);
			if (string.IsNullOrEmpty(TableN))
			{
				EndLogFunction(null);
				throw new ArgumentNullException("TableN");
			}
			TableCommandArgs tableCommandArgs = new TableCommandArgs();
			tableCommandArgs.TableID = TableN;
			tableCommandArgs.RowIndex = index - 1;
			tableCommandArgs.RowsCount = count;
			using (myEditControl.CreateBackgroundModeSetter())
			{
				myEditControl.ExecuteCommand("Table_InsertRowDown", showUI: false, tableCommandArgs);
			}
			EndLogFunction("true");
			return true;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BOOL PutCellContent ( BSTR tableN,  BSTR cellN , BSTR val)
		                                                                    ///       功能描述：
		                                                                    ///       设置指定表格的单元格的文本
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       tableN	BSTR	表格名称	必需	
		                                                                    ///       cellN	BSTR	单元格名称	可选	缺省：A1
		                                                                    ///       val	BSTR	插入到单元格中的字符串或者数字	可选	缺省：为空
		                                                                    ///       返回值：BOOL，True – 成功  False – 失败
		                                                                    ///       实现说明：
		                                                                    ///       代码示例：(VB)
		                                                                    ///       AxNsoControl1.PutCellContent（“a”，“A1”，“Hello”）
		                                                                    ///       Date:10-10 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="TableN">
		                                                                    /// </param>
		                                                                    /// <param name="cellN">
		                                                                    /// </param>
		                                                                    /// <param name="val">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool PutCellContent(string TableN, string cellN, string string_0)
		{
			int num = 3;
			BeginLogFunction("PutCellContent", "TableN=" + TableN + " cellN=" + cellN + " val" + string_0);
			if (string.IsNullOrEmpty(TableN))
			{
				throw new ArgumentNullException("TableN");
			}
			XTextTableElement xTextTableElement = GetElementById(TableN) as XTextTableElement;
			if (xTextTableElement != null)
			{
				XTextTableCellElement cellByCellIndex = xTextTableElement.GetCellByCellIndex(cellN, throwException: false);
				if (cellByCellIndex != null)
				{
					cellByCellIndex.EditorTextExt = string_0;
					xTextTableElement.EditorRefreshView();
					EndLogFunction("true");
					return true;
				}
				cellByCellIndex = (GetElementById(cellN) as XTextTableCellElement);
				if (cellByCellIndex != null)
				{
					cellByCellIndex.EditorTextExt = string_0;
					EndLogFunction("true");
					xTextTableElement.EditorRefreshView();
					return true;
				}
				EndLogFunction("false");
				return false;
			}
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///        函数说明：
		                                                                    ///        BSTR GetCellContent （BSTR tableN, BSTR cellN）
		                                                                    ///        功能描述：
		                                                                    ///        获取单元格内容
		                                                                    ///        参数：   
		                                                                    ///        名称	类型	说明	可选	取值
		                                                                    ///        tableN	BSTR	表格名称	必需	
		                                                                    ///        cellN	BSTR	单元格名称	必需	
		                                                                    ///        返回值：
		                                                                    ///        单元格信息
		                                                                    ///        代码示例：
		                                                                    ///        AxNsoControl1. GetCellContent（“表格1”，“A1”）
		                                                                    ///        实现说明：无
		                                                                    ///        Date:10-10 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="tablen">
		                                                                    /// </param>
		                                                                    /// <param name="cellN">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public string GetCellContent(string tableN, string cellN)
		{
			int num = 8;
			BeginLogFunction("GetCellContent", "tableN=" + tableN + "  cellN=" + cellN);
			if (tableN == null)
			{
				throw new ArgumentNullException("tableN");
			}
			if (!pnlMainContainer.Visible)
			{
				EndLogFunction("");
				return "";
			}
			XTextTableElement xTextTableElement = GetElementById(tableN) as XTextTableElement;
			if (xTextTableElement != null)
			{
				XTextTableCellElement cellByCellIndex = xTextTableElement.GetCellByCellIndex(cellN, throwException: false);
				if (cellByCellIndex != null)
				{
					EndLogFunction(cellByCellIndex.EditorTextExt);
					return cellByCellIndex.EditorTextExt;
				}
				cellByCellIndex = (GetElementById(cellN) as XTextTableCellElement);
				if (cellByCellIndex != null)
				{
					EndLogFunction(cellByCellIndex.EditorTextExt);
					return cellByCellIndex.EditorTextExt;
				}
				EndLogFunction("");
				return "";
			}
			EndLogFunction("");
			return "";
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       BSTR GetAllTableNamesByCurrentDoc（）
		                                                                    ///       功能描述：
		                                                                    ///       获取当前文档中所有表格名字
		                                                                    ///       参数：
		                                                                    ///       无
		                                                                    ///       返回值：所有表格名称
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. GetAllTableNameByCurrentDoc（） 
		                                                                    ///       实现说明：无
		                                                                    ///       Date:10-10 Jy
		                                                                    ///       </summary>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public string GetAllTableNamesByCurrentDoc()
		{
			int num = 0;
			BeginLogFunction("GetAllTableNamesByCurrentDoc", null);
			XTextElementList elementsByType = myEditControl.Document.GetElementsByType(typeof(XTextTableElement));
			if (elementsByType != null && elementsByType.Count > 0)
			{
				StringBuilder stringBuilder = new StringBuilder();
				for (int i = 0; i < _AllTables.Count; i++)
				{
					if (elementsByType.Contains(_AllTables[i]))
					{
						stringBuilder.Append(_AllTables[i].ID);
						stringBuilder.Append(",");
						elementsByType.Remove(_AllTables[i]);
					}
					else
					{
						_AllTables.RemoveAt(i);
						i--;
					}
				}
				foreach (XTextTableElement item in elementsByType)
				{
					_AllTables.Add(item);
					stringBuilder.Append(item.ID);
					stringBuilder.Append(",");
				}
				EndLogFunction(stringBuilder.ToString());
				return stringBuilder.ToString();
			}
			EndLogFunction("");
			return "";
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       Long GetTableRowCount (BSTR sName)
		                                                                    ///       功能描述：
		                                                                    ///       得到表格的行数
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sName	BSTR	插入表格的名称	必需	
		                                                                    ///       返回值：
		                                                                    ///        表格的行数。-1 表示失败。
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1.GetTableRowCount("表格1")
		                                                                    ///       实现说明：无
		                                                                    ///       Date:10-10 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public int GetTableRowCount(string sName)
		{
			int num = 8;
			BeginLogFunction("GetTableRowCount", "sName=" + sName);
			if (string.IsNullOrEmpty(sName))
			{
				throw new ArgumentNullException("sName");
			}
			XTextTableElement xTextTableElement = GetElementById(sName) as XTextTableElement;
			if (xTextTableElement != null)
			{
				EndLogFunction(xTextTableElement.Rows.Count);
				return xTextTableElement.Rows.Count;
			}
			EndLogFunction(-1);
			return -1;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BOOL ProtectTableByCell( BSTR sTable,  BSTR sCell , BOOL bProtected)
		                                                                    ///       功能描述：
		                                                                    ///       为表格的单元格设置保护或者取消保护。保护状态下单元格无法被
		                                                                    ///       修改。
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sTable	BSTR	表格名称	必需	
		                                                                    ///       sCell	BSTR	单元格名称	必需	“A1”
		                                                                    ///       bProtected	BOOL	是否保护	必需	True – 保护
		                                                                    ///       False – 不保护
		                                                                    ///       返回值：BOOL，True – 成功  False – 失败
		                                                                    ///       实现说明：
		                                                                    ///       代码示例：(VB)
		                                                                    ///       AxNsoControl1. ProtectTableByCell（“表格1”，“A1”，True）
		                                                                    ///       Date:10-10 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="sTable">
		                                                                    /// </param>
		                                                                    /// <param name="sCell">
		                                                                    /// </param>
		                                                                    /// <param name="bProtected">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool ProtectTableByCell(string sTable, string sCell, bool bProtected)
		{
			int num = 11;
			BeginLogFunction("ProtectTableByCell", "sTable=" + sTable + "  sCell=" + sCell + "  bProtected=" + bProtected);
			if (string.IsNullOrEmpty(sTable))
			{
				throw new ArgumentNullException("sTable");
			}
			XTextTableElement xTextTableElement = GetElementById(sTable) as XTextTableElement;
			if (xTextTableElement != null)
			{
				XTextTableCellElement xTextTableCellElement = xTextTableElement.GetCellByCellIndex(sCell, throwException: false);
				if (xTextTableCellElement != null)
				{
					if (xTextTableCellElement.OverrideCell != null)
					{
						xTextTableCellElement = xTextTableCellElement.OverrideCell;
					}
					if (bProtected)
					{
						xTextTableCellElement.ContentReadonly = ContentReadonlyState.True;
					}
					else
					{
						xTextTableCellElement.ContentReadonly = ContentReadonlyState.False;
					}
					EndLogFunction("true");
					return true;
				}
			}
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BOOL  IsTableProtected( BSTR sTable )
		                                                                    ///       功能描述：
		                                                                    ///       获取表格全部单元格是否处于保护状态。
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sTable	BSTR	表格名称	必需	
		                                                                    ///       返回值：BOOL，True – 保护  False – 非保护
		                                                                    ///       实现说明：
		                                                                    ///       代码示例：(VB)
		                                                                    ///       Msgbox AxNsoControl1. IsTableProtected（“表格1”）
		                                                                    ///       Date:10-10 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="sTable">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool IsTableProtected(string sTable)
		{
			int num = 13;
			BeginLogFunction("IsTableProtected", "sTable=" + sTable);
			if (sTable == null)
			{
				throw new ArgumentNullException("sTable");
			}
			XTextTableElement xTextTableElement = GetElementById(sTable) as XTextTableElement;
			EndLogFunction(xTextTableElement != null && xTextTableElement.ContentReadonly == ContentReadonlyState.True);
			return xTextTableElement != null && xTextTableElement.ContentReadonly == ContentReadonlyState.True;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BOOL IsTableCellProtected( BSTR sTable , BSTR sCell)
		                                                                    ///       功能描述：
		                                                                    ///       获取表格某个单元格是否处于保护状态。
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sTable	BSTR	表格名称	必需	
		                                                                    ///       sCell	BSTR	单元格名称	必需	
		                                                                    ///       返回值：BOOL，True – 保护  False – 非保护
		                                                                    ///       实现说明：
		                                                                    ///       代码示例：(VB)
		                                                                    ///       AxNsoControl1. IsTableCellProtected（“表格1”，”A1”）
		                                                                    ///       Date:10-10 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="sTable">
		                                                                    /// </param>
		                                                                    /// <param name="sCell">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool IsTableCellProtected(string sTable, string sCell)
		{
			int num = 1;
			BeginLogFunction("IsTableCellProtected", "sTable=" + sTable + "  sCell=" + sCell);
			if (sTable == null)
			{
				throw new ArgumentNullException("sTable");
			}
			XTextTableElement xTextTableElement = GetElementById(sTable) as XTextTableElement;
			if (xTextTableElement != null)
			{
				XTextTableCellElement xTextTableCellElement = xTextTableElement.GetCellByCellIndex(sCell, throwException: false);
				if (xTextTableCellElement != null && xTextTableCellElement.OverrideCell != null)
				{
					xTextTableCellElement = xTextTableCellElement.OverrideCell;
				}
				EndLogFunction(xTextTableCellElement?.RuntimeContentReadonly ?? false);
				return xTextTableCellElement?.RuntimeContentReadonly ?? false;
			}
			EndLogFunction(false);
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BOOL CursorEnterTableCell（BSTR sName, BSTR sCellN）
		                                                                    ///       功能描述：
		                                                                    ///       光标进入指定表格的某个位置
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sName	BSTR	表格名称	必需	
		                                                                    ///       sCellN	BSTR	单元格名称	必需	
		                                                                    ///       返回值：
		                                                                    ///       BOOL   True – 成功   False – 失败 
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1.CursorEnterTableCell("表格1", "A2")
		                                                                    ///       实现说明：无
		                                                                    ///       Date:10-10 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">
		                                                                    /// </param>
		                                                                    /// <param name="sCell">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool CursorEnterTableCell(string sName, string sCell)
		{
			int num = 9;
			BeginLogFunction("CursorEnterTableCell", "sName=" + sName + "  sCell=" + sCell);
			if (sName == null)
			{
				throw new ArgumentNullException("sName");
			}
			if (sCell == null)
			{
				throw new ArgumentNullException("sCell");
			}
			XTextTableElement xTextTableElement = GetElementById(sName) as XTextTableElement;
			if (xTextTableElement != null)
			{
				XTextTableCellElement cellByCellIndex = xTextTableElement.GetCellByCellIndex(sCell, throwException: false);
				if (cellByCellIndex != null)
				{
					myEditControl.Focus();
					cellByCellIndex.Focus();
					EndLogFunction("true");
					return true;
				}
			}
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BOOL  SetTableStyleProtected( BSTR strTableName,BOOL bProtect)
		                                                                    ///       功能描述：
		                                                                    ///       设置表格样式保护
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       strTableName	BSTR	表格名称	必需	
		                                                                    ///       bProtect	BOOL	是否样式保护		true – 样式保护
		                                                                    ///       false – 取消样式保护
		                                                                    ///       返回值：
		                                                                    ///       BOOL
		                                                                    ///       True – 成功  
		                                                                    ///       False – 失败
		                                                                    ///       代码示例：(VB)
		                                                                    ///        AxNsoControl1. SetTableStyleProtected（”表格1”,true）
		                                                                    ///       实现说明：
		                                                                    ///       控制表格里面的是否可以增加行列，或者删除行列。(接口增删行列可以无视这个
		                                                                    ///       控制)
		                                                                    ///       但是不能控制表格整体是否能否被删除
		                                                                    ///       Date:10-11 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="strTableName">
		                                                                    /// </param>
		                                                                    /// <param name="bProtect">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool SetTableStyleProtected(string strTableName, bool bProtect)
		{
			int num = 2;
			BeginLogFunction("SetTableStyleProtected", "strTableName=" + strTableName + "  bProtect=" + bProtect);
			if (strTableName == null)
			{
				throw new ArgumentNullException("strTableName");
			}
			XTextTableElement xTextTableElement = GetElementById(strTableName) as XTextTableElement;
			if (xTextTableElement != null)
			{
				if (_ListForSetTableStyleProtected.Contains(xTextTableElement) != bProtect)
				{
					if (bProtect)
					{
						_ListForSetTableStyleProtected.Add(xTextTableElement);
					}
					else
					{
						_ListForSetTableStyleProtected.Remove(xTextTableElement);
					}
				}
				xTextTableElement.Deleteable = !bProtect;
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BOOL  SetTableDeleteProtected( BSTR strTableName,BOOL bDelProtect)
		                                                                    ///       功能描述：
		                                                                    ///       设置表格删除保护
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       strTableName	BSTR	表格名称	必需	
		                                                                    ///       bDelProtect	BOOL	是否删除保护		true – 删除保护
		                                                                    ///       false – 取消删除保护
		                                                                    ///       返回值：
		                                                                    ///       BOOL
		                                                                    ///       True – 成功  
		                                                                    ///       False – 失败
		                                                                    ///       代码示例：(VB)
		                                                                    ///       AxNsoControl1.SetTableDeleteProtected（”表格1”,true）
		                                                                    ///       实现说明：
		                                                                    ///       可以控制表格整体是否能被删除。(接口删除表格可以无视这个控制)
		                                                                    ///       但是不能控制表格的行列是否允许增删.
		                                                                    ///       Date:10-11 Jy
		                                                                    ///       </summary>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool SetTableDeleteProtected(string strTableName, bool bDelProtect)
		{
			int num = 16;
			BeginLogFunction("SetTableDeleteProtected", "strTableName=" + strTableName + "  bDelProtect=" + bDelProtect);
			if (string.IsNullOrEmpty(strTableName))
			{
				throw new ArgumentNullException("strTableName");
			}
			XTextTableElement xTextTableElement = GetElementById(strTableName) as XTextTableElement;
			if (xTextTableElement != null)
			{
				xTextTableElement.Deleteable = !bDelProtect;
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BOOL  SetTableCellErrorMsgWhenProtected( BSTR sInfo)
		                                                                    ///       功能描述：
		                                                                    ///       表格的单元格处于保护状态下的时候，输入文字会弹出提示框
		                                                                    ///       该接口可以设置这个提示框的具体信息。
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sInfo	BSTR	弹警告框的信息	必需	当为””时候不弹警告框
		                                                                    ///       返回值：
		                                                                    ///       BOOL，True – 成功  False – 失败
		                                                                    ///       代码示例：(VB)
		                                                                    ///       AxNsoControl1. SetTableCellErrorMsgWhenProtected（”自己希望的提示信息”）
		                                                                    ///       实现说明：
		                                                                    ///       当sInfo为空字符串时不弹出警告框
		                                                                    ///       Date:10-11 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="sInfo">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool SetTableCellErrorMsgWhenProtected(string sInfo)
		{
			BeginLogFunction("SetTableCellErrorMsgWhenProtected", "sInfo=" + sInfo);
			_TextForSetTableCellErrorMsgWhenProtected = sInfo;
			EndLogFunction("true");
			return true;
		}

		private void AlertTableCellErrorMsgWhenProtected()
		{
			int num = 12;
			if (!string.IsNullOrEmpty(_TextForSetTableCellErrorMsgWhenProtected))
			{
				MessageBox.Show(this, _TextForSetTableCellErrorMsgWhenProtected, "系统提示", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
			}
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BOOL SetTableBorderLineVisible（BSTR strTableName,BOOL bTopLine,BOOL bBottomLine,BOOL bLeftLine,BOOL bRightLine,BOOL bHorizontalLine,BOOL bVerticalLine）
		                                                                    ///       功能描述：
		                                                                    ///       设置表格边框线的显示与隐藏（上，下，左，右，内部横线，内部竖线）.
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       strTableName	BSTR	表格名称	必需	表格名
		                                                                    ///       bTopLine	BOOL	上边框是否显示	必须	True – 显示
		                                                                    ///       False– 隐藏
		                                                                    ///       bBottomLine	BOOL	下边框是否显示	必须	同上
		                                                                    ///       bLeftLine	BOOL	左边框是否显示	必须	同上
		                                                                    ///       bRightLine	BOOL	右边框是否显示	必须	同上
		                                                                    ///       bHorizontalLine	BOOL	表格内部横线是否显示	必须	同上
		                                                                    ///       bVerticalLine	BOOL	表格内部竖线是否显示	必须	同上
		                                                                    ///       返回值：
		                                                                    ///       True – 成功
		                                                                    ///       False – 失败
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. SetTableBorderLineVisible("表格1",true,true,true,true,false,false)
		                                                                    ///       Date:10-11 Jy
		                                                                    ///       </summary>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool SetTableBorderLineVisible(string strTableName, bool bTopLine, bool bBottomLine, bool bLeftLine, bool bRigthLine, bool bHorizontalLine, bool bVerticalLine)
		{
			int num = 19;
			BeginLogFunction("SetTableBorderLineVisible", "strTableName=" + strTableName + "  bTopLine=" + bTopLine + "  bBottomLine=" + bBottomLine + "  bLeftLine=" + bLeftLine + "  bRigthLine=" + bRigthLine + "  bHorizontalLine=" + bHorizontalLine + "  bVerticalLine=" + bVerticalLine);
			if (string.IsNullOrEmpty(strTableName))
			{
				throw new ArgumentNullException("strTableName");
			}
			XTextTableElement xTextTableElement = GetElementById(strTableName) as XTextTableElement;
			if (xTextTableElement != null)
			{
				if (_ListForSetTableStyleProtected.Contains(xTextTableElement))
				{
					return false;
				}
				WriterCommandEventArgs writerCommandEventArgs = new WriterCommandEventArgs(myEditControl, myEditControl.Document, WriterCommandEventMode.Invoke, null);
				writerCommandEventArgs.Parameter = xTextTableElement.FirstCell;
				BorderBackgroundCommandParameter borderBackgroundCommandParameter = new BorderBackgroundCommandParameter();
				borderBackgroundCommandParameter.ApplyRange = StyleApplyRanges.Table;
				borderBackgroundCommandParameter.LeftBorder = bLeftLine;
				borderBackgroundCommandParameter.TopBorder = bTopLine;
				borderBackgroundCommandParameter.RightBorder = bRigthLine;
				borderBackgroundCommandParameter.BottomBorder = bBottomLine;
				borderBackgroundCommandParameter.MiddleHorizontalBorder = bHorizontalLine;
				borderBackgroundCommandParameter.CenterVerticalBorder = bVerticalLine;
				WriterCommandModuleFormat.SetCellBorderBackgroundFormat(borderBackgroundCommandParameter, writerCommandEventArgs, setBorderVisibleOnly: true);
				if (writerCommandEventArgs.Result is bool)
				{
					EndLogFunction(((bool)writerCommandEventArgs.Result).ToString());
					return (bool)writerCommandEventArgs.Result;
				}
			}
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BOOL  SetTableBordersSpacingToContents ( BSTR sTableName,LONG lDistance)
		                                                                    ///       功能描述：
		                                                                    ///       设置表格边框至内容的距离
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sTableName	BSTR	表格名	必需	
		                                                                    ///       lDistance	LONG	距离值	必需	(必须大于1)
		                                                                    ///       返回值：
		                                                                    ///       BOOL，True – 成功  False – 失败
		                                                                    ///       代码示例：(VB)
		                                                                    ///       AxNsoControl1. SetTableBorderColor（”表格1”,100）
		                                                                    ///       实现说明：
		                                                                    ///       lDistance 设置100，表示0.1厘米
		                                                                    ///       不能设置为0.至少为1
		                                                                    ///       Date:10-11 Jy    待修改
		                                                                    ///       </summary>
		                                                                    /// <param name="sTableName">
		                                                                    /// </param>
		                                                                    /// <param name="lDistance">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool SetTableBordersSpacingToContents(string sTableName, int lDistance)
		{
			int num = 14;
			BeginLogFunction("SetTableBordersSpacingToContents", "sTableName=" + sTableName + "  lDistance=" + lDistance);
			if (sTableName == null)
			{
				throw new ArgumentNullException("sTableName");
			}
			if (lDistance > 0)
			{
				XTextTableElement xTextTableElement = GetElementById(sTableName) as XTextTableElement;
				if (xTextTableElement != null)
				{
					float num2 = (float)CMToDocumentUnit((double)lDistance / 100.0);
					foreach (XTextTableCellElement visibleCell in xTextTableElement.VisibleCells)
					{
						visibleCell.Style.PaddingBottom = num2;
						visibleCell.Style.PaddingLeft = num2;
						visibleCell.Style.PaddingRight = num2;
						visibleCell.Style.PaddingTop = num2;
					}
					xTextTableElement.EditorRefreshView();
					EndLogFunction("true");
					return true;
				}
			}
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BOOL SetTableName (BSTR sTableOldName,BSTR sTableNewName)
		                                                                    ///       功能描述：
		                                                                    ///       修改表格的名称
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sTableOldName	BSTR	表格的原来名称	必需	
		                                                                    ///       sTableNewName	BSTR	表格的新的名称	必需	
		                                                                    ///       返回值：
		                                                                    ///       True – 成功  False – 失败
		                                                                    ///       代码示例：
		                                                                    ///        AxNsoControl1. SetTableName ("表格1",”表格2”)
		                                                                    ///       实现说明：
		                                                                    ///       如果不存在sTableOldName表格，或者sTableNewName已经存在
		                                                                    ///       接口会调用失败
		                                                                    ///       Date:10-11 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="sTableOldName">
		                                                                    /// </param>
		                                                                    /// <param name="sTableNewName">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool SetTableName(string sTableOldName, string sTableNewName)
		{
			int num = 6;
			BeginLogFunction("SetTableName", "sTableOldName=" + sTableOldName + "  sTableNewName=" + sTableNewName);
			if (sTableOldName == null)
			{
				throw new ArgumentNullException("sTableOldName");
			}
			if (sTableNewName == null)
			{
				throw new ArgumentNullException("sTableNewName");
			}
			XTextTableElement xTextTableElement = GetElementById(sTableOldName) as XTextTableElement;
			if (xTextTableElement != null)
			{
				xTextTableElement.ID = sTableNewName;
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BSTR GetTableCustomProperty（BSTR sTable,BSTR sPropertyName）
		                                                                    ///       功能描述：
		                                                                    ///       获取表格的某个自定义属性.
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sTable	BSTR	表格名称	必需	表格名
		                                                                    ///       sPropertyName	BSTR	自定义属性名	必须	任意属性名（注意别用系统的属性名，比如Color Char）
		                                                                    ///       最好加一个自己公司的后缀，比如 MyProperty_CS2C.
		                                                                    ///       返回值：
		                                                                    ///       自定义属性值
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. GetTableCustomProperty ("表格1",”属性1_CS2C”)
		                                                                    ///       实现说明：
		                                                                    ///       Date:10-11 Jy
		                                                                    ///       </summary>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public string GetTableCustomProperty(string sTable, string ssPropertyName)
		{
			BeginLogFunction("GetTableCustomProperty", "sTable=" + sTable + "  ssPropertyName=" + ssPropertyName);
			string text = null;
			XTextTableElement xTextTableElement = GetElementById(sTable) as XTextTableElement;
			if (xTextTableElement != null)
			{
				text = xTextTableElement.GetAttribute(ssPropertyName);
			}
			if (text == null)
			{
				EndLogFunction("");
				return "";
			}
			EndLogFunction(text);
			return text;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BOOL SetTableCustomProperty（BSTR sTable,BSTR sPropertyName,
		                                                                    ///       BSTR sValue）
		                                                                    ///       功能描述：
		                                                                    ///       设置表格的自定义属性.
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sTable	BSTR	表格名称	必需	表格名
		                                                                    ///       sPropertyName	BSTR	自定义属性名	必须	任意属性名（注意别用系统的属性名，比如Color Char）
		                                                                    ///       最好加一个自己公司的后缀，比如 MyProperty_CS2C.
		                                                                    ///       sValue	BSTR	自定义属性值	必须	字符串格式
		                                                                    ///       返回值：
		                                                                    ///       True
		                                                                    ///        False
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. SetTableCustomProperty 
		                                                                    ///       ("表格1",”属性1_CS2C”,”aaa”)
		                                                                    ///       实现说明：该接口可以将用户一些信息存储到某个表格
		                                                                    ///       定义属性名的第一个字必须是英文a – z（大小写均可），不能是数字或者其他的符号
		                                                                    ///       Date:10-11 Jy
		                                                                    ///       </summary>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool SetTableCustomProperty(string sTable, string sPropertyName, string sValue)
		{
			int num = 8;
			BeginLogFunction("SetTableCustomProperty", "sTable=" + sTable + "  sPropertyName=" + sPropertyName + "  sValue=" + sValue);
			XTextTableElement xTextTableElement = GetElementById(sTable) as XTextTableElement;
			if (xTextTableElement != null)
			{
				xTextTableElement.SetAttribute(sPropertyName, sValue);
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BOOL  SetTableGridlinesVisible( BOOL bVisible)
		                                                                    ///       功能描述：
		                                                                    ///       设置是否显示表格虚框
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       bVisible	BOOL	是否显示虚框	必需	True  – 显示
		                                                                    ///       False － 不显示
		                                                                    ///       返回值：
		                                                                    ///       BOOL，True – 成功  False – 失败
		                                                                    ///       代码示例：(VB)
		                                                                    ///       AxNsoControl1. SetTableGridlinesVisible（false）
		                                                                    ///       实现说明：
		                                                                    ///       无
		                                                                    ///       Date:10-11 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="bVisible">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool SetTableGridlinesVisible(bool bVisible)
		{
			int num = 5;
			BeginLogFunction("SetTableGridlinesVisible", "bVisible=" + bVisible);
			if (myEditControl != null)
			{
				myEditControl.DocumentOptions.ViewOptions.ShowCellNoneBorder = bVisible;
				myEditControl.Invalidate();
				if (menuTableBoundaries.Checked == bVisible)
				{
					menuTableBoundaries.Checked = !bVisible;
				}
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BOOL SetTableCellProperty（BSTR sTable, BSTR sCell,BSTR sColor,
		                                                                    ///       BSTR sFontAsian, BSTR sFontSize ,
		                                                                    ///       LONG lFontType,LONG lAlignmentType）
		                                                                    ///       功能描述：
		                                                                    ///       设置表格的某个单元格属性.
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sTable	BSTR	表格名称	必需	表格名
		                                                                    ///       sCell	BSTR	单元格名称	必需	单元格名
		                                                                    ///       sColor	BSTR	颜色	必须	“浅红色""浅蓝色","浅紫红色","绿色","红色","蓝色","褐色","棕色","红紫色","紫红色","青色","蓝绿色","黑色"
		                                                                    ///       sFontAsian	BSTR	字体风格	必须	宋体,楷体等
		                                                                    ///       sFontSize	BSTR	字体大小	必须	“12”,”26” –注12等同于小四
		                                                                    ///       lFontType	LONG	字体样式	必须	0 – 正常字体
		                                                                    ///       1 – 斜体
		                                                                    ///       2 -  粗体
		                                                                    ///       3 – 粗斜体
		                                                                    ///       lAlignmentType	LONG	对齐方式	必须	1 – 左对齐
		                                                                    ///       2 – 居中
		                                                                    ///       3 – 右对齐
		                                                                    ///       4 – 两端对齐
		                                                                    ///       返回值：
		                                                                    ///       无
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. SetTableCellProperty ("表格1", "A2",”红色”,”宋体”,”12”,0,1)
		                                                                    ///       实现说明：无
		                                                                    ///       Date:10-10 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="sTable">
		                                                                    /// </param>
		                                                                    /// <param name="sCell">
		                                                                    /// </param>
		                                                                    /// <param name="sColor">
		                                                                    /// </param>
		                                                                    /// <param name="sFontAsian">
		                                                                    /// </param>
		                                                                    /// <param name="sFontSize">
		                                                                    /// </param>
		                                                                    /// <param name="iFontType">
		                                                                    /// </param>
		                                                                    /// <param name="iAlignmentType">
		                                                                    /// </param>
		[ComVisible(true)]
		public void SetTableCellProperty(string sTable, string sCell, string sColor, string sFontAsian, string sFontSize, int iFontType, int iAlignmentType)
		{
			int num = 4;
			BeginLogFunction("SetTableCellProperty", "sTable=" + sTable + "  sCell=" + sCell + "  sColor=" + sColor + "  sFontAsian=" + sFontAsian + "  sFontSize=" + sFontSize + "  iFontType=" + iFontType + "  iAlignmentType=" + iAlignmentType);
			if (sTable == null)
			{
				throw new ArgumentNullException("sTable");
			}
			if (sCell == null)
			{
				throw new ArgumentNullException("sCell");
			}
			if (sColor == null)
			{
				throw new ArgumentNullException("sColor");
			}
			if (sFontAsian == null)
			{
				throw new ArgumentNullException("sFontAsian");
			}
			if (sFontSize == null)
			{
				throw new ArgumentNullException("sFontSize");
			}
			XTextTableElement xTextTableElement = GetElementById(sTable) as XTextTableElement;
			if (xTextTableElement != null)
			{
				XTextTableCellElement xTextTableCellElement = null;
				try
				{
					xTextTableCellElement = xTextTableElement.GetCellByCellIndex(sCell, throwException: true);
				}
				catch
				{
					xTextTableCellElement = (xTextTableElement.GetElementById(sCell) as XTextTableCellElement);
				}
				if (xTextTableCellElement != null)
				{
					Color nsoColor = GetNsoColor(sColor, Color.Black);
					myEditControl.Focus();
					xTextTableCellElement.Select();
					switch (iAlignmentType)
					{
					case 1:
						myEditControl.ExecuteCommand("AlignLeft", showUI: false, null);
						break;
					case 2:
						myEditControl.ExecuteCommand("AlignCenter", showUI: false, null);
						break;
					case 3:
						myEditControl.ExecuteCommand("AlignRight", showUI: false, null);
						break;
					case 4:
						myEditControl.ExecuteCommand("AlignJustify", showUI: false, null);
						break;
					}
					XFontValue xFontValue = new XFontValue();
					xFontValue.Name = sFontAsian;
					xFontValue.Size = GClass288.smethod_1(sFontSize, 11f);
					switch (iFontType)
					{
					case 0:
						xFontValue.Style = FontStyle.Regular;
						break;
					case 1:
						xFontValue.Style = FontStyle.Italic;
						break;
					case 2:
						xFontValue.Style = FontStyle.Bold;
						break;
					case 3:
						xFontValue.Style = (FontStyle.Bold | FontStyle.Italic);
						break;
					}
					myEditControl.ExecuteCommand("Color", showUI: false, nsoColor);
					myEditControl.ExecuteCommand("Font", showUI: false, xFontValue);
				}
			}
			EndLogFunction(null);
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BOOL DelMultiRows(BSTR sName, Long index, long count)
		                                                                    ///       功能描述：   
		                                                                    ///       删除指定行
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sName	BSTR	表格名称	必需	
		                                                                    ///       index	Long	索引	必需	从0开始
		                                                                    ///       count	long	要删除的行数	必需	从1开始
		                                                                    ///        返回值：
		                                                                    ///       False：失败   True：成功
		                                                                    ///       代码说明：
		                                                                    ///       AxNsoControl1.DelMultiRows("表格1", 2, 3)
		                                                                    ///       实现说明：
		                                                                    ///       无
		                                                                    ///       Date:10-13 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">
		                                                                    /// </param>
		                                                                    /// <param name="index">
		                                                                    /// </param>
		                                                                    /// <param name="count">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool DelMultiRows(string sName, int index, int count)
		{
			int num = 15;
			BeginLogFunction("DelMultiRows", "sName=" + sName + "  index=" + index + "  count=" + count);
			if (sName == null)
			{
				throw new ArgumentNullException("sName");
			}
			XTextTableElement xTextTableElement = GetElementById(sName) as XTextTableElement;
			if (xTextTableElement != null)
			{
				TableCommandArgs tableCommandArgs = new TableCommandArgs();
				tableCommandArgs.TableElement = xTextTableElement;
				tableCommandArgs.RowIndex = index;
				tableCommandArgs.RowsCount = count;
				myEditControl.ExecuteCommand("Table_DeleteRow", showUI: false, tableCommandArgs);
				EndLogFunction(tableCommandArgs.Result);
				return tableCommandArgs.Result;
			}
			EndLogFunction(false);
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       Long GetTableColCount（BSTR　sName）
		                                                                    ///       功能描述：
		                                                                    ///       返回表格所有列数
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sName	BSTR	表格名称	必需	
		                                                                    ///       返回值：返回表格列数
		                                                                    ///       -1 表示获取表格列数失败	
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1.GetTableColCount("表格1")
		                                                                    ///       实现说明：无
		                                                                    ///       Date:10-13 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="tableN">
		                                                                    /// </param>
		                                                                    /// <param name="cellN">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public int GetTableColCount(string sName)
		{
			int num = 17;
			BeginLogFunction("GetTableColCount", "sName=" + sName);
			if (sName == null)
			{
				throw new ArgumentNullException("sName");
			}
			XTextElement elementById = myEditControl.Document.GetElementById(sName);
			if (elementById != null && elementById is XTextTableElement)
			{
				XTextTableElement xTextTableElement = elementById as XTextTableElement;
				EndLogFunction(xTextTableElement.ColumnsCount);
				return xTextTableElement.ColumnsCount;
			}
			EndLogFunction(-1);
			return -1;
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       BSTR GetTableCellNameByCurrentCursor（）
		                                                                    ///       功能描述：
		                                                                    ///       获取光标所在的表格的单元格名称
		                                                                    ///       参数：
		                                                                    ///       无
		                                                                    ///       返回值：
		                                                                    ///       返回表格的单元格名称，比如”A1”,”B2”
		                                                                    ///       如果光标不在表格中，则返回空
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. GetTableCellNameByCurrentCursor（） 
		                                                                    ///       实现说明：无
		                                                                    ///       Date:10-13 Jy
		                                                                    ///       </summary>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public string GetTableCellNameByCurrentCursor()
		{
			BeginLogFunction("GetTableCellNameByCurrentCursor", null);
			XTextTableCellElement currentTableCell = myEditControl.Document.CurrentTableCell;
			if (currentTableCell != null)
			{
				EndLogFunction(currentTableCell.CellID);
				return currentTableCell.CellID;
			}
			EndLogFunction("");
			return "";
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BOOL IncMultiCols（BSTR sName, Long index,long count）
		                                                                    ///       功能描述：
		                                                                    ///       指定列后面追加多少列
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sName	BSTR	表格名称	必需	
		                                                                    ///       index	Long	插入的参照位置在第几列	必需	从1开始整数
		                                                                    ///       (0表示表格第一列左边插入列)
		                                                                    ///       count	Long	插入的行数	必需	从1开始整数
		                                                                    ///       返回值：BOOL，False：失败   True：成功。
		                                                                    ///       代码示例（ＶＢ）：
		                                                                    ///       AxNsoControl1.IncMultiCols("表格1", 2, 2)
		                                                                    ///       实现说明：无
		                                                                    ///       Date:10-13 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">
		                                                                    /// </param>
		                                                                    /// <param name="index">
		                                                                    /// </param>
		                                                                    /// <param name="count">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool IncMultiCols(string sName, int index, int count)
		{
			int num = 3;
			BeginLogFunction("IncMultiCols", "sName=" + sName + "  index=" + index + "  count=" + count);
			if (sName == null)
			{
				throw new ArgumentNullException("sName");
			}
			XTextTableElement xTextTableElement = GetElementById(sName) as XTextTableElement;
			if (xTextTableElement != null)
			{
				TableCommandArgs tableCommandArgs = new TableCommandArgs();
				tableCommandArgs.TableElement = xTextTableElement;
				tableCommandArgs.ColIndex = index - 1;
				tableCommandArgs.ColsCount = count;
				using (myEditControl.CreateBackgroundModeSetter())
				{
					myEditControl.ExecuteCommand("Table_InsertColumnRight", showUI: false, tableCommandArgs);
				}
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BOOL DeleteTable（BSTR sName）
		                                                                    ///       功能描述：
		                                                                    ///       删除表格
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sName	BSTR	表格名称	必需	
		                                                                    ///       返回值：
		                                                                    ///       False：失败   True：成功
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1.DeleteTable("表格1")
		                                                                    ///       实现说明：
		                                                                    ///       无
		                                                                    ///       Date:10-13 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool DeleteTable(string sName)
		{
			int num = 19;
			BeginLogFunction("DeleteTable", "sName" + sName);
			if (sName == null)
			{
				throw new ArgumentNullException("sName");
			}
			XTextTableElement xTextTableElement = GetElementById(sName) as XTextTableElement;
			if (xTextTableElement != null)
			{
				object obj = myEditControl.ExecuteCommand("Table_DeleteTable", showUI: true, xTextTableElement);
				if (obj is bool)
				{
					EndLogFunction(((bool)obj).ToString());
					return (bool)obj;
				}
				EndLogFunction("false");
				return false;
			}
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BOOL DelMultiCols（BSTR sName, LONG index, Long　count）
		                                                                    ///       功能描述：
		                                                                    ///       删除指定的列数
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sName	BSTR	插入表格的名称	必需	
		                                                                    ///       Index	Long	指定列的索引	必需	从0开始的整数
		                                                                    ///       Count	Long	要删除的列数	必需	从1开始的整数
		                                                                    ///       返回值：
		                                                                    ///       False：失败  True：成功
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1.DelMultiCols("表格1", 2, 3)
		                                                                    ///       实现说明：无
		                                                                    ///       Date:10-13 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">
		                                                                    /// </param>
		                                                                    /// <param name="index">
		                                                                    /// </param>
		                                                                    /// <param name="count">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool DelMultiCols(string sName, int index, int count)
		{
			int num = 16;
			BeginLogFunction("DelMultiCols", "sName=" + sName + "  index=" + index + "  count=" + count);
			if (sName == null)
			{
				throw new ArgumentNullException("sName");
			}
			XTextTableElement xTextTableElement = GetElementById(sName) as XTextTableElement;
			if (xTextTableElement != null)
			{
				TableCommandArgs tableCommandArgs = new TableCommandArgs();
				tableCommandArgs.TableElement = xTextTableElement;
				tableCommandArgs.ColIndex = index;
				tableCommandArgs.ColsCount = count;
				myEditControl.ExecuteCommand("Table_DeleteColumn", showUI: false, tableCommandArgs);
				EndLogFunction(tableCommandArgs.Result);
				return tableCommandArgs.Result;
			}
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BOOL ProtectTable( BSTR sTable , BOOL bProtected)
		                                                                    ///       功能描述：
		                                                                    ///       为整个表格的单元格设置保护或者取消保护。保护状态下表格无法被
		                                                                    ///       修改。
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sTable	BSTR	表格名称	必需	
		                                                                    ///       bProtected	BOOL	是否保护	必需	True – 保护
		                                                                    ///       False – 不保护
		                                                                    ///       返回值：BOOL，True – 成功  False – 失败
		                                                                    ///       实现说明：
		                                                                    ///       代码示例：(VB)
		                                                                    ///       AxNsoControl1. ProtectTable（“表格1”，True）
		                                                                    ///       Date:10-13 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="sTable">
		                                                                    /// </param>
		                                                                    /// <param name="bProtected">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool ProtectTable(string sTable, bool bProtected)
		{
			int num = 12;
			BeginLogFunction("ProtectTable", "sTable=" + sTable + "  bProtected=" + bProtected);
			if (sTable == null)
			{
				throw new ArgumentNullException("sTable");
			}
			XTextTableElement xTextTableElement = GetElementById(sTable) as XTextTableElement;
			if (xTextTableElement != null)
			{
				if (bProtected)
				{
					xTextTableElement.ContentReadonly = ContentReadonlyState.True;
				}
				else
				{
					xTextTableElement.ContentReadonly = ContentReadonlyState.False;
				}
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool CopyMultiRows(string tableN, string cellCopyStartN, int count, string cellPasteStartN)
		{
			int num = 0;
			BeginLogFunction("CopyMultiRows", "tableN=" + tableN + "  cellCopyStartN=" + cellCopyStartN + "  count=" + count + "  cellPasteStartN=" + cellPasteStartN);
			if (string.IsNullOrEmpty(tableN))
			{
				EndLogFunction("false");
				return false;
			}
			XTextTableElement xTextTableElement = myEditControl.GetElementById(tableN) as XTextTableElement;
			if (xTextTableElement == null)
			{
				EndLogFunction("false");
				return false;
			}
			if (string.IsNullOrEmpty(cellCopyStartN) || !cellCopyStartN.StartsWith("A"))
			{
				EndLogFunction("false");
				return false;
			}
			int num2 = Convert.ToInt32(cellCopyStartN.Substring(1)) - 1;
			if (count <= 0)
			{
				EndLogFunction("false");
				return false;
			}
			if (string.IsNullOrEmpty(cellPasteStartN) || !cellPasteStartN.StartsWith("A"))
			{
				EndLogFunction("false");
				return false;
			}
			int num3 = Convert.ToInt32(cellPasteStartN.Substring(1)) - 1;
			if (num3 < 0)
			{
				num3 = 0;
			}
			if (num3 > xTextTableElement.Rows.Count)
			{
				num3 = xTextTableElement.Rows.Count;
			}
			List<XTextTableRowElement> list = new List<XTextTableRowElement>();
			for (int i = 0; i < count; i++)
			{
				int num4 = num2 + i;
				if (num4 >= xTextTableElement.Rows.Count)
				{
					break;
				}
				XTextTableRowElement xTextTableRowElement = (XTextTableRowElement)xTextTableElement.Rows[num4];
				list.Add(xTextTableRowElement.EditorCloneSpecifyCloneType(TableRowCloneType.Complete));
			}
			if (list.Count > 0)
			{
				int num5 = num3;
				foreach (XTextTableRowElement item in list)
				{
					xTextTableElement.Rows.method_13(num5, item);
					num5++;
				}
				xTextTableElement.EditorRefreshView();
				xTextTableElement.OwnerDocument.Modified = true;
				xTextTableElement.OwnerDocument.UndoList.Clear();
				xTextTableElement.OwnerDocument.OnDocumentContentChanged();
				xTextTableElement.OwnerDocument.OnSelectionChanged();
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual string GetTableCellCustomProperty(string sTableName, string sCellName, string sPropertyName)
		{
			BeginLogFunction("GetTableCellCustomProperty", "sTableName=" + sTableName + "  sCellName=" + sCellName + "  sPropertyName=" + sPropertyName);
			XTextTableElement xTextTableElement = myEditControl.GetElementById(sTableName) as XTextTableElement;
			if (xTextTableElement != null)
			{
				XTextTableCellElement cellByCellIndex = xTextTableElement.GetCellByCellIndex(sCellName, throwException: false);
				if (cellByCellIndex != null)
				{
					EndLogFunction(cellByCellIndex.GetAttribute(sPropertyName));
					return cellByCellIndex.GetAttribute(sPropertyName);
				}
			}
			EndLogFunction("");
			return "";
		}

		[ComVisible(true)]
		public virtual string GetTableTextBetweenTwoCells(string sTableName, string sBeginCell, string sEndCell)
		{
			AlertNotSupportedMember("GetTableTextBetweenTwoCells");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual int GetTableWidth(string strTableName)
		{
			AlertNotSupportedMember("GetTableWidth");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual string GetXmlInfoWithTable(string sTableName, string sTableProp, string sRegionProp, string sSectionProp, string sNewControlProp, string sTableCellProp, string sRev1, string sRev2)
		{
			int num = 4;
			BeginLogFunction("GetXmlInfoWithTable", "sTableName=" + sTableName + " sTableProp=" + sTableProp + " sRegionProp=" + sRegionProp + " sSectionProp=" + sSectionProp + " sNewControlProp=" + sNewControlProp + " sTableCellProp=" + sTableCellProp + " sRev1=" + sRev1 + " sRev2=" + sRev2);
			string text = null;
			if (string.IsNullOrEmpty(sTableName))
			{
				text = GetStructsXmlInfoByParament(null, null, null, null, null);
				EndLogFunction(text);
				return text;
			}
			XTextTableElement xTextTableElement = GetElementById(sTableName) as XTextTableElement;
			xTextTableElement.CreateContentDocument(includeThis: false);
			StringWriter stringWriter = new StringWriter();
			XmlTextWriter xmlTextWriter = new XmlTextWriter(stringWriter);
			xmlTextWriter.WriteStartDocument();
			xmlTextWriter.WriteStartElement("DocObjContent");
			xmlTextWriter.WriteString(" ");
			WriteXMLForGetAllSectAndNewCtrlContentByCurrentDoc(xTextTableElement, xmlTextWriter, sectionReserve: true, sectionText: true, sectionHtml: false, ctlReserve: true, ctlText: true, ctlHtml: false);
			xmlTextWriter.WriteEndElement();
			xmlTextWriter.WriteEndDocument();
			xmlTextWriter.Close();
			text = stringWriter.ToString();
			text = XMLHelper.CleanupXMLHeader(text);
			EndLogFunction(text);
			return text;
		}

		[ComVisible(true)]
		public virtual bool SetTableBorderColor(string sTableName, int nColor)
		{
			AlertNotSupportedMember("SetTableBorderColor");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool SetTableBorderWidth(string sTableName, int nWidth)
		{
			AlertNotSupportedMember("SetTableBorderWidth");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool SetTableCellAlignment(string strTableName, string strCellName, int nAlignType)
		{
			AlertNotSupportedMember("SetTableCellAlignment");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool SetTableCellCustomProperty(string sTableName, string sCellName, string sPropertyName, string sValue)
		{
			int num = 11;
			BeginLogFunction("SetTableCellCustomProperty", "sTableName=" + sTableName + "  sCellName=" + sCellName + "  sPropertyName=" + sPropertyName + "  sValue=" + sValue);
			XTextTableElement xTextTableElement = myEditControl.GetElementById(sTableName) as XTextTableElement;
			if (xTextTableElement != null)
			{
				XTextTableCellElement cellByCellIndex = xTextTableElement.GetCellByCellIndex(sCellName, throwException: false);
				if (cellByCellIndex != null)
				{
					cellByCellIndex.SetAttribute(sPropertyName, sValue);
					EndLogFunction("true");
					return true;
				}
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool SetTableCellWidth(string strTableName, string strTableCell, int nWidth)
		{
			AlertNotSupportedMember("SetTableCellWidth");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool SetTableColWidth(string sTableName, int nWidth, int nIndex)
		{
			AlertNotSupportedMember("SetTableColWidth");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool SetTableRowHeight(string sTableName, int nHeight, int nIndex)
		{
			AlertNotSupportedMember("SetTableRowHeight");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool SetTableWidth(string strTableName, int nWidth)
		{
			AlertNotSupportedMember("SetTableWidth");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual string GetStructAllUserProps(string sStructName)
		{
			AlertNotSupportedMember("GetStructAllUserProps");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual string GetStructLevelAtCurrentCursor()
		{
			AlertNotSupportedMember("GetStructLevelAtCurrentCursor");
			throw new NotSupportedException();
		}

		                                                                    /// <summary>
		                                                                    ///       获取指定区域里面存在的结构名称列表
		                                                                    ///       </summary>
		                                                                    /// <param name="sRegin">区域的名称</param>
		                                                                    /// <param name="lStructType">返回结构的类别1-&gt;Region 2-&gt;数据组	3-&gt;数据元</param>
		                                                                    /// <returns>以”,”隔开的字符串列表</returns>
		[ComVisible(true)]
		public virtual string GetStructNamesByOneRegion(string sRegin, int lStructType)
		{
			int num = 14;
			BeginLogFunction("GetStructNamesByOneRegion", "sRegin=" + sRegin + " lStructType=" + lStructType);
			if (string.IsNullOrEmpty(sRegin))
			{
				EndLogFunction("");
				return "";
			}
			List<string> list = null;
			XTextElement elementById = myEditControl.GetElementById(sRegin);
			if (elementById != null && elementById.Elements.Count > 0)
			{
				list = new List<string>();
				foreach (XTextElement element in elementById.Elements)
				{
					if (lStructType == 1 && IsNsoRegion(element))
					{
						list.Add(element.ID);
					}
					else if (lStructType == 2 && IsNsoSection(element))
					{
						list.Add(element.ID);
					}
					else if (lStructType == 3 && IsNewControl(element))
					{
						list.Add(element.ID);
					}
				}
			}
			if (list != null && list.Count > 0)
			{
				string[] value = list.ToArray();
				string result = string.Join(",", value);
				EndLogFunction(result);
				return result;
			}
			EndLogFunction("");
			return "";
		}

		[ComVisible(true)]
		public virtual int GetStructScreenEndXPoint(string sName)
		{
			BeginLogFunction("GetStructScreenEndXPoint", "sName=" + sName);
			XTextElement elementById = myEditControl.GetElementById(sName);
			if (elementById != null)
			{
				Rectangle elementClientBounds = myEditControl.GetElementClientBounds(elementById);
				Point point = myEditControl.PointToScreen(new Point(elementClientBounds.Right, elementClientBounds.Bottom));
				EndLogFunction(point.X);
				return point.X;
			}
			EndLogFunction(-1);
			return -1;
		}

		[ComVisible(true)]
		public virtual int GetStructScreenEndYPoint(string sName)
		{
			BeginLogFunction("GetStructScreenEndYPoint", "sName=" + sName);
			XTextElement elementById = myEditControl.GetElementById(sName);
			if (elementById != null)
			{
				Rectangle elementClientBounds = myEditControl.GetElementClientBounds(elementById);
				Point point = myEditControl.PointToScreen(new Point(elementClientBounds.Right, elementClientBounds.Bottom));
				EndLogFunction(point.Y);
				return point.Y;
			}
			EndLogFunction(-1);
			return -1;
		}

		[ComVisible(true)]
		public virtual int GetStructScreenStartXPoint(string sName)
		{
			BeginLogFunction("GetStructScreenStartXPoint", "sName=" + sName);
			XTextElement elementById = myEditControl.GetElementById(sName);
			if (elementById != null)
			{
				Rectangle elementClientBounds = myEditControl.GetElementClientBounds(elementById);
				Point point = myEditControl.PointToScreen(new Point(elementClientBounds.Left, elementClientBounds.Top));
				EndLogFunction(point.X);
				return point.X;
			}
			EndLogFunction(-1);
			return -1;
		}

		[ComVisible(true)]
		public virtual int GetStructScreenStartYPoint(string sName)
		{
			BeginLogFunction("GetStructScreenStartYPoint", "sName=" + sName);
			XTextElement elementById = myEditControl.GetElementById(sName);
			if (elementById != null)
			{
				Rectangle elementClientBounds = myEditControl.GetElementClientBounds(elementById);
				Point point = myEditControl.PointToScreen(new Point(elementClientBounds.Left, elementClientBounds.Top));
				EndLogFunction(point.Y);
				return point.Y;
			}
			EndLogFunction(-1);
			return -1;
		}

		[ComVisible(true)]
		public virtual bool SetStructsTextByArray(object lstName, object lstValue)
		{
			int num = 17;
			BeginLogFunction("SetStructsTextByArray", string.Concat("lstName=", lstName, "  lstValue=", lstValue));
			IList list = lstName as IList;
			IList list2 = lstValue as IList;
			if (list == null || list2 == null)
			{
				EndLogFunction("false");
				return false;
			}
			if (list.Count != list2.Count)
			{
				EndLogFunction("false");
				return false;
			}
			int num2 = 0;
			for (int i = 0; i < list.Count; i++)
			{
				XTextElementList elementsById = Document.GetElementsById(Convert.ToString(list[i]));
				if (elementsById != null)
				{
					foreach (XTextElement item in elementsById)
					{
						if (!IsNsoSection(item) && item is XTextInputFieldElement)
						{
							XTextInputFieldElement xTextInputFieldElement = (XTextInputFieldElement)item;
							if (_SupportSuperscript == 0)
							{
								xTextInputFieldElement.EditorTextExt = Convert.ToString(list2[i]);
							}
							else
							{
								SetNewFieldControlText(xTextInputFieldElement, Convert.ToString(list2[i]));
							}
							num2++;
						}
					}
				}
			}
			if (num2 > 0)
			{
				myEditControl.RefreshDocument();
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool SetStructBorderColorByName(string strName, int lColor)
		{
			AlertNotSupportedMember("SetStructBorderColorByName");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual string GetOneFileStructsInfoWithoutOpenedWithStream(object stmFile, string sRev)
		{
			AlertNotSupportedMember("GetOneFileStructsInfoWithoutOpenedWithStream");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual string GetOneFileStructsInfoWithoutOpenedWithString(string base64String, string sRev)
		{
			BeginLogFunction("GetOneFileStructsInfoWithoutOpenedWithString", "base64String=" + base64String + "  sRev=" + sRev);
			EndLogFunction("");
			return "";
		}

		[ComVisible(true)]
		public virtual bool EditStructInProtectedTableCell(string strTableName, string strTableCell, bool bEdit)
		{
			AlertNotSupportedMember("EditStructInProtectedTableCell");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool DeleteStructAllUserProps(string sStructName)
		{
			AlertNotSupportedMember("DeleteStructAllUserProps");
			throw new NotSupportedException();
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       BOOL DeleteStructUserProp(BSTR sStructName,BSTR sProp)
		                                                                    ///              功能描述：
		                                                                    ///       删除掉某一个结构的一个自定义属性
		                                                                    ///              参数：		  
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sStructName	BSTR	结构名	必须	支持区域 数据元 数据组 保护区域
		                                                                    ///       sProp	BSTR	属性名	必须	
		                                                                    ///              返回值：
		                                                                    ///       True
		                                                                    ///       False
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. DeleteStructUserProp (“aaa”,”自定义属性1”)
		                                                                    ///                实现说明：
		                                                                    ///       			目前 结构支持数据元 数据组 保护区域. 区域
		                                                                    ///       </summary>
		                                                                    /// <param name="sStructName">
		                                                                    /// </param>
		                                                                    /// <param name="sProp">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public virtual bool DeleteStructUserProp(string sStructName, string sProp)
		{
			int num = 0;
			BeginLogFunction("DeleteStructUserProp", "sStructName=" + sStructName + "  sProp=" + sProp);
			XTextElement elementById = myEditControl.GetElementById(sStructName);
			if (elementById != null)
			{
				elementById.Attributes.RemoveByName(sProp);
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       获得指定名称控件的类型,1-代表数据组,2–代表数据元,3-代表保护区域,0-表示不存在该结构
		                                                                    ///       </summary>
		                                                                    /// <param name="name">控件名称</param>
		                                                                    /// <returns>控件类型</returns>
		                                                                    /// <remarks>
		                                                                    /// </remarks>
		[ComVisible(true)]
		public int GetStructTypeByName(string name)
		{
			BeginLogFunction("GetStructTypeByName", "name=" + name);
			XTextElement elementById = MyWriterControl.GetElementById(name);
			if (elementById != null)
			{
				if (elementById is XTextInputFieldElement)
				{
					XTextInputFieldElement xTextInputFieldElement = (XTextInputFieldElement)elementById;
					if (xTextInputFieldElement.RuntimeContentReadonly)
					{
						EndLogFunction(3);
						return 3;
					}
					if (IsNsoSection(xTextInputFieldElement))
					{
						EndLogFunction(1);
						return 1;
					}
					EndLogFunction(2);
					return 2;
				}
				if (elementById is XTextCheckBoxElementBase)
				{
					EndLogFunction(2);
					return 2;
				}
			}
			EndLogFunction(0);
			return 0;
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       BOOL SetStructBorderColor (LONG lColor )
		                                                                    ///       功能描述：
		                                                                    ///       设置结构(数据组,数据元)边框颜色
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       lColor	LONG	边框颜色	必须	 0 – 蓝色
		                                                                    ///       1 – 灰色
		                                                                    ///       2 – 红色
		                                                                    ///       3 – 绿色
		                                                                    ///       4 – 黑色
		                                                                    ///       5 – 棕色
		                                                                    ///        6 – 黄色
		                                                                    ///       返回值：
		                                                                    ///       BOOL 
		                                                                    ///       TRUE － 设置成功
		                                                                    ///       FALSE － 设置失败
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. SetStructBorderColor (1) 设置结构的边框颜色为灰色
		                                                                    ///       实现说明：
		                                                                    ///       无
		                                                                    ///       Date:10-12 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="lColor">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool SetStructBorderColor(int lColor)
		{
			int num = 10;
			BeginLogFunction("SetStructBorderColor", "lColor=" + lColor);
			XTextElementList elementsByType = myEditControl.Document.GetElementsByType(typeof(XTextInputFieldElement));
			if (elementsByType != null && elementsByType.Count > 0)
			{
				Color borderElementColor = Color.Black;
				switch (lColor)
				{
				case 0:
					borderElementColor = Color.Blue;
					break;
				case 1:
					borderElementColor = Color.Gray;
					break;
				case 2:
					borderElementColor = Color.Red;
					break;
				case 3:
					borderElementColor = Color.Green;
					break;
				case 4:
					borderElementColor = Color.Black;
					break;
				case 5:
					borderElementColor = Color.Brown;
					break;
				case 6:
					borderElementColor = Color.Yellow;
					break;
				}
				foreach (XTextInputFieldElement item in elementsByType)
				{
					item.BorderElementColor = borderElementColor;
				}
			}
			EndLogFunction("true");
			return true;
		}

		[ComVisible(true)]
		public bool SetStructBorderVisibleByType(int nType, bool bVisible)
		{
			BeginLogFunction("SetStructBorderVisibleByType", "nType=" + nType + "  bVisible=" + bVisible);
			myEditControl.DocumentOptions.ViewOptions.ShowFieldBorderElement = bVisible;
			myEditControl.RefreshDocument();
			EndLogFunction("true");
			return true;
		}

		[ComVisible(true)]
		public void SetCanCopyWithStruct(bool bFlag)
		{
			BeginLogFunction("SetCanCopyWithStruct", "bFlag=" + bFlag);
			myEditControl.DocumentOptions.EditOptions.CopyWithoutInputFieldStructure = !bFlag;
			EndLogFunction(null);
		}

		                                                                    /// <summary>
		                                                                    ///       光标选中某一个结构的所有内容,但是不包括边框(无论边框是否隐藏)
		                                                                    ///       </summary>
		                                                                    /// <param name="sStructName">结构名</param>
		                                                                    /// <returns>True False</returns>
		[ComVisible(true)]
		public virtual bool SelectOneStructContent(string sStructName)
		{
			int num = 1;
			BeginLogFunction("SelectOneStructContent", "sStructName=" + sStructName);
			XTextElement elementById = GetElementById(sStructName);
			if (elementById != null && elementById.Elements.Count > 0)
			{
				XTextInputFieldElement xTextInputFieldElement = elementById as XTextInputFieldElement;
				if (xTextInputFieldElement != null)
				{
					xTextInputFieldElement.SelectWithoutBorderElement();
					EndLogFunction("true");
					return true;
				}
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool SaveStructContentToStream(string sName, ref object stmSave)
		{
			AlertNotSupportedMember("SaveStructContentToStream");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual string SaveStructContentToString(string sName)
		{
			BeginLogFunction("SaveStructContentToString", "sName=" + sName);
			XTextElement elementById = myEditControl.GetElementById(sName);
			if (elementById != null)
			{
				XTextDocument xTextDocument = elementById.CreateContentDocument(includeThis: true);
				if (xTextDocument != null)
				{
					string xMLText = xTextDocument.XMLText;
					byte[] bytes = Encoding.UTF8.GetBytes(xMLText);
					string result = Convert.ToBase64String(bytes);
					EndLogFunction(result);
					return result;
				}
			}
			EndLogFunction("");
			return "";
		}

		[ComVisible(true)]
		public virtual bool ReplaceAllFirstLevelStructsByBackgroundFile(string sBackgroundFile)
		{
			AlertNotSupportedMember("ReplaceAllFirstLevelStructsByBackgroundFile");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool ReplaceAllFirstLevelStructsByBackgroundFileStream(object vBackgroundFile)
		{
			AlertNotSupportedMember("ReplaceAllFirstLevelStructsByBackgroundFileStream");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool ReplaceAllFirstLevelStructsByBackgroundFileString(string sBackgroundString)
		{
			AlertNotSupportedMember("ReplaceAllFirstLevelStructsByBackgroundFileString");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool ReplaceSpecificStructProp(string curStructName, string curStructProp, int nType, string fileURL, string wantedCtrlName, string wantedCtrlProp)
		{
			AlertNotSupportedMember("ReplaceSpecificStructProp");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool ReplaceSpecificStructPropWithBackStream(string curStructName, string curStructProp, int nType, object stmFile, string wantedCtrlName, string wantedCtrlProp)
		{
			AlertNotSupportedMember("ReplaceSpecificStructPropWithBackStream");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool ReplaceSpecificStructPropWithBackString(string curStructName, string curStructProp, int nType, string base64String, string wantedCtrlName, string wantedCtrlProp)
		{
			AlertNotSupportedMember("ReplaceSpecificStructPropWithBackString");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool ReplaceSpecificStructPropWithoutFormat(string curPropertyName, string curPropertyValue, int nType, string fileURL, string wantedPropertylName, string wantedPropertyProp)
		{
			AlertNotSupportedMember("ReplaceSpecificStructPropWithoutFormat");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool ReplaceStructContentWithBackOdt(string strStructNames, string strBackFile)
		{
			AlertNotSupportedMember("ReplaceStructContentWithBackOdt");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool ReplaceStructContentWithBackStream(string strStructNames, object stmFile)
		{
			AlertNotSupportedMember("ReplaceStructContentWithBackStream");
			throw new NotSupportedException();
		}

		                                                                    /// <summary>
		                                                                    ///       判断一个Section或者Newcontrol是否存在页眉页脚中
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">结构名 1 – Section, 2 - NewControl</param>
		                                                                    /// <param name="lStructType">结构类型</param>
		                                                                    /// <returns>-1 ---- 失败 可能结构不存在  0 ---  在页眉页脚中  1  --- 在正文中</returns>
		[ComVisible(true)]
		public virtual int IsStructInMainbody(string sName, int lStructType)
		{
			BeginLogFunction("IsStructInMainbody", "sName=" + sName + " lStructType=" + lStructType);
			XTextElement elementById = GetElementById(sName);
			int num = -1;
			if ((lStructType == 1 && IsNsoSection(elementById)) || (lStructType == 2 && IsNewControl(elementById)))
			{
				num = (int)elementById.DocumentContentElement.PagePartyStyle;
				if (num == 0 || num == 1)
				{
					EndLogFunction(0);
					return 0;
				}
				if (num == 2)
				{
					EndLogFunction(1);
					return 1;
				}
			}
			EndLogFunction(-1);
			return -1;
		}

		[ComVisible(true)]
		public virtual bool CursorJumpOutOfOneStruct(string sStructName, int nMark)
		{
			int num = 18;
			BeginLogFunction("CursorJumpOutOfOneStruct", "sStructName=" + sStructName + "  nMark=" + nMark);
			XTextInputFieldElement xTextInputFieldElement = GetElementById(sStructName) as XTextInputFieldElement;
			if (xTextInputFieldElement != null)
			{
				switch (nMark)
				{
				case 0:
					myEditControl.MoveToPosition(xTextInputFieldElement.StartElement.ViewIndex);
					break;
				case 1:
					myEditControl.MoveToPosition(xTextInputFieldElement.EndElement.ViewIndex + 1);
					break;
				case 2:
					myEditControl.MoveToPosition(xTextInputFieldElement.EndElement.ViewIndex);
					break;
				case 3:
					myEditControl.MoveToPosition(xTextInputFieldElement.StartElement.ViewIndex + 1);
					break;
				}
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool ReplaceStructContentWithBackString(string strStructNames, string base64String)
		{
			int num = 17;
			BeginLogFunction("ReplaceStructContentWithBackString", "strStructNames=" + strStructNames.ToString() + " base64String=" + base64String);
			if (string.IsNullOrEmpty(strStructNames))
			{
				EndLogFunction("false");
				return false;
			}
			if (string.IsNullOrEmpty(base64String))
			{
				EndLogFunction("false");
				return false;
			}
			XTextDocument xTextDocument = new XTextDocument();
			byte[] byte_ = Convert.FromBase64String(base64String);
			if (!InnerOpenDocumentBinary(byte_, xTextDocument))
			{
				EndLogFunction("false");
				return false;
			}
			string[] array = strStructNames.Split(';');
			bool flag = false;
			string[] array2 = array;
			foreach (string text in array2)
			{
				XTextInputFieldElement xTextInputFieldElement = GetElementById(text) as XTextInputFieldElement;
				if (xTextInputFieldElement != null)
				{
					XTextInputFieldElement xTextInputFieldElement2 = xTextDocument.GetElementById(text) as XTextInputFieldElement;
					if (xTextInputFieldElement2 != null)
					{
						xTextInputFieldElement.EditorTextExt = xTextInputFieldElement2.Text;
						flag = true;
					}
				}
			}
			if (flag)
			{
				myEditControl.Document.UndoList.Clear();
				myEditControl.CommandControler.InvalidateCommandState();
				myEditControl.Modified = true;
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public string GetRegionXmlInfo(string aRegionID)
		{
			BeginLogFunction("GetStructsXmlInfo", "aRegionID=" + aRegionID);
			new StringWriter();
			XTextElement elementById = myEditControl.GetElementById(aRegionID);
			string result = null;
			if (elementById != null && IsNsoRegion(elementById))
			{
				XTextSectionElement xTextSectionElement = elementById as XTextSectionElement;
				if (xTextSectionElement != null)
				{
					result = xTextSectionElement.OuterXML;
				}
			}
			else
			{
				result = null;
			}
			EndLogFunction(result);
			return result;
		}

		[ComVisible(true)]
		public string GetStructsXmlInfoByParament(string aSctContType, string aCtrlContType, string sRev1, string sRev2, string sRev3)
		{
			int num = 1;
			BeginLogFunction("GetStructsXmlInfoByParament", "aSctContType=" + aSctContType + "  aCtrlContType=" + aCtrlContType + "  sRev1=" + sRev1 + "  sRev2=" + sRev2 + "  sRev3=" + sRev3);
			float tickCountFloat = CountDown.GetTickCountFloat();
			StringWriter stringWriter = new StringWriter();
			XmlTextWriter xmlTextWriter = new XmlTextWriter(stringWriter);
			xmlTextWriter.WriteStartDocument();
			xmlTextWriter.WriteStartElement("DocObjContent");
			xmlTextWriter.WriteString(" ");
			WriteXMLForGetAllSectAndNewCtrlContentByCurrentDoc(MyWriterControl.Document, xmlTextWriter, sectionReserve: true, sectionText: true, sectionHtml: false, ctlReserve: true, ctlText: true, ctlHtml: false);
			xmlTextWriter.WriteEndElement();
			xmlTextWriter.WriteEndDocument();
			xmlTextWriter.Close();
			string xmlText = stringWriter.ToString();
			xmlText = XMLHelper.CleanupXMLHeader(xmlText);
			tickCountFloat = CountDown.GetTickCountFloat() - tickCountFloat;
			if (myEditControl.DocumentOptions.BehaviorOptions.SpecifyDebugMode)
			{
				MessageBox.Show(this, "GetStructsXmlInfoByParament(" + aSctContType + "," + aCtrlContType + ") 耗时 " + tickCountFloat + " 毫秒");
			}
			EndLogFunction(xmlText);
			return xmlText;
		}

		[ComVisible(true)]
		public virtual string FilterStructsByProp(int nType, string sPropName, string sPropValue, string sRev1, string sRev2)
		{
			BeginLogFunction("FilterStructsByProp", "nType=" + nType + "  sPropName=" + sPropName + "  sPropValue=" + sPropValue + "  sRev1=" + sRev1 + "  sRev2=" + sRev2);
			EndLogFunction(FilterStructsByPropInner(Document.Elements, nType, sPropName, sPropValue, forInsertFile: false));
			return FilterStructsByPropInner(Document.Elements, nType, sPropName, sPropValue, forInsertFile: false);
		}

		private string FilterStructsByPropInner(XTextElementList elements2, int nType, string sPropName, string sPropValue, bool forInsertFile)
		{
			int num = 2;
			StringBuilder stringBuilder = new StringBuilder();
			if (nType == 1)
			{
				XTextElementList elementsByTypeDeeply = elements2.GetElementsByTypeDeeply(typeof(XTextSectionElement));
				if (elementsByTypeDeeply != null)
				{
					foreach (XTextSectionElement item in elementsByTypeDeeply)
					{
						if (IsNsoRegion(item) && DetectFilterStructsByProp(item, sPropName, sPropValue))
						{
							if (stringBuilder.Length > 0)
							{
								stringBuilder.Append(",");
							}
							stringBuilder.Append(item.ID);
						}
					}
				}
				stringBuilder.Append("|");
			}
			XTextElementList elementsByTypeDeeply2 = elements2.GetElementsByTypeDeeply(typeof(XTextInputFieldElement));
			StringBuilder stringBuilder2 = new StringBuilder();
			if (elementsByTypeDeeply2 != null && elementsByTypeDeeply2.Count > 0)
			{
				foreach (XTextInputFieldElement item2 in elementsByTypeDeeply2)
				{
					if (IsNsoSection(item2) && DetectFilterStructsByProp(item2, sPropName, sPropValue))
					{
						if (stringBuilder2.Length > 0)
						{
							stringBuilder2.Append(",");
						}
						stringBuilder2.Append(item2.ID);
					}
				}
			}
			if (forInsertFile)
			{
				stringBuilder2.Append("|");
			}
			else
			{
				stringBuilder2.Append(",");
			}
			StringBuilder stringBuilder3 = new StringBuilder();
			if (elementsByTypeDeeply2 != null && elementsByTypeDeeply2.Count > 0)
			{
				foreach (XTextInputFieldElement item3 in elementsByTypeDeeply2)
				{
					if (IsNewControl(item3) && DetectFilterStructsByProp(item3, sPropName, sPropValue))
					{
						if (stringBuilder3.Length > 0)
						{
							stringBuilder3.Append(",");
						}
						stringBuilder3.Append(item3.ID);
					}
				}
			}
			elementsByTypeDeeply2 = elements2.GetElementsByTypeDeeply(typeof(XTextCheckBoxElementBase));
			if (elementsByTypeDeeply2 != null && elementsByTypeDeeply2.Count > 0)
			{
				foreach (XTextCheckBoxElementBase item4 in elementsByTypeDeeply2)
				{
					if (IsNewControl(item4) && DetectFilterStructsByProp(item4, sPropName, sPropValue))
					{
						if (stringBuilder3.Length > 0)
						{
							stringBuilder3.Append(",");
						}
						stringBuilder3.Append(item4.ID);
					}
				}
			}
			return stringBuilder.ToString() + stringBuilder2.ToString() + stringBuilder3.ToString();
		}

		private bool DetectFilterStructsByProp(XTextElement element, string sPropName, string sPropValue)
		{
			if (!string.IsNullOrEmpty(sPropName))
			{
				if (!element.HasAttribute(sPropName))
				{
					return false;
				}
				if (!string.IsNullOrEmpty(sPropValue) && element.GetAttribute(sPropName) != sPropValue)
				{
					return false;
				}
			}
			return true;
		}

		[ComVisible(true)]
		public virtual bool HasFooter()
		{
			BeginLogFunction("HasFooter", null);
			AlertNotSupportedMember("HasFooter");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BOOL HasHeader(void)
		                                                                    ///       功能描述：
		                                                                    ///       判断当前文档是否含有页眉
		                                                                    ///       参数：无
		                                                                    ///       返回值：True – 有
		                                                                    ///              False – 无
		                                                                    ///       代码示例（VB）：
		                                                                    ///        AxNSOOffice1. HasHeader ()
		                                                                    ///       </summary>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public virtual bool HasHeader()
		{
			int num = 0;
			BeginLogFunction("HasHeader", null);
			if (myEditControl.Document.Header.Elements.Count == 1)
			{
				if (myEditControl.Document.Header.Elements[0] is XTextParagraphFlagElement)
				{
					EndLogFunction("false");
					return false;
				}
				EndLogFunction("false");
				return false;
			}
			if (myEditControl.Document.Header.Elements.Count > 1)
			{
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool HasHeaderByPage(int lPage)
		{
			BeginLogFunction("HasHeaderByPage", "lPage=" + lPage);
			AlertNotSupportedMember("HasHeaderByPage");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool InsertFooter()
		{
			BeginLogFunction("InsertFooter", null);
			Document.Footer.Focus();
			EndLogFunction("true");
			return true;
		}

		[ComVisible(true)]
		public virtual bool InsertHeader()
		{
			BeginLogFunction("InsertHeader", null);
			Document.Header.Focus();
			EndLogFunction("true");
			return true;
		}

		[ComVisible(true)]
		public virtual bool SetFooterDistance(float fDistance)
		{
			BeginLogFunction("SetFooterDistance", "fDistance=" + fDistance);
			AlertNotSupportedMember("SetFooterDistance");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool SetFooterLine()
		{
			BeginLogFunction("SetFooterLine", null);
			AlertNotSupportedMember("SetFooterLine");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool SetFooterText(string strText)
		{
			BeginLogFunction("SetFooterText", "strText=" + strText);
			ContentBuilder contentBuilder = myEditControl.Document.Footer.ContentBuilder;
			contentBuilder.RawClear();
			contentBuilder.AppendTextWithStyle(strText, myEditControl.Document.DefaultStyle);
			myEditControl.Document.Footer.EditorRefreshView();
			EndLogFunction("true");
			return true;
		}

		[ComVisible(true)]
		public virtual bool SetFooterTextEx(string strText, int nParaStyle, string sRev1, string sRev2)
		{
			int num = 1;
			BeginLogFunction("SetFooterTextEx", "strText=" + strText + "nParaStyle=" + nParaStyle + "sRev1=" + sRev1 + "sRev2=" + sRev2);
			if (HasFileOpened() == "-1")
			{
				EndLogFunction("false");
				return false;
			}
			ContentBuilder contentBuilder = myEditControl.Document.Footer.ContentBuilder;
			contentBuilder.RawClear();
			foreach (char c in strText)
			{
				if (c == '$')
				{
					XTextPageInfoElement xTextPageInfoElement = new XTextPageInfoElement();
					xTextPageInfoElement.ValueType = PageInfoValueType.PageIndex;
					xTextPageInfoElement.AutoHeight = true;
					contentBuilder.Append(xTextPageInfoElement);
				}
				else
				{
					XTextCharElement xTextCharElement = new XTextCharElement();
					xTextCharElement.CharValue = c;
					contentBuilder.Append(xTextCharElement);
				}
			}
			XTextParagraphFlagElement xTextParagraphFlagElement = new XTextParagraphFlagElement();
			xTextParagraphFlagElement.OwnerDocument = myEditControl.Document;
			contentBuilder.Append(xTextParagraphFlagElement);
			switch (nParaStyle)
			{
			case 1:
				xTextParagraphFlagElement.Style.Align = DocumentContentAlignment.Left;
				break;
			case 2:
				xTextParagraphFlagElement.Style.Align = DocumentContentAlignment.Center;
				break;
			case 3:
				xTextParagraphFlagElement.Style.Align = DocumentContentAlignment.Right;
				break;
			case 4:
				xTextParagraphFlagElement.Style.Align = DocumentContentAlignment.Justify;
				break;
			}
			myEditControl.Document.Footer.EditorRefreshView();
			EndLogFunction("true");
			return true;
		}

		[ComVisible(true)]
		public virtual bool SetHeaderDistance(float fDistance)
		{
			int num = 16;
			BeginLogFunction("SetHeaderDistance", "fDistance=" + fDistance);
			if (fDistance > 0f)
			{
				if (myEditControl.Document.PageSettings == null)
				{
					myEditControl.Document.PageSettings = new XPageSettings();
					myEditControl.Document.PageSettings.HeaderDistance = (int)fDistance;
				}
				else
				{
					myEditControl.Document.PageSettings.HeaderDistance = (int)fDistance;
				}
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool SetHeaderFooterReadOnly(bool bReadOnly)
		{
			BeginLogFunction("SetHeaderFooterReadOnly", "bReadOnly=" + bReadOnly);
			myEditControl.HeaderFooterReadonly = bReadOnly;
			EndLogFunction("true");
			return true;
		}

		[ComVisible(true)]
		public virtual bool SetHeaderLineVisible()
		{
			BeginLogFunction("SetHeaderLineVisible");
			AlertNotSupportedMember("SetHeaderLineVisible");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool SetHeaderText(string strText)
		{
			int num = 1;
			BeginLogFunction("SetHeaderText", "strText=" + strText);
			try
			{
				myEditControl.Document.Header.Focus();
				myEditControl.ExecuteCommand("InsertString", showUI: false, strText);
				EndLogFunction("true");
				return true;
			}
			catch
			{
				EndLogFunction("false");
				return false;
			}
		}

		[ComVisible(true)]
		public string GetHeaderStructStringByPage(int lPage)
		{
			int num = 17;
			BeginLogFunction("GetHeaderStructStringByPage", "lPage=" + lPage);
			StringBuilder stringBuilder = new StringBuilder();
			XTextElementList allElementsWithoutCharElement = myEditControl.Document.Header.GetAllElementsWithoutCharElement();
			foreach (XTextElement item in allElementsWithoutCharElement)
			{
				if (IsNsoSection(item) || IsNewControl(item))
				{
					stringBuilder.Append(item.ID);
					stringBuilder.Append(",");
				}
			}
			EndLogFunction(stringBuilder.ToString());
			return stringBuilder.ToString();
		}

		                                                                    /// <summary>
		                                                                    ///       为病程记录的科室文本而设置页眉文本.DCWriter特有。
		                                                                    ///       </summary>
		                                                                    /// <param name="newControlID">容纳页眉文本的输入域编号</param>
		                                                                    /// <param name="regionPropertyName">文档节中存储科室文本的属性名</param>
		                                                                    /// <returns>操作是否成功</returns>
		                                                                    /// <example>比如 ctl.SetHeadersTextForCourseRecord("20140818144429","科室")</example>
		[ComVisible(false)]
		public bool SetHeadersTextForCourseRecord(string newControlID, string regionPropertyName)
		{
			if (string.IsNullOrEmpty(regionPropertyName))
			{
				return false;
			}
			XTextElement elementById = Document.Header.GetElementById(newControlID);
			if (elementById == null)
			{
				return false;
			}
			XTextLabelElement xTextLabelElement = null;
			if (elementById is XTextInputFieldElement)
			{
				bool flag = false;
				XTextInputFieldElement xTextInputFieldElement = (XTextInputFieldElement)elementById;
				xTextLabelElement = (xTextInputFieldElement.FirstChild as XTextLabelElement);
				if (xTextLabelElement == null)
				{
					xTextLabelElement = new XTextLabelElement();
					xTextLabelElement.AutoSize = true;
					xTextLabelElement.StyleIndex = xTextInputFieldElement.StyleIndex;
					xTextLabelElement.Text = xTextInputFieldElement.Text;
					xTextLabelElement.StrictMatchPageIndex = true;
					xTextInputFieldElement.Elements.Clear();
					xTextInputFieldElement.AppendChildElement(xTextLabelElement);
					flag = true;
				}
				xTextLabelElement.ContactAction = LabelTextContactActionMode.LastSectionInPage;
				xTextLabelElement.AllowUserEditCurrentPageLabelText = true;
				xTextLabelElement.AttributeNameForContactAction = regionPropertyName;
				if (flag)
				{
					myEditControl.RefreshDocument();
				}
				else
				{
					xTextLabelElement.InvalidateView();
					xTextLabelElement.UpdateContactAction();
				}
				xTextLabelElement.EditorRefreshView();
				return true;
			}
			return false;
		}

		[ComVisible(true)]
		public bool SetHeadersTextByXML(string sHeadXml, string sRev1, string sRev2)
		{
			int num = 18;
			BeginLogFunction("SetHeadersTextByXML", "sHeadXml=" + sHeadXml + "sRev1=" + sRev1 + "sRev2=" + sRev2);
			if (string.IsNullOrEmpty(sHeadXml))
			{
				EndLogFunction("false");
				return false;
			}
			sHeadXml = sHeadXml.Trim();
			XmlDocument xmlDocument = new XmlDocument();
			if (sHeadXml.StartsWith("<"))
			{
				xmlDocument.LoadXml(sHeadXml);
			}
			else
			{
				xmlDocument.Load(sHeadXml);
			}
			XTextElementList elementsByType = myEditControl.Document.Header.GetElementsByType(typeof(XTextInputFieldElement));
			bool flag = false;
			foreach (XmlNode childNode in xmlDocument.DocumentElement.ChildNodes)
			{
				if (childNode.Name == "Page")
				{
					int num2 = Convert.ToInt32(((XmlElement)childNode).GetAttribute("number"));
					foreach (XmlNode childNode2 in childNode.ChildNodes)
					{
						if (childNode2.Name == "StructInfo")
						{
							XmlElement xmlElement = (XmlElement)childNode2;
							string attribute = xmlElement.GetAttribute("Name");
							string attribute2 = xmlElement.GetAttribute("Value");
							foreach (XTextInputFieldElement item in elementsByType)
							{
								if (item.GetAttribute(attribute) == attribute2)
								{
									XTextLabelElement xTextLabelElement = item.FirstChild as XTextLabelElement;
									if (xTextLabelElement == null)
									{
										xTextLabelElement = new XTextLabelElement();
										xTextLabelElement.AutoSize = true;
										xTextLabelElement.StyleIndex = item.StyleIndex;
										xTextLabelElement.Text = item.Text;
										xTextLabelElement.StrictMatchPageIndex = true;
										item.Elements.Clear();
										item.AppendChildElement(xTextLabelElement);
									}
									xTextLabelElement.ContactAction = LabelTextContactActionMode.LastSectionInPage;
									xTextLabelElement.SetPageLabelText(num2 - 1, xmlElement.GetAttribute("Text"));
									flag = true;
								}
							}
						}
					}
				}
			}
			if (flag)
			{
				myEditControl.RefreshDocument();
			}
			EndLogFunction("true");
			return true;
		}

		[ComVisible(true)]
		public virtual string GetHeaderTextByPage(int lPage)
		{
			BeginLogFunction("GetHeaderTextByPage", "lPage=" + lPage);
			AlertNotSupportedMember("GetHeaderTextByPage");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual void DeleteFooter()
		{
			BeginLogFunction("DeleteFooter", null);
			myEditControl.Document.Footer.Clear();
			myEditControl.ClearUndo();
			myEditControl.Document.Footer.EditorRefreshView();
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public virtual void DeleteHeader()
		{
			BeginLogFunction("DeleteHeader", null);
			myEditControl.Document.Header.Clear();
			myEditControl.ClearUndo();
			myEditControl.Document.Header.EditorRefreshView();
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public bool SetPageHeaderDiffFromFront(int nStartPage)
		{
			BeginLogFunction("SetPageHeaderDiffFromFront", "nStartPage=" + nStartPage);
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public void AttachFrameToOneOpenedFile(string classID)
		{
		}

		                                                                    /// <summary>
		                                                                    ///       设置指定NewCheckBox是否选择
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">
		                                                                    /// </param>
		                                                                    /// <param name="sText">
		                                                                    /// </param>
		[ComVisible(true)]
		public void SelectOneMultiCheckboxItemByIndex(string sName, string strIndex, bool isChecked)
		{
			BeginLogFunction("SelectOneMultiCheckboxItemByIndex", "sName=" + sName + "  strIndex=" + strIndex + "  isChecked=" + isChecked);
			AlertNotSupportedMember("SelectOneMultiCheckboxItemByIndex");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public bool StructsBrowseModeBySpecifiedMethod(string data, string data2, int int_0, int color, bool bol2, string data3)
		{
			BeginLogFunction("StructsBrowseModeBySpecifiedMethod", "data=" + data + "  data2=" + data2 + "  p3=" + int_0 + "  color=" + color + "  bol2=" + bol2 + "  data3=" + data3);
			AlertNotSupportedMember("StructsBrowseModeBySpecifiedMethod");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		                                                                    /// <summary>
		                                                                    ///       返回当前光标所在的行号（绝对值）
		                                                                    ///       </summary>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public int GetCurrentAbsoluteRowIndex()
		{
			BeginLogFunction("GetCurrentAbsoluteRowIndex", null);
			EndLogFunction(null);
			return MyWriterControl.CurrentLine.GlobalIndex;
		}

		                                                                    /// <summary>
		                                                                    ///       以XML格式返回当前光标处的区域的父级区域树结构（不包括当前光标处的区域）
		                                                                    ///       </summary>
		                                                                    /// <param name="ID">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public string GetFatherXmlTreeByCurrentRegion(string flag)
		{
			BeginLogFunction("GetFatherXmlTreeByCurrentRegion", "flag=" + flag);
			AlertNotSupportedMember("GetFatherXmlTreeByCurrentRegion");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		                                                                    /// <summary>
		                                                                    ///       设置浏览模式
		                                                                    ///       </summary>
		                                                                    /// <param name="nType">类型</param>
		                                                                    /// <param name="nProtected">保护状态</param>
		[ComVisible(true)]
		public void BrowseTemplet(int nType, int nProtected)
		{
			int num = 17;
			if (!(HasFileOpened() == "-1"))
			{
				BeginLogFunction("BrowseTemplet", "Type=" + nType + " Protected=" + nProtected);
				pnlMainContainer.TopToolStripPanelVisible = false;
				_DesignTemplateMode = false;
				myEditControl.IsAdministrator = false;
				btnPreviewMode.Checked = !myEditControl.IsAdministrator;
				myEditControl.DocumentOptions.EditOptions.ValueValidateMode = DocumentValueValidateMode.LostFocus;
				switch (nProtected)
				{
				case 0:
					ProtectDoc(bProtect: false);
					break;
				case 1:
					ProtectDoc(bProtect: true);
					break;
				}
				switch (nType)
				{
				case 10:
					MyWriterControl.DocumentOptions.ViewOptions.PreserveBackgroundTextWhenPrint = false;
					MyWriterControl.DocumentOptions.ViewOptions.IgnoreFieldBorderWhenPrint = true;
					MyWriterControl.DocumentOptions.ViewOptions.EnableEncryptView = false;
					MyWriterControl.ExecuteCommand("CleanViewMode", showUI: false, null);
					MyWriterControl.DocumentOptions.ViewOptions.ShowLineNumber = false;
					break;
				case 11:
					MyWriterControl.DocumentOptions.ViewOptions.EnableEncryptView = false;
					MyWriterControl.ExecuteCommand("ComplexViewMode", showUI: false, null);
					MyWriterControl.DocumentOptions.ViewOptions.ShowLineNumber = false;
					break;
				case 0:
					MyWriterControl.DocumentOptions.ViewOptions.EnableEncryptView = false;
					MyWriterControl.ExecuteCommand("CleanViewMode", showUI: false, null);
					MyWriterControl.DocumentOptions.ViewOptions.ShowLineNumber = false;
					break;
				case 1:
					MyWriterControl.DocumentOptions.ViewOptions.PreserveBackgroundTextWhenPrint = false;
					MyWriterControl.DocumentOptions.ViewOptions.IgnoreFieldBorderWhenPrint = true;
					MyWriterControl.DocumentOptions.ViewOptions.EnableEncryptView = false;
					MyWriterControl.ExecuteCommand("CleanViewMode", showUI: false, null);
					MyWriterControl.DocumentOptions.ViewOptions.ShowLineNumber = true;
					break;
				case 2:
					MyWriterControl.DocumentOptions.ViewOptions.EnableEncryptView = false;
					MyWriterControl.ExecuteCommand("ComplexViewMode", showUI: false, null);
					MyWriterControl.DocumentOptions.ViewOptions.ShowLineNumber = true;
					break;
				case 3:
					MyWriterControl.DocumentOptions.ViewOptions.EnableEncryptView = true;
					MyWriterControl.ExecuteCommand("CleanViewMode", showUI: false, null);
					MyWriterControl.DocumentOptions.ViewOptions.ShowLineNumber = false;
					break;
				case 30:
					MyWriterControl.DocumentOptions.ViewOptions.EnableEncryptView = false;
					MyWriterControl.ExecuteCommand("ComplexViewMode", showUI: false, null);
					break;
				case 20:
					MyWriterControl.DocumentOptions.ViewOptions.EnableEncryptView = false;
					MyWriterControl.ExecuteCommand("CleanViewMode", showUI: false, null);
					break;
				case 21:
					MyWriterControl.DocumentOptions.ViewOptions.EnableEncryptView = false;
					MyWriterControl.ExecuteCommand("ComplexViewMode", showUI: false, null);
					break;
				}
				myEditControl.Invalidate();
				EndLogFunction(null);
			}
		}

		                                                                    /// <summary>
		                                                                    ///       获得文件属性
		                                                                    ///       </summary>
		                                                                    /// <param name="itemName">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public string GetFileProperty(string itemName)
		{
			BeginLogFunction("GetFileProperty", "itemName=" + itemName);
			if (string.IsNullOrEmpty(itemName))
			{
				EndLogFunction("");
				return "";
			}
			string attribute = myEditControl.Document.GetAttribute(itemName);
			if (attribute == null)
			{
				EndLogFunction("");
				return "";
			}
			EndLogFunction(attribute);
			return attribute;
		}

		                                                                    /// <summary>
		                                                                    ///       设置文件属性
		                                                                    ///       </summary>
		                                                                    /// <param name="ItemName">
		                                                                    /// </param>
		                                                                    /// <param name="Content">
		                                                                    /// </param>
		[ComVisible(true)]
		public void SetFileProperty(string ItemName, string Content)
		{
			BeginLogFunction("SetFileProperty", "ItemName=" + ItemName + "  Content=" + Content);
			myEditControl.Document.SetAttribute(ItemName, Content);
			EndLogFunction(null);
		}

		                                                                    /// <summary>
		                                                                    ///       保护文档
		                                                                    ///       </summary>
		                                                                    /// <param name="bProtect">保护状态</param>
		                                                                    /// <returns>操作是否成功</returns>
		[ComVisible(true)]
		public bool ProtectDoc(bool bProtect)
		{
			int num = 18;
			BeginLogFunction("ProtectDoc", "bProtect=" + bProtect);
			MyWriterControl.Readonly = bProtect;
			if (bProtect)
			{
				myEditControl.ContextMenuStrip = null;
				myEditControl.ContextMenuManager.Enabled = false;
			}
			else
			{
				myEditControl.ContextMenuManager.Enabled = ShowContextMenu;
			}
			EndLogFunction("true");
			return true;
		}

		                                                                    /// <summary>
		                                                                    ///       根据颜色名称获得颜色值
		                                                                    ///       </summary>
		                                                                    /// <param name="colorName">颜色名称</param>
		                                                                    /// <returns>获得的颜色值</returns>
		private Color GetNsoColor(string colorName, Color defaultColor)
		{
			int num = 8;
			BeginLogFunction("GetNsoColor", "colorName=" + colorName + "  defaultColor=" + defaultColor);
			if (colorName == null)
			{
				EndLogFunction(defaultColor);
				return defaultColor;
			}
			colorName = colorName.Trim();
			if (colorName.Length == 0)
			{
				EndLogFunction(defaultColor);
				return defaultColor;
			}
			switch (colorName)
			{
			case "浅红色":
				EndLogFunction(Color.IndianRed);
				return Color.IndianRed;
			case "浅蓝色":
				EndLogFunction(Color.LightBlue);
				return Color.LightBlue;
			case "浅紫红色":
				EndLogFunction(Color.MediumVioletRed);
				return Color.MediumVioletRed;
			case "绿色":
				EndLogFunction(Color.Green);
				return Color.Green;
			case "红色":
				EndLogFunction(Color.Red);
				return Color.Red;
			case "蓝色":
				EndLogFunction(Color.Blue);
				return Color.Blue;
			case "褐色":
				EndLogFunction(Color.Brown);
				return Color.Brown;
			case "棕色":
				EndLogFunction(Color.SaddleBrown);
				return Color.SaddleBrown;
			case "红紫色":
				EndLogFunction(Color.DarkRed);
				return Color.DarkRed;
			case "紫红色":
				EndLogFunction(Color.IndianRed);
				return Color.IndianRed;
			case "青色":
				EndLogFunction(Color.Cyan);
				return Color.Cyan;
			case "蓝绿色":
				EndLogFunction(Color.DarkSlateBlue);
				return Color.DarkSlateBlue;
			case "黑色":
				EndLogFunction(Color.Black);
				return Color.Black;
			case "白色":
				EndLogFunction(Color.White);
				return Color.White;
			default:
				EndLogFunction(ColorTranslator.FromHtml(colorName));
				return ColorTranslator.FromHtml(colorName);
			}
		}

		                                                                    /// <summary>
		                                                                    ///       无意义的接口
		                                                                    ///       </summary>
		                                                                    /// <param name="sFileName">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool RemoveFileFromSofficeBin(string sFileName)
		{
			BeginLogFunction("RemoveFileFromSofficeBin", "sFileName=" + sFileName);
			EndLogFunction("true");
			return true;
		}

		                                                                    /// <summary>
		                                                                    ///       无意义的接口
		                                                                    ///       </summary>
		                                                                    /// <param name="a">
		                                                                    /// </param>
		                                                                    /// <param name="b">
		                                                                    /// </param>
		[ComVisible(true)]
		public void RemoveUnusedFromSofficeBin(int int_0, int int_1)
		{
			BeginLogFunction("RemoveUnusedFromSofficeBin", "a=" + int_0 + "  b=" + int_1);
			EndLogFunction(null);
		}

		                                                                    /// <summary>
		                                                                    ///       执行命令
		                                                                    ///       </summary>
		                                                                    /// <param name="method">命令名称</param>
		                                                                    /// <remarks>
		                                                                    ///       支持的命令有
		                                                                    ///        名称	说明
		                                                                    ///       SuperScript	上标
		                                                                    ///       SubScript	下标
		                                                                    ///       InsertPagebreak	分页
		                                                                    ///       PrintPreview	打印预览
		                                                                    ///       Copy	拷贝
		                                                                    ///       Cut	剪切
		                                                                    ///       Paste	粘贴
		                                                                    ///       InsertPara	换行
		                                                                    ///       SwBackspace	退格
		                                                                    ///       </remarks>
		[ComVisible(true)]
		public void ExecuteMethod(string method)
		{
			int num = 7;
			if (string.IsNullOrEmpty(method))
			{
				return;
			}
			BeginLogFunction("ExecuteMethod", "method=" + method);
			if (method.StartsWith("RegisterCode:"))
			{
				string registerCode = method.Substring("RegisterCode:".Length);
				MyWriterControl.RegisterCode = registerCode;
				return;
			}
			if (method.StartsWith("RegisterCodeFileUrl:"))
			{
				string registerCodeFileUrl = method.Substring("RegisterCodeFileUrl:".Length);
				MyWriterControl.RegisterCodeFileUrl = registerCodeFileUrl;
				return;
			}
			switch (method)
			{
			case "SuperScript":
				MyWriterControl.ExecuteCommand("Superscript", showUI: false, null);
				break;
			case "SubScript":
				MyWriterControl.ExecuteCommand("Subscript", showUI: false, null);
				break;
			case "InsertPagebreak":
				MyWriterControl.ExecuteCommand("InsertPageBreak", showUI: false, null);
				break;
			case "PrintPreview":
				PrintPreview(MyWriterControl.DocumentOptions.ViewOptions.ShowLineNumber);
				break;
			case "Copy":
				MyWriterControl.ExecuteCommand("Copy", showUI: false, null);
				break;
			case "Paste":
				MyWriterControl.ExecuteCommand("Paste", showUI: false, null);
				break;
			case "InsertPara":
				MyWriterControl.ExecuteCommand("InsertParagrahFlag", showUI: false, null);
				break;
			case ".uno:InsertBreak":
				MyWriterControl.ExecuteCommand("InsertPageBreak", showUI: false, null);
				break;
			case ".uno:InsertPara":
				MyWriterControl.ExecuteCommand("InsertLineBreak", showUI: false, null);
				break;
			case ".uno:SuperScript":
				MyWriterControl.ExecuteCommand("Superscript", showUI: false, null);
				break;
			case ".uno:SubScript":
				MyWriterControl.ExecuteCommand("Subscript", showUI: false, null);
				break;
			case ".uno:Delete":
				myEditControl.ExecuteCommand("Delete", showUI: false, null);
				break;
			case "SwBackspace":
			{
				int num2 = myEditControl.Selection.AbsStartIndex - 1;
				if (num2 > 0 && myEditControl.Document.Content[num2] is XTextParagraphFlagElement)
				{
					myEditControl.ExecuteCommand("Backspace", showUI: false, null);
				}
				break;
			}
			case ".uno:SwBackspace":
			{
				int num2 = myEditControl.Selection.AbsStartIndex - 1;
				if (num2 > 0 && myEditControl.Document.Content[num2] is XTextParagraphFlagElement)
				{
					myEditControl.ExecuteCommand("Backspace", showUI: false, null);
				}
				break;
			}
			case ".uno:InsertPagebreak":
				myEditControl.ExecuteCommand("InsertPageBreak", showUI: false, null);
				break;
			case "InsertAnnotation":
				myEditControl.ExecuteCommand("InsertComment", showUI: true, null);
				break;
			case ".uno:ExportToPDF":
			{
				using (SaveFileDialog saveFileDialog = new SaveFileDialog())
				{
					saveFileDialog.Filter = "PDF文件(*.pdf)|*.pdf";
					saveFileDialog.CheckPathExists = true;
					saveFileDialog.OverwritePrompt = true;
					if (saveFileDialog.ShowDialog(this) == DialogResult.OK)
					{
						FileSaveCommandParameter fileSaveCommandParameter = new FileSaveCommandParameter();
						fileSaveCommandParameter.Format = "pdf";
						fileSaveCommandParameter.BackgroundMode = true;
						fileSaveCommandParameter.FileName = saveFileDialog.FileName;
						myEditControl.ExecuteCommand("FileSave", showUI: false, fileSaveCommandParameter);
					}
				}
				break;
			}
			case "SelectAll":
				myEditControl.ExecuteCommand("SelectAll", showUI: false, null);
				break;
			case "InsertPageNumberField":
			{
				XTextPageInfoElement xTextPageInfoElement = new XTextPageInfoElement();
				xTextPageInfoElement.AutoHeight = true;
				xTextPageInfoElement.ValueType = PageInfoValueType.PageIndex;
				myEditControl.ExecuteCommand("InsertPageInfo", showUI: false, xTextPageInfoElement);
				break;
			}
			case "PrintHasWindow":
				myEditControl.ExecuteCommand("FilePrint", showUI: true, null);
				break;
			case "PrintHasNoWindow":
				myEditControl.ExecuteCommand("FilePrint", showUI: false, null);
				break;
			case "NewControlAttr":
			{
				XTextElement currentNewControl = GetCurrentNewControl();
				if (currentNewControl == null)
				{
					return;
				}
				NsoNewControlType nsoNewControlType = NsoNewControlType.None;
				string attribute = currentNewControl.GetAttribute("Type");
				if (!string.IsNullOrEmpty(attribute))
				{
					nsoNewControlType = NsoNewControlType.None;
					nsoNewControlType = NsoNewControlType.None;
					try
					{
						nsoNewControlType = (NsoNewControlType)Enum.Parse(typeof(NsoNewControlType), attribute);
					}
					catch
					{
						nsoNewControlType = NsoNewControlType.None;
					}
					switch (nsoNewControlType)
					{
					case NsoNewControlType.Combox:
					{
						using (dlgInsertListInputField dlgInsertListInputField = new dlgInsertListInputField())
						{
							dlgInsertListInputField.FieldElement = (XTextInputFieldElement)currentNewControl;
							dlgInsertListInputField.Document = Document;
							if (dlgInsertListInputField.ShowDialog(this) == DialogResult.OK)
							{
								dlgInsertListInputField.FieldElement.EditorRefreshView();
							}
						}
						break;
					}
					case NsoNewControlType.ListBox:
					{
						using (dlgInsertListInputField dlgInsertListInputField = new dlgInsertListInputField())
						{
							dlgInsertListInputField.FieldElement = (XTextInputFieldElement)currentNewControl;
							dlgInsertListInputField.Document = Document;
							if (dlgInsertListInputField.ShowDialog(this) == DialogResult.OK)
							{
								dlgInsertListInputField.FieldElement.EditorRefreshView();
							}
						}
						break;
					}
					case NsoNewControlType.TextBox:
					{
						using (dlgInputFieldEditor dlgInputFieldEditor = new dlgInputFieldEditor())
						{
							dlgInputFieldEditor.SourceEventArgs = new ElementPropertiesEditEventArgs();
							dlgInputFieldEditor.SourceEventArgs.Document = myEditControl.Document;
							dlgInputFieldEditor.SourceEventArgs.Element = currentNewControl;
							dlgInputFieldEditor.SourceEventArgs.LogUndo = false;
							dlgInputFieldEditor.SourceEventArgs.Method = ElementPropertiesEditMethod.Edit;
							dlgInputFieldEditor.SourceEventArgs.ParentWindow = this;
							dlgInputFieldEditor.SourceEventArgs.WriterControl = myEditControl;
							if (dlgInputFieldEditor.ShowDialog(this) == DialogResult.OK)
							{
								currentNewControl.EditorRefreshView();
							}
						}
						break;
					}
					case NsoNewControlType.Checkbox:
					{
						using (dlgCheckBoxElementEditor dlgCheckBoxElementEditor = new dlgCheckBoxElementEditor())
						{
							dlgCheckBoxElementEditor.SourceEventArgs = new ElementPropertiesEditEventArgs();
							dlgCheckBoxElementEditor.SourceEventArgs.Document = myEditControl.Document;
							dlgCheckBoxElementEditor.SourceEventArgs.Element = currentNewControl;
							dlgCheckBoxElementEditor.SourceEventArgs.LogUndo = false;
							dlgCheckBoxElementEditor.SourceEventArgs.Method = ElementPropertiesEditMethod.Edit;
							dlgCheckBoxElementEditor.SourceEventArgs.ParentWindow = this;
							dlgCheckBoxElementEditor.SourceEventArgs.WriterControl = myEditControl;
							if (dlgCheckBoxElementEditor.ShowDialog(this) == DialogResult.OK)
							{
								currentNewControl.EditorRefreshView();
							}
						}
						break;
					}
					case NsoNewControlType.NumberBox:
					{
						using (dlgNumBox dlgNumBox = new dlgNumBox())
						{
							dlgNumBox.InputFieldElement = (XTextInputFieldElement)currentNewControl;
							if (dlgNumBox.ShowDialog(this) == DialogResult.OK)
							{
								currentNewControl.EditorRefreshView();
							}
						}
						break;
					}
					case NsoNewControlType.MultiListBox:
					{
						using (dlgInsertListInputField dlgInsertListInputField = new dlgInsertListInputField())
						{
							dlgInsertListInputField.FieldElement = (XTextInputFieldElement)currentNewControl;
							dlgInsertListInputField.Document = Document;
							if (dlgInsertListInputField.ShowDialog(this) == DialogResult.OK)
							{
								dlgInsertListInputField.FieldElement.EditorRefreshView();
							}
						}
						break;
					}
					case NsoNewControlType.MultiCombox:
					{
						using (dlgInsertListInputField dlgInsertListInputField = new dlgInsertListInputField())
						{
							dlgInsertListInputField.FieldElement = (XTextInputFieldElement)currentNewControl;
							dlgInsertListInputField.Document = Document;
							if (dlgInsertListInputField.ShowDialog(this) == DialogResult.OK)
							{
								dlgInsertListInputField.FieldElement.EditorRefreshView();
							}
						}
						break;
					}
					case NsoNewControlType.DateTimeBox:
					{
						using (dlgDateTimeFieldElement dlgDateTimeFieldElement = new dlgDateTimeFieldElement())
						{
							dlgDateTimeFieldElement.InputFieldElement = (XTextInputFieldElement)currentNewControl;
							if (dlgDateTimeFieldElement.ShowDialog(this) == DialogResult.OK)
							{
								dlgDateTimeFieldElement.InputFieldElement.EditorRefreshView();
							}
						}
						break;
					}
					case NsoNewControlType.RadioButton:
					{
						using (dlgCheckBoxElementEditor dlgCheckBoxElementEditor = new dlgCheckBoxElementEditor())
						{
							dlgCheckBoxElementEditor.SourceEventArgs = new ElementPropertiesEditEventArgs();
							dlgCheckBoxElementEditor.SourceEventArgs.Document = myEditControl.Document;
							dlgCheckBoxElementEditor.SourceEventArgs.Element = currentNewControl;
							dlgCheckBoxElementEditor.SourceEventArgs.LogUndo = false;
							dlgCheckBoxElementEditor.SourceEventArgs.Method = ElementPropertiesEditMethod.Edit;
							dlgCheckBoxElementEditor.SourceEventArgs.ParentWindow = this;
							dlgCheckBoxElementEditor.SourceEventArgs.WriterControl = myEditControl;
							if (dlgCheckBoxElementEditor.ShowDialog(this) == DialogResult.OK)
							{
								currentNewControl.EditorRefreshView();
							}
						}
						break;
					}
					case NsoNewControlType.MultiCheckbox:
					{
						using (dlgMultiCheckboxElement dlgMultiCheckboxElement = new dlgMultiCheckboxElement())
						{
							dlgMultiCheckboxElement.InputFieldElement = (XTextInputFieldElement)currentNewControl;
							if (dlgMultiCheckboxElement.ShowDialog(this) == DialogResult.OK)
							{
								currentNewControl.EditorRefreshView();
							}
						}
						break;
					}
					}
				}
				else
				{
					nsoNewControlType = NsoNewControlType.None;
					nsoNewControlType = NsoNewControlType.None;
					NsoNewControlType nsoNewControlType2 = NsoNewControlType.None;
				}
				break;
			}
			default:
				MessageBox.Show(this, "DCWriter.NosControl不支持命令 " + method, "系统错误", MessageBoxButtons.OK, MessageBoxIcon.Hand);
				break;
			case ".uno:TableNumberRecognition":
				break;
			}
			EndLogFunction(null);
		}

		                                                                    /// <summary>
		                                                                    ///       判断文档是否修改了
		                                                                    ///       </summary>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool IsDocModified()
		{
			BeginLogFunction("IsDocModified", null);
			EndLogFunction(MyWriterControl.Modified);
			return MyWriterControl.Modified;
		}

		                                                                    /// <summary>
		                                                                    ///       设置文档已经被修改了
		                                                                    ///       </summary>
		[ComVisible(true)]
		public void SetDocModified()
		{
			BeginLogFunction("SetDocModified", null);
			MyWriterControl.Modified = true;
			InnerRaiseOnNsoFileModifyChanged();
			EndLogFunction(null);
		}

		                                                                    /// <summary>
		                                                                    ///       设置文档已经被修改了
		                                                                    ///       </summary>
		                                                                    /// <param name="modified">修改标记</param>
		                                                                    /// <returns>操作是否成功</returns>
		[ComVisible(true)]
		public bool SetDocModified2(bool modified)
		{
			BeginLogFunction("SetDocModified2", null);
			MyWriterControl.Modified = modified;
			InnerRaiseOnNsoFileModifyChanged();
			EndLogFunction("true");
			return true;
		}

		[ComVisible(true)]
		public string GetSelectText()
		{
			BeginLogFunction("GetSelectText", null);
			EndLogFunction(myEditControl.Document.Selection.Text);
			return myEditControl.Document.Selection.Text;
		}

		[ComVisible(true)]
		public string GetSelectAreaXmlInfoByParament(string aSctContType, string aCtrlContType, string sRev1, string sRev2, string sRev3)
		{
			BeginLogFunction("GetSelectAreaXmlInfoByParament", "aSctContType=" + aSctContType + "  aCtrlContType=" + aCtrlContType + "  sRev1=" + sRev1 + "  sRev2=" + sRev2 + "  sRev3=" + sRev3);
			EndLogFunction("");
			return "";
		}

		[ComVisible(true)]
		public void EnableRedlineReview(bool bShow)
		{
			BeginLogFunction("EnableRedlineReview", "bShow=" + bShow);
			if (bShow)
			{
				myEditControl.CommentVisibility = FunctionControlVisibility.Auto;
				TrackListVisible = FunctionControlVisibility.Visible;
			}
			else
			{
				myEditControl.CommentVisibility = FunctionControlVisibility.Hide;
				TrackListVisible = FunctionControlVisibility.Hide;
				myEditControl.RefreshDocumentExt(refreshSize: false, executeLayout: true);
			}
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public void EditTemplet()
		{
			BeginLogFunction("EditTemplet", null);
			pnlMainContainer.TopToolStripPanelVisible = false;
			myEditControl.ContextMenuManager.Enabled = ShowContextMenu;
			myEditControl.IsAdministrator = false;
			btnPreviewMode.Checked = !myEditControl.IsAdministrator;
			myEditControl.DocumentOptions.BehaviorOptions.EnableEditElementValue = true;
			cmDebug.Visible = false;
			_DesignTemplateMode = false;
			myEditControl.CommandControler.SetCommandUIVisible("ElementProperties", visible: false);
			_ValidateRequireWhenSave = false;
			ProtectDoc(bProtect: false);
			MyWriterControl.ExecuteCommand("CleanViewMode", showUI: false, null);
			myEditControl.Document.Options.EditOptions.ValueValidateMode = DocumentValueValidateMode.LostFocus;
			myEditControl.Document.Options.SecurityOptions.ShowPermissionMark = false;
			myEditControl.Document.Options.BehaviorOptions.EnableElementEvents = true;
			AddFileListener();
			AddKeyListener(0);
			AddMouseListener(0);
			myEditControl.CreationDataFormats = WriterDataFormats.Text;
			myEditControl.AcceptDataFormats = WriterDataFormats.Text;
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public int SearchWithRegularExpression(string aSearchString, string sRev1, string sRev2)
		{
			BeginLogFunction("SearchWithRegularExpression", "aSearchString=" + aSearchString + "  sRev1=" + sRev1 + "  sRev2=" + sRev2);
			if (string.IsNullOrEmpty(aSearchString))
			{
				return 0;
			}
			int num = 0;
			string text = MyWriterControl.Document.Body.Text;
			string[] array = aSearchString.Split('|');
			string[] array2 = array;
			foreach (string value in array2)
			{
				if (text.IndexOf(value, StringComparison.CurrentCultureIgnoreCase) >= 0)
				{
					num++;
				}
			}
			EndLogFunction(num);
			return num;
		}

		[ComVisible(true)]
		public bool SetViewProportion(int nType, int nValue)
		{
			int num = 18;
			BeginLogFunction("SetViewProportion", "nType=" + nType + "  nValue=" + nValue);
			switch (nType)
			{
			case 1:
				myEditControl.ExecuteCommand("Zoom", showUI: false, "auto");
				break;
			case 2:
				myEditControl.ExecuteCommand("Zoom", showUI: false, "100%");
				break;
			case 3:
				myEditControl.ExecuteCommand("Zoom", showUI: false, "100%");
				break;
			case 4:
				myEditControl.ExecuteCommand("Zoom", showUI: false, nValue + "%");
				break;
			}
			EndLogFunction("true");
			return true;
		}

		[ComVisible(true)]
		public void DesignTemplet(bool bContainListener, bool bSelectListener)
		{
			BeginLogFunction("DesignTemplet", "bContainListener=" + bContainListener + "  bSelectListener=" + bSelectListener);
			_DesignTemplateMode = true;
			myEditControl.CommandControler.SetCommandUIVisible("ElementProperties", visible: true);
			_ValidateRequireWhenSave = false;
			pnlMainContainer.TopToolStripPanelVisible = true;
			cmDebug.Visible = true;
			myEditControl.ContextMenuManager.Enabled = ShowContextMenu;
			myEditControl.ExecuteCommand("CleanViewMode", showUI: false, null);
			myEditControl.Document.Options.SecurityOptions.ShowPermissionMark = false;
			EnableRaiseOnNsoKeyPressedEvent = false;
			EnableRaiseOnNsoKeyPressedEvent2 = false;
			myEditControl.CreationDataFormats = WriterDataFormats.All;
			myEditControl.AcceptDataFormats = WriterDataFormats.All;
			myEditControl.IsAdministrator = false;
			btnPreviewMode.Visible = true;
			btnPreviewMode.Checked = !myEditControl.IsAdministrator;
			myEditControl.DocumentOptions.BehaviorOptions.EnableEditElementValue = true;
			RemoveKeyListener();
			myEditControl.Invalidate();
			myEditControl.ExecuteCommand("ClearValueValidateResult", showUI: false, null);
			myEditControl.DocumentOptions.EditOptions.ValueValidateMode = DocumentValueValidateMode.Program;
			myEditControl.DocumentOptions.EditOptions.CopyInTextFormatOnly = false;
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public int GetCurrentRowIndex()
		{
			BeginLogFunction("GetCurrentRowIndex", null);
			EndLogFunction(MyWriterControl.CurrentLineIndexInPage);
			return MyWriterControl.CurrentLineIndexInPage;
		}

		                                                                    /// <summary>
		                                                                    ///       获取选中区域头位置(行号 页码)
		                                                                    ///       </summary>
		                                                                    /// <param name="lType">1 返回的为相对行号 2 返回的为绝对行号</param>
		                                                                    /// <returns>BSTR 型,  空 表示失败,返回类似为“2;12”以分号隔开，分号前为页码，后面为行号</returns>
		[ComVisible(true)]
		public string GetSelectionRangeHeaderLineNumber(int lType)
		{
			int num = 5;
			BeginLogFunction("GetSelectionRangeHeaderLineNumber", "lType=" + lType);
			switch (lType)
			{
			case 1:
			{
				string text = MyWriterControl.CurrentLineOwnerPageIndex.ToString();
				string text2 = MyWriterControl.CurrentLineIndexInPage.ToString();
				string result = string.Join(";", new string[2]
				{
					text,
					text2
				});
				EndLogFunction(result);
				return result;
			}
			default:
				EndLogFunction("");
				return "";
			}
		}

		[ComVisible(true)]
		public int GetRowCount(int pageIndex)
		{
			BeginLogFunction("GetRowCount", "pageIndex=" + pageIndex);
			PrintPage printPage = MyWriterControl.Pages.SafeGet(pageIndex - 1);
			if (printPage != null)
			{
				int num = 0;
				foreach (XTextLine privateLine in MyWriterControl.Document.Body.PrivateLines)
				{
					if (privateLine.OwnerPage == printPage)
					{
						num++;
					}
				}
				EndLogFunction(num);
				return num;
			}
			EndLogFunction(0);
			return 0;
		}

		[ComVisible(true)]
		public bool IsProtectedMode()
		{
			BeginLogFunction("IsProtectedMode", null);
			EndLogFunction(MyWriterControl.Readonly);
			return MyWriterControl.Readonly;
		}

		[ComVisible(true)]
		public int GetPageCount()
		{
			BeginLogFunction("GetPageCount", null);
			EndLogFunction(MyWriterControl.Document.Pages.Count);
			return MyWriterControl.Document.Pages.Count;
		}

		[ComVisible(true)]
		public void InsertLineNumber(bool bViewLineNum, int nOffset, bool bRestartEachPage, bool bCountBlankLines)
		{
			BeginLogFunction("InsertLineNumber", "bViewLineNum=" + bViewLineNum + "  nOffset=" + nOffset + "  bRestartEachPage=" + bRestartEachPage + "  bCountBlankLines=" + bCountBlankLines);
			if (bViewLineNum)
			{
				myEditControl.Document.Options.ViewOptions.ShowLineNumber = true;
				myEditControl.Invalidate();
			}
			else
			{
				myEditControl.Document.Options.ViewOptions.ShowLineNumber = false;
				myEditControl.Invalidate();
			}
			EndLogFunction(null);
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       void ShowGrid ( bool bVisible )
		                                                                    ///       功能描述：
		                                                                    ///       显示或隐藏网格
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       bVisible	BOOL	显示或者隐藏网格	必需	true：表示显示网格
		                                                                    ///       				false：表示隐藏网格
		                                                                    ///       返回值：无
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1.ShowGrid(FALSE)
		                                                                    ///       实现说明：无
		                                                                    ///       Date:10-8 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="bVisible">
		                                                                    /// </param>
		[ComVisible(true)]
		public void ShowGrid(bool bVisible)
		{
			BeginLogFunction("ShowGrid", "bVisible=" + bVisible);
			myEditControl.Document.Options.ViewOptions.ShowGridLine = bVisible;
			myEditControl.Invalidate();
			EndLogFunction(null);
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       BSTR GetSectionText (BSTR sName)
		                                                                    ///       功能描述：
		                                                                    ///       获取 sectoin 区域文本
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sName	BSTR　	名称	必需	
		                                                                    ///       返回值：
		                                                                    ///       BSTR,  section 的文本
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. GetSectionText(“ea1”)
		                                                                    ///       实现说明：
		                                                                    ///       无
		                                                                    ///       Date:10-8 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="name">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public string GetSectionText(string name)
		{
			BeginLogFunction("GetSectionText", "name=" + name);
			string text = null;
			XTextInputFieldElement xTextInputFieldElement = GetElementById(name) as XTextInputFieldElement;
			if (xTextInputFieldElement != null && IsNsoSection(xTextInputFieldElement))
			{
				text = xTextInputFieldElement.Text;
			}
			if (text == null)
			{
				EndLogFunction("");
				return "";
			}
			EndLogFunction(text);
			return text;
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       BOOL GetSelectError ()
		                                                                    ///       功能描述：
		                                                                    ///       判断选择区域是否合法；
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       返回值：
		                                                                    ///       BOOL, True：合法, False：非法
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. GetSelectError ()
		                                                                    ///       实现说明：
		                                                                    ///       无
		                                                                    ///       Date:10-9 Jy
		                                                                    ///       </summary>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool GetSelectError()
		{
			BeginLogFunction("GetSelectError", null);
			bool flag = true;
			foreach (XTextElement element in myEditControl.Document.Selection.CreateDocument(excludeLogicDeleted: true).Body.Elements)
			{
				if (element is XTextInputFieldElement)
				{
					XTextInputFieldElement xTextInputFieldElement = element as XTextInputFieldElement;
					if (!xTextInputFieldElement.ValidateStyle.method_1())
					{
						flag = false;
					}
				}
			}
			EndLogFunction(flag);
			return flag;
		}

		[ComVisible(true)]
		public string GetAllBookmarksName()
		{
			BeginLogFunction("GetAllBookmarksName", null);
			EndLogFunction("");
			return "";
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       Long GetSearchTextCount(BSTR sText)
		                                                                    ///       功能描述：
		                                                                    ///       获取需要搜索文本的总条目数，并高亮选中这些搜索到的文本
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sText	BSTR	待搜索文本	必须	
		                                                                    ///       返回值：
		                                                                    ///       LONG 需要搜索文本的总条目数
		                                                                    ///       0  表示未搜索到相应的文本或者搜索失败 
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. GetSearchTextCount (“王”)
		                                                                    ///       Date:10-11 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="sText">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public int GetSearchTextCount(string sText)
		{
			int num = 17;
			if (sText == null)
			{
				throw new ArgumentNullException("sText");
			}
			BeginLogFunction("GetSearchTextCount", "Text=" + sText);
			SearchReplaceCommandArgs searchReplaceCommandArgs = new SearchReplaceCommandArgs();
			searchReplaceCommandArgs.EnableReplaceString = false;
			searchReplaceCommandArgs.IgnoreCase = false;
			searchReplaceCommandArgs.SearchString = sText;
			GInterface3 gInterface = Document.AppHost.Tools.CreateContentSearchReplacer();
			gInterface.imethod_5(Document);
			gInterface.imethod_10(searchReplaceCommandArgs);
			int matchedCount = searchReplaceCommandArgs.MatchedCount;
			if (matchedCount > 0)
			{
				EndLogFunction(matchedCount);
				return matchedCount;
			}
			EndLogFunction(0);
			return 0;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BOOL SetParaAlignment (LONG nSelectType, LONG AlignmentType )
		                                                                    ///       功能描述：
		                                                                    ///       设置选中区域或者当前光标位置区域或者某一个行号位置的对齐方式
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       nSelectType	LONG	选择类型	必需	-1 表示当前位置或者选中区域
		                                                                    ///       大于0，表示某一行号
		                                                                    ///       AlignmentType	LONG			1 左对齐
		                                                                    ///       2 居中
		                                                                    ///       3 右对齐
		                                                                    ///       4 两端对齐
		                                                                    ///       返回值：
		                                                                    ///       False 表示失败
		                                                                    ///       True 表示成功
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1. SetParaAlignment (-1， 1)
		                                                                    ///       实现说明：	
		                                                                    ///       无
		                                                                    ///       Date:10-11 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="nSelectType">
		                                                                    /// </param>
		                                                                    /// <param name="AlignmentType">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool SetParaAlignment(int nSelectType, int AlignmentType)
		{
			bool flag = false;
			BeginLogFunction("SetParaAlignment", "SelectType=" + nSelectType + " AlignmentType=" + AlignmentType);
			if (nSelectType > 0)
			{
				flag = false;
			}
			else
			{
				XTextElement currentElement = myEditControl.Document.CurrentElement;
				if (currentElement != null)
				{
					switch (AlignmentType)
					{
					case 1:
						currentElement.Style.Align = DocumentContentAlignment.Left;
						break;
					case 2:
						currentElement.Style.Align = DocumentContentAlignment.Center;
						break;
					case 3:
						currentElement.Style.Align = DocumentContentAlignment.Right;
						break;
					case 4:
						currentElement.Style.Align = DocumentContentAlignment.Justify;
						break;
					}
					currentElement.EditorRefreshView();
					flag = true;
				}
				else
				{
					flag = false;
				}
			}
			EndLogFunction(flag);
			return flag;
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       BOOL SetTextWaterMark(BSTR strText,BSTR strFont,LONG lSize,BSTR strColor,BOOL bTrans,LONG lScale,BOOL bItalic)
		                                                                    ///       功能描述：
		                                                                    ///       设置文字水印
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       strText	BSTR	水印文字	必需	
		                                                                    ///       strFont	BSTR	字体名称	必需	传””则默认为宋体，可参考格式工具栏中字体名
		                                                                    ///       lSize	LONG	字体大小	必需	1到500，若设置为0则默认104
		                                                                    ///       strColor	BSTR	字体颜色	必需	参考格式工具栏中字符颜色名
		                                                                    ///       bTrans	BOOL	是否半透明	必需	True 半透明
		                                                                    ///       False 非半透明
		                                                                    ///       lScale	LONG	水印大小比例	必需	1到500，若设置为0则默认100
		                                                                    ///       bItalic	BOOL	字体是否斜体		True  斜体
		                                                                    ///       False 非斜体
		                                                                    ///       返回值：
		                                                                    ///       BOOL
		                                                                    ///       True – 成功 
		                                                                    ///       False – 失败
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. SetTextWaterMark (“水印”,”宋体”,100,”红色”,false,100,true)
		                                                                    ///       实现说明：
		                                                                    ///       该接口必须在有加密狗或授权机制情况下才可以调用
		                                                                    ///       Date:10-11 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="strText">
		                                                                    /// </param>
		                                                                    /// <param name="strFont">
		                                                                    /// </param>
		                                                                    /// <param name="lSize">
		                                                                    /// </param>
		                                                                    /// <param name="strColor">
		                                                                    /// </param>
		                                                                    /// <param name="bTrans">
		                                                                    /// </param>
		                                                                    /// <param name="lScale">
		                                                                    /// </param>
		                                                                    /// <param name="bItalic">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool SetTextWaterMark(string strText, string strFont, int lSize, string strColor, bool bTrans, int lScale, bool bItalic)
		{
			int num = 16;
			BeginLogFunction("SetTextWaterMark", "strText=" + strText + "  strFont=" + strFont + "  lSize=" + lSize + "  strColor=" + strColor + "  bTrans=" + bTrans + "  lScale=" + lScale + "  bItalic=" + bItalic);
			if (!string.IsNullOrEmpty(strText))
			{
				XFontValue xFontValue = new XFontValue();
				xFontValue.Name = strFont;
				xFontValue.Size = lSize;
				if (bItalic)
				{
					xFontValue.Style = FontStyle.Italic;
				}
				myEditControl.Document.PageSettings = new XPageSettings();
				myEditControl.Document.PageSettings.Watermark = new WatermarkInfo();
				myEditControl.Document.PageSettings.Watermark.Font = xFontValue;
				myEditControl.Document.PageSettings.Watermark.Color = ColorTranslator.FromHtml(strColor);
				myEditControl.Document.PageSettings.Watermark.Type = WatermarkType.Text;
				myEditControl.Document.PageSettings.Watermark.Text = strText;
				myEditControl.RefreshDocument();
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       LONG IsDocHasWaterMark( )
		                                                                    ///       功能描述：
		                                                                    ///       判断当前文档是否设置了水印
		                                                                    ///       参数：无
		                                                                    ///       返回值：	LONG
		                                                                    ///       -1		出错
		                                                                    ///       0		没有设置水印
		                                                                    ///       1		设置了文字水印
		                                                                    ///       2		设置了图片水印
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. IsDocHasWaterMark ( )
		                                                                    ///       实现说明：
		                                                                    ///       该接口必须在有加密狗或授权机制情况下才可以调用
		                                                                    ///       Date:10-11 Jy
		                                                                    ///       </summary>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public int IsDocHasWaterMark()
		{
			BeginLogFunction("IsDocHasWaterMark", null);
			EndLogFunction(0);
			return 0;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BOOL DelWaterMark( )
		                                                                    ///       功能描述：
		                                                                    ///       删除当前文档的水印
		                                                                    ///       参数：无
		                                                                    ///       返回值：	BOOL
		                                                                    ///       TRUE  － 成功
		                                                                    ///       FALSE － 失败
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. DelWaterMark ( )
		                                                                    ///       实现说明：
		                                                                    ///       该接口必须在有加密狗或授权机制情况下才可以调用
		                                                                    ///       Date:10-11 Jy
		                                                                    ///       </summary>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool DelWaterMark()
		{
			BeginLogFunction("DelWaterMark", null);
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public bool SetPageFormat(int nPageFormat, float fPageWidth, float fPageHeight, bool bHorOrVer, int nPageLayOut)
		{
			int num = 4;
			BeginLogFunction("SetPageFormat", "nPageFormat=" + nPageFormat + "  fPageWidth=" + fPageWidth + " fPageHeight=" + fPageHeight + " bHorOrVer=" + bHorOrVer + " nPageLayOut=" + nPageLayOut);
			myEditControl.Document.PageSettings.Landscape = bHorOrVer;
			switch (nPageFormat)
			{
			case 3:
				myEditControl.Document.PageSettings.PaperKind = PaperKind.A3;
				break;
			case 4:
				myEditControl.Document.PageSettings.PaperKind = PaperKind.A4;
				break;
			case 11:
				myEditControl.Document.PageSettings.PaperKind = PaperKind.Custom;
				myEditControl.Document.PageSettings.PaperWidth = (int)(GraphicsUnitConvert.Convert((double)fPageWidth * 10.0, GraphicsUnit.Millimeter, GraphicsUnit.Inch) * 100.0);
				myEditControl.Document.PageSettings.PaperHeight = (int)(GraphicsUnitConvert.Convert((double)fPageHeight * 10.0, GraphicsUnit.Millimeter, GraphicsUnit.Inch) * 100.0);
				break;
			}
			myEditControl.RefreshDocument();
			EndLogFunction("true");
			return true;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       Bool SetPageMargin (float fPageLeft,float fPageRight,float fPageTop,float fPageBottom)
		                                                                    ///       功能描述：
		                                                                    ///       设置页面页边距大小。
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       fPageLeft	float	左页边距	必须	单位cm
		                                                                    ///       fPageRight	float	右页边距	必须	单位cm
		                                                                    ///       fPageTop	float	上页边距	必须	单位cm
		                                                                    ///       fPageBottom	float	下页边距	必须	单位cm
		                                                                    ///       返回值：True – 成功
		                                                                    ///       False – 失败
		                                                                    ///       代码示例（VB）： 
		                                                                    ///       AxNSOOffice1. SetPageMargin (3.3 , 3.3 , 2.1,  2.1)
		                                                                    ///       实现说明：单位cm
		                                                                    ///       Date:10-12 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="fPageLeft">
		                                                                    /// </param>
		                                                                    /// <param name="fPageRight">
		                                                                    /// </param>
		                                                                    /// <param name="fPageTop">
		                                                                    /// </param>
		                                                                    /// <param name="fPageBottom">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool SetPageMargin(float fPageLeft, float fPageRight, float fPageTop, float fPageBottom)
		{
			BeginLogFunction("SetPageMargin", "fPageLeft=" + fPageLeft + " fPageRight=" + fPageRight + " fPageTop=" + fPageTop + " fPageBottom=" + fPageBottom);
			myEditControl.Document.PageSettings.LeftMargin = (int)(GraphicsUnitConvert.Convert((double)fPageLeft * 10.0, GraphicsUnit.Millimeter, GraphicsUnit.Inch) * 100.0);
			myEditControl.Document.PageSettings.RightMargin = (int)(GraphicsUnitConvert.Convert((double)fPageRight * 10.0, GraphicsUnit.Millimeter, GraphicsUnit.Inch) * 100.0);
			myEditControl.Document.PageSettings.TopMargin = (int)(GraphicsUnitConvert.Convert((double)fPageTop * 10.0, GraphicsUnit.Millimeter, GraphicsUnit.Inch) * 100.0);
			myEditControl.Document.PageSettings.BottomMargin = (int)(GraphicsUnitConvert.Convert((double)fPageBottom * 10.0, GraphicsUnit.Millimeter, GraphicsUnit.Inch) * 100.0);
			myEditControl.RefreshDocument();
			EndLogFunction("true");
			return true;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       void DelBookmark ( BSTR TagName)
		                                                                    ///       功能描述：
		                                                                    ///       删除指定书签。
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       TagName	BSTR	书签名称	必需	
		                                                                    ///       返回值：无
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1.DelBookmark("aaa")
		                                                                    ///       实现说明：无
		                                                                    ///       Date:10-12 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="TagName">
		                                                                    /// </param>
		[ComVisible(true)]
		public void DelBookmark(string TagName)
		{
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       void SetBookmarkText (BSTR TagName,  BSTR Content)
		                                                                    ///       功能描述：
		                                                                    ///       设置指定书签内容。
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       TagName	BSTR	书签名称	必需	
		                                                                    ///       Content	BSTR	设置到书签中的内容	可选	缺省：为空
		                                                                    ///       返回值：无
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1.SetBookmarkText("aaa","test")
		                                                                    ///       实现说明：
		                                                                    ///       对原来空书签也适用。
		                                                                    ///       Date:10-12 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="TagName">
		                                                                    /// </param>
		                                                                    /// <param name="Content">
		                                                                    /// </param>
		[ComVisible(true)]
		public void SetBookmarkText(string TagName, string Content)
		{
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       void CreateBookmarkAtSelection ( BSTR TagName )
		                                                                    ///       功能描述：
		                                                                    ///       将选定内容创建书签，并赋予指定书签名称。
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       TagName	BSTR	书签名称	必需	
		                                                                    ///       返回值：无
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1.CreateBookmarkAtSelection("aaa")
		                                                                    ///       实现说明：
		                                                                    ///       如果指定的名称已经存在，系统不添加书签，直接返回。
		                                                                    ///       Date:10-12 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="TagName">
		                                                                    /// </param>
		[ComVisible(true)]
		public void CreateBookmarkAtSelection(string TagName)
		{
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BOOL IsCurrentLineEmpty( )
		                                                                    ///       功能描述：
		                                                                    ///       判断当前光标所在的行是否为空行
		                                                                    ///       参数：无
		                                                                    ///       返回值：	BOOL
		                                                                    ///       TRUE – 空行
		                                                                    ///       FALSE － 非空行
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1.IsCurrentLineEmpty ( )
		                                                                    ///       Date:10-14 Jy
		                                                                    ///       </summary>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool IsCurrentLineEmpty()
		{
			int num = 9;
			BeginLogFunction("IsCurrentLineEmpty", null);
			XTextLine currentLine = myEditControl.CurrentLine;
			if (currentLine.Count == 0)
			{
				EndLogFunction("true");
				return true;
			}
			if (currentLine.Count == 1)
			{
				if (currentLine[0] is XTextParagraphFlagElement)
				{
					EndLogFunction("true");
					return true;
				}
				if (currentLine[0] is XTextLineBreakElement)
				{
					EndLogFunction("true");
					return true;
				}
				EndLogFunction("false");
				return false;
			}
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///        Long GetSurplusLinesOfOnePage（LONG lPageNumber）
		                                                                    ///       功能描述：
		                                                                    ///       获取指定页的剩余总行数。
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       lPageNumber	Long	指定的页数	必需	从1开始
		                                                                    ///       返回值: 
		                                                                    ///       获取指定页的剩余总行数。
		                                                                    ///       -1 表示失败
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. GetSurplusLinesOfOnePage (1)
		                                                                    ///       实现说明：如果该页已经满，则会返回0，该接口可以用来判断是否满页
		                                                                    ///       Date:10-14 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="lPageNumber">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public int GetSurplusLinesOfOnePage(int lPageNumber)
		{
			BeginLogFunction("GetSurplusLinesOfOnePage", "lPageNumber=" + lPageNumber);
			float specifyLineHeight = myEditControl.Document.DefaultStyle.DefaultLineHeight + 5f;
			EndLogFunction(myEditControl.GetSurplusLinesOfSpeifyPage(lPageNumber, specifyLineHeight));
			return myEditControl.GetSurplusLinesOfSpeifyPage(lPageNumber, specifyLineHeight);
		}

		[ComVisible(true)]
		public virtual bool BindXMLToODT(string sXMLPath)
		{
			BeginLogFunction("BindXMLToODT", "sXMLPath=" + sXMLPath);
			AlertNotSupportedMember("BindXMLToODT");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual void BrowseWebMode(bool bFlag)
		{
			BeginLogFunction("BrowseWebMode", "bFlag=" + bFlag);
			myEditControl.ExecuteCommand("AutoLineViewMode", showUI: false, null);
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public virtual void ChangePageNumber(int oldNum, int newNum)
		{
			BeginLogFunction("ChangePageNumber", "oldNum=" + oldNum + "  newNum=" + newNum);
			AlertNotSupportedMember("ChangePageNumber");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool ClearCurrentParagraphTabStop()
		{
			BeginLogFunction("ClearCurrentParagraphTabStop", null);
			AlertNotSupportedMember("ClearCurrentParagraphTabStop");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool DisconnectRegionLinks(string sRegionName)
		{
			int num = 15;
			BeginLogFunction("DisconnectRegionLinks", "sRegionName=" + sRegionName);
			if (string.IsNullOrEmpty(sRegionName))
			{
				EndLogFunction("false");
				return false;
			}
			XTextSectionElement xTextSectionElement = myEditControl.GetElementById(sRegionName) as XTextSectionElement;
			if (xTextSectionElement != null)
			{
				if (!string.IsNullOrEmpty(xTextSectionElement.GetAttribute("RegionLinkTargetRegionName")))
				{
					xTextSectionElement.SetAttribute("RegionLinkTargetRegionName", "");
				}
				xTextSectionElement.SetAttribute("RegionLinkRegionState", "false");
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual void EnableEnhanceEditModel(bool bFlag, int nMaxHeight)
		{
			BeginLogFunction("EnableEnhanceEditModel", "bFlag=" + bFlag + "  nMaxHeight=" + nMaxHeight);
			AlertNotSupportedMember("EnableEnhanceEditModel");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual void EnableKey(string strKeyName)
		{
			BeginLogFunction("EnableKey", "strKeyName=" + strKeyName);
			AlertNotSupportedMember("EnableKey");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool EnableNavigator(bool bShow)
		{
			BeginLogFunction("EnableNavigator", "bShow=" + bShow);
			AlertNotSupportedMember("EnableNavigator");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual void EnableViewEnhancedMode(bool bFlag)
		{
			BeginLogFunction("EnableViewEnhancedMode", "bFlag=" + bFlag);
			AlertNotSupportedMember("EnableViewEnhancedMode");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool ExistsBookmark(string name)
		{
			BeginLogFunction("ExistsBookmark", "name=" + name);
			AlertNotSupportedMember("ExistsBookmark");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual void ExportBMPByIndex(string rURL, int lPageStart, int lPageEnd)
		{
			int num = 4;
			BeginLogFunction("ExportBMPByIndex", "rURL=" + rURL + "  lPageStart=" + lPageStart + "  lPageEnd=" + lPageEnd);
			string text = null;
			for (int i = lPageStart; i < lPageEnd + 1; i++)
			{
				text = Path.Combine(rURL, i + ".bmp");
				myEditControl.Document.SavePageImageFile(i, text);
			}
			EndLogFunction(lPageEnd + 1 - lPageStart);
		}

		[ComVisible(true)]
		public virtual void ForceStructsBorderVisible(bool bVisible)
		{
			BeginLogFunction("ForceStructsBorderVisible", "bVisible=" + bVisible);
			AlertNotSupportedMember("ForceStructsBorderVisible");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual string GetAllFileProperty(string sRev)
		{
			BeginLogFunction("GetAllFileProperty", "sRev=" + sRev);
			AlertNotSupportedMember("GetAllFileProperty");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual string GetAllParaProtectNamesByCurrentDoc()
		{
			BeginLogFunction("GetAllParaProtectNamesByCurrentDoc", null);
			AlertNotSupportedMember("GetAllParaProtectNamesByCurrentDoc");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual string GetAllProtectAreaNameByCurrentDoc()
		{
			BeginLogFunction("GetAllProtectAreaNameByCurrentDoc", null);
			AlertNotSupportedMember("GetAllProtectAreaNameByCurrentDoc");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual int GetBlankLineCountOfPage(ushort iPage)
		{
			BeginLogFunction("GetBlankLineCountOfPage", "iPage=" + iPage);
			AlertNotSupportedMember("GetBlankLineCountOfPage");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual string GetBookmarkText(string tagName)
		{
			BeginLogFunction("GetBookmarkText", "tagName=" + tagName);
			AlertNotSupportedMember("GetBookmarkText");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual string GetContentFileFromOneOdt(string strName)
		{
			BeginLogFunction("GetContentFileFromOneOdt", "strName=" + strName);
			AlertNotSupportedMember("GetContentFileFromOneOdt");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual string GetControlVersion()
		{
			BeginLogFunction("GetControlVersion", null);
			EndLogFunction(myEditControl.ProductVersion);
			return myEditControl.ProductVersion;
		}

		[ComVisible(true)]
		public virtual string GetCurrentCharInfo()
		{
			BeginLogFunction("GetCurrentCharInfo", null);
			AlertNotSupportedMember("GetCurrentCharInfo");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual string GetCurrentPageStyle()
		{
			BeginLogFunction("GetCurrentPageStyle", null);
			AlertNotSupportedMember("GetCurrentPageStyle");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual string GetCurrentPostilInfo()
		{
			BeginLogFunction("GetCurrentPostilInfo", null);
			AlertNotSupportedMember("GetCurrentPostilInfo");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual int GetCursorDistanceToPageTop()
		{
			BeginLogFunction("GetCursorDistanceToPageTop", null);
			if (Document.CurrentContentPartyStyle == PageContentPartyStyle.Body)
			{
				XTextElement currentElement = Document.CurrentElement;
				float vValue = currentElement.AbsTop - currentElement.OwnerLine.OwnerPage.Top;
				int num = (int)((double)GraphicsUnitConvert.Convert(vValue, Document.DocumentGraphicsUnit, GraphicsUnit.Millimeter) * 10.0);
				EndLogFunction(num);
				return num;
			}
			EndLogFunction(0);
			return 0;
		}

		[ComVisible(true)]
		public virtual int GetCursorLoction()
		{
			BeginLogFunction("GetCursorLoction", null);
			AlertNotSupportedMember("GetCursorLoction");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool GetDocProp(string propName)
		{
			BeginLogFunction("GetDocProp", "propName=" + propName);
			AlertNotSupportedMember("GetDocProp");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual int GetDragMode()
		{
			BeginLogFunction("GetDragMode", null);
			AlertNotSupportedMember("GetDragMode");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual int GetDynamicGridLineColor()
		{
			BeginLogFunction("GetDynamicGridLineColor", null);
			AlertNotSupportedMember("GetDynamicGridLineColor");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BSTR GetEndDateTime (BSTR sName)
		                                                                    ///       功能描述：
		                                                                    ///       获取指定名称日期框的截止日期时间
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sName	BSTR	DateTimeBox的名称	必须	
		                                                                    ///       返回值： 
		                                                                    ///       指定名称日期框的截止日期时间,如：“2010-01-29 14:45”
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNsoControl1.GetEndDateTime ("date1")
		                                                                    ///       实现说明：
		                                                                    ///       无
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public virtual string GetEndDateTime(string sName)
		{
			BeginLogFunction("GetEndDateTime", "sName=" + sName);
			XTextInputFieldElement xTextInputFieldElement = GetElementById(sName) as XTextInputFieldElement;
			if (xTextInputFieldElement != null)
			{
				int num;
				if (xTextInputFieldElement.ValidateStyle != null)
				{
					_ = xTextInputFieldElement.ValidateStyle.DateTimeMaxValue;
					num = 0;
				}
				else
				{
					num = 1;
				}
				if (num == 0)
				{
					EndLogFunction(xTextInputFieldElement.ValidateStyle.DateTimeMaxValue.ToString());
					return xTextInputFieldElement.ValidateStyle.DateTimeMaxValue.ToString();
				}
				EndLogFunction("");
				return "";
			}
			EndLogFunction("");
			return "";
		}

		                                                                    /// <summary>
		                                                                    ///       获取指定名称区域的最近的父级区域的名称
		                                                                    ///       </summary>
		                                                                    /// <param name="strName">区域名称</param>
		                                                                    /// <returns>指定名称区域的最近的父级区域的名称</returns>
		[ComVisible(true)]
		public virtual string GetFatherRegionName(string strName)
		{
			BeginLogFunction("GetFatherRegionName", "strName=" + strName);
			XTextElement elementById = GetElementById(strName);
			if (elementById == null)
			{
				EndLogFunction("");
				return "";
			}
			XTextElement parent = elementById.Parent;
			while (true)
			{
				if (parent != null)
				{
					if (IsNsoRegion(parent))
					{
						break;
					}
					parent = parent.Parent;
					continue;
				}
				EndLogFunction("");
				return "";
			}
			EndLogFunction(parent.ID);
			return parent.ID;
		}

		[ComVisible(true)]
		public virtual string GetFatherRegionNameOfOneStruct(string sStructsName)
		{
			BeginLogFunction("GetFatherRegionNameOfOneStruct", "sStructsName=" + sStructsName);
			XTextElement elementById = GetElementById(sStructsName);
			XTextElement xTextElement = elementById;
			while (true)
			{
				if (xTextElement != null)
				{
					if (IsNsoRegion(xTextElement))
					{
						break;
					}
					xTextElement = xTextElement.Parent;
					continue;
				}
				EndLogFunction("");
				return "";
			}
			EndLogFunction(xTextElement.ID);
			return xTextElement.ID;
		}

		[ComVisible(true)]
		public virtual string GetFatherSectionName(string strName)
		{
			BeginLogFunction("GetFatherSectionName", "strName=" + strName);
			XTextElement elementById = GetElementById(strName);
			XTextElement parent = elementById.Parent;
			while (true)
			{
				if (parent != null)
				{
					if (IsNsoSection(parent))
					{
						break;
					}
					parent = parent.Parent;
					continue;
				}
				EndLogFunction(null);
				return "";
			}
			EndLogFunction(parent.ID);
			return parent.ID;
		}

		[ComVisible(true)]
		public virtual string GetFileTitle()
		{
			BeginLogFunction("GetFileTitle", null);
			AlertNotSupportedMember("GetFileTitle");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		public virtual string GetFirstLevelRegionNames()
		{
			int num = 4;
			BeginLogFunction("GetFirstLevelRegionNames", null);
			StringBuilder stringBuilder = new StringBuilder();
			foreach (XTextElement element in myEditControl.Document.Body.Elements)
			{
				if (IsNsoRegion(element))
				{
					stringBuilder.Append(element.ID);
					stringBuilder.Append(",");
				}
			}
			EndLogFunction(stringBuilder.ToString());
			return stringBuilder.ToString();
		}

		[ComVisible(true)]
		public virtual string GetFirstLevelSectionName()
		{
			BeginLogFunction("GetFirstLevelSectionName", null);
			AlertNotSupportedMember("GetFirstLevelSectionName");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual string GetFirstLevelStructNames(int nType)
		{
			BeginLogFunction("GetFirstLevelStructNames", "nType=" + nType);
			AlertNotSupportedMember("GetFirstLevelStructNames");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual int GetFontProp(string propName)
		{
			BeginLogFunction("GetFontProp", "propName=" + propName);
			AlertNotSupportedMember("GetFontProp");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual int GetInsertMode()
		{
			BeginLogFunction("GetInsertMode", null);
			AlertNotSupportedMember("GetInsertMode");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual string GetLastCharInfoBeforeCurLine()
		{
			BeginLogFunction("GetLastCharInfoBeforeCurLine", null);
			AlertNotSupportedMember("GetLastCharInfoBeforeCurLine");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual string GetOfficeInstallPath(short edition)
		{
			BeginLogFunction("GetOfficeInstallPath", "edition=" + edition);
			AlertNotSupportedMember("GetOfficeInstallPath");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual string GetOfficeVersion()
		{
			BeginLogFunction("GetOfficeVersion", null);
			AlertNotSupportedMember("GetOfficeVersion");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual string GetOneFileStructsInfoWithoutOpened(string sFileName, string sRev)
		{
			BeginLogFunction("GetOneFileStructsInfoWithoutOpened", "sFileName=" + sFileName + " sRev=" + sRev);
			AlertNotSupportedMember("GetOneFileStructsInfoWithoutOpened");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual string GetOneRangeMd5()
		{
			BeginLogFunction("GetOneRangeMd5", null);
			AlertNotSupportedMember("GetOneRangeMd5");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual string GetOpenedDocumentList()
		{
			BeginLogFunction("GetOpenedDocumentList", null);
			AlertNotSupportedMember("GetOpenedDocumentList");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual int GetParagraphProp(string propName)
		{
			int num = 11;
			BeginLogFunction("GetParagraphProp", "propName=" + propName);
			int num2 = -1;
			if (propName != null && propName == "BreakType")
			{
				num2 = ((myEditControl.Document.CurrentElement is XTextPageBreakElement) ? 4 : 0);
				EndLogFunction(num2);
				return num2;
			}
			EndLogFunction(num2);
			return num2;
		}

		[ComVisible(true)]
		public virtual string GetParaLineSpacing()
		{
			BeginLogFunction("GetParaLineSpacing", null);
			AlertNotSupportedMember("GetParaLineSpacing");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual string GetPreviousCharInfo()
		{
			BeginLogFunction("GetPreviousCharInfo", null);
			AlertNotSupportedMember("GetPreviousCharInfo");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual string GetPrinterName()
		{
			BeginLogFunction("GetPrinterName", null);
			string globalDefaultPrinterName = WriterControl.GlobalDefaultPrinterName;
			if (string.IsNullOrEmpty(globalDefaultPrinterName))
			{
				EndLogFunction(null);
				return "";
			}
			EndLogFunction(globalDefaultPrinterName);
			return globalDefaultPrinterName;
		}

		[ComVisible(true)]
		public virtual string GetSecretInfoFromOneStruct(string sStructName)
		{
			BeginLogFunction("GetSecretInfoFromOneStruct", "sStructName=" + sStructName);
			AlertNotSupportedMember("GetSecretInfoFromOneStruct");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual int GetSelectionEndAtCurrentPage()
		{
			BeginLogFunction("GetSelectionEndAtCurrentPage", null);
			AlertNotSupportedMember("GetSelectionEndAtCurrentPage");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual int GetSelectionStartAtCurrentPage()
		{
			BeginLogFunction("GetSelectionStartAtCurrentPage", null);
			AlertNotSupportedMember("GetSelectionStartAtCurrentPage");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual string GetStartDateTime(string sName)
		{
			BeginLogFunction("GetStartDateTime", "sName=" + sName);
			XTextInputFieldElement xTextInputFieldElement = GetElementById(sName) as XTextInputFieldElement;
			if (xTextInputFieldElement != null)
			{
				int num;
				if (xTextInputFieldElement.ValidateStyle != null)
				{
					_ = xTextInputFieldElement.ValidateStyle.DateTimeMinValue;
					num = 0;
				}
				else
				{
					num = 1;
				}
				if (num == 0)
				{
					EndLogFunction(xTextInputFieldElement.ValidateStyle.DateTimeMinValue.ToString());
					return xTextInputFieldElement.ValidateStyle.DateTimeMinValue.ToString();
				}
				EndLogFunction("");
				return "";
			}
			EndLogFunction("");
			return "";
		}

		[ComVisible(true)]
		public virtual int GetStatusAfterMerged()
		{
			BeginLogFunction("GetStatusAfterMerged", null);
			EndLogFunction(null);
			return _Value_GetStatusAfterMerged;
		}

		[ComVisible(true)]
		public virtual string GetTextBetweenTwoStructs(string sStartName, string sEndName)
		{
			BeginLogFunction("GetTextBetweenTwoStructs", "sStartName=" + sStartName + "  sEndName=" + sEndName);
			AlertNotSupportedMember("GetTextBetweenTwoStructs");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual int GetTextBoxMaxLen(string sName)
		{
			BeginLogFunction("GetTextBoxMaxLen", "sName=" + sName);
			XTextInputFieldElement xTextInputFieldElement = (XTextInputFieldElement)Document.GetElementById(sName);
			if (xTextInputFieldElement != null && xTextInputFieldElement.ValidateStyle != null)
			{
				EndLogFunction(xTextInputFieldElement.ValidateStyle.MaxLength);
				return xTextInputFieldElement.ValidateStyle.MaxLength;
			}
			EndLogFunction(-1);
			return -1;
		}

		[ComVisible(true)]
		public virtual string GetTextFromDocument()
		{
			BeginLogFunction("GetTextFromDocument", null);
			EndLogFunction(myEditControl.Document.Text);
			return myEditControl.Document.Text;
		}

		[ComVisible(true)]
		public virtual bool HasSofficeBin()
		{
			BeginLogFunction("HasSofficeBin", null);
			AlertNotSupportedMember("HasSofficeBin");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool IsCurrentLineOverHalfLine()
		{
			BeginLogFunction("IsCurrentLineOverHalfLine", null);
			AlertNotSupportedMember("IsCurrentLineOverHalfLine");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool IsCursorAfterLastViewCharLine()
		{
			BeginLogFunction("IsCursorAfterLastViewCharLine", null);
			AlertNotSupportedMember("IsCursorAfterLastViewCharLine");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool IsCursorAfterLastViewCharPage()
		{
			BeginLogFunction("IsCursorAfterLastViewCharPage", null);
			AlertNotSupportedMember("IsCursorAfterLastViewCharPage");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool IsCursorBeforeFirstViewCharLine()
		{
			BeginLogFunction("IsCursorBeforeFirstViewCharLine", null);
			AlertNotSupportedMember("IsCursorBeforeFirstViewCharLine");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool IsInPrintPreView()
		{
			BeginLogFunction("IsInPrintPreView", null);
			EndLogFunction(pnlPrintPreview.Visible);
			return pnlPrintPreview.Visible;
		}

		[ComVisible(true)]
		public virtual bool IsIntellectiveInputOn()
		{
			BeginLogFunction("IsIntellectiveInputOn", null);
			EndLogFunction(myEditControl.DocumentOptions.BehaviorOptions.AutoAssistInsertString);
			return myEditControl.DocumentOptions.BehaviorOptions.AutoAssistInsertString;
		}

		[ComVisible(true)]
		public virtual bool IsLineNumberOn()
		{
			BeginLogFunction("IsLineNumberOn", null);
			EndLogFunction(myEditControl.DocumentOptions.ViewOptions.ShowLineNumber);
			return myEditControl.DocumentOptions.ViewOptions.ShowLineNumber;
		}

		[ComVisible(true)]
		public virtual bool IsRegionTitleVisible(string strName)
		{
			BeginLogFunction("IsRegionTitleVisible", "strName=" + strName);
			AlertNotSupportedMember("IsRegionTitleVisible");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool KillSofficeBin()
		{
			BeginLogFunction("KillSofficeBin", null);
			AlertNotSupportedMember("KillSofficeBin");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool LimitNumOfPasteCharacters(bool bLimit, int nCharacters)
		{
			BeginLogFunction("KillSofficeBin", "bLimit=" + bLimit + "  nCharacters=" + nCharacters);
			AlertNotSupportedMember("LimitNumOfPasteCharacters");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool RemoveNewFilesFromSofficeBin()
		{
			BeginLogFunction("RemoveNewFilesFromSofficeBin", null);
			AlertNotSupportedMember("RemoveNewFilesFromSofficeBin");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool ReplaceTextInOdt(string strSearch, string strReplace)
		{
			BeginLogFunction("ReplaceTextInOdt", "strSearch=" + strSearch + "  strReplace=" + strReplace);
			AlertNotSupportedMember("ReplaceTextInOdt");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual void SelectionToTop()
		{
			BeginLogFunction("SelectionToTop", null);
			AlertNotSupportedMember("SelectionToTop");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool SelectOneAreaByAbsoluteLine(int lBeginRow, int lEndRow)
		{
			BeginLogFunction("SelectOneAreaByAbsoluteLine", "lBeginRow=" + lBeginRow + "  lEndRow=" + lEndRow);
			AlertNotSupportedMember("SelectOneAreaByAbsoluteLine");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		                                                                    /// <summary>
		                                                                    ///       设置所有的批注是否可以编辑 是否可以删除
		                                                                    ///       </summary>
		                                                                    /// <param name="sPropertyName">批注的属性名</param>
		                                                                    /// <param name="bValue">属性值</param>
		                                                                    /// <returns>TRUE 成功 FALSE 失败</returns>
		[ComVisible(true)]
		public virtual bool SetAllPostilsProperty(string sPropertyName, bool bValue)
		{
			int num = 11;
			BeginLogFunction("SetAllPostilsProperty", "sPropertyName=" + sPropertyName + "  bValue=" + bValue);
			if (!string.IsNullOrEmpty(sPropertyName))
			{
				if (sPropertyName == "PostilCanDelete")
				{
					bool result = myEditControl.SetCommandEnabled("DeleteAllComment", bValue);
					EndLogFunction(result.ToString());
					return result;
				}
				if (sPropertyName == "PostilCanModify")
				{
					bool result = myEditControl.SetCommandEnabled("EditComment", bValue);
					EndLogFunction(result.ToString());
					return result;
				}
			}
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       屏蔽界面上批注的一些UI
		                                                                    ///       </summary>
		                                                                    /// <param name="s1">审阅窗格底部的 删除批注 选项 1 屏蔽,0 打开</param>
		                                                                    /// <param name="s2">批注窗口的小三角按钮跟批注窗口的右键菜单 1 屏蔽 0 打开</param>
		[ComVisible(true)]
		public virtual void DisablePostilUI(int int_0, int int_1)
		{
			BeginLogFunction("DisablePostilUI", "s1=" + int_0 + " s2=" + int_1);
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public virtual bool SetCanDelCtrlDirectlyByKey(bool bCan)
		{
			BeginLogFunction("SetCanDelCtrlDirectlyByKey", "bCan=" + bCan);
			AlertNotSupportedMember("SetCanDelCtrlDirectlyByKey");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool SetCopyWithRegionStruct(string sName, bool bWithRegionStruct)
		{
			int num = 15;
			BeginLogFunction("SetCopyWithRegionStruct", "sName=" + sName + "  bWithRegionStruct=" + bWithRegionStruct);
			if (bWithRegionStruct)
			{
				myEditControl.AcceptDataFormats = WriterDataFormats.All;
				EndLogFunction("true");
			}
			else
			{
				myEditControl.AcceptDataFormats = WriterDataFormats.Text;
				EndLogFunction("true");
			}
			EndLogFunction(null);
			return false;
		}

		[ComVisible(true)]
		public virtual int SetCursorDistanceToPageTop(int sDistance)
		{
			BeginLogFunction("SetCursorDistanceToPageTop", "sDistance=" + sDistance);
			AlertNotSupportedMember("SetCursorDistanceToPageTop");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool SetDocDefaultAsianFont(string sFontName, float fFontSize)
		{
			BeginLogFunction("SetDocDefaultAsianFont", "sFontName=" + sFontName + "  fFontSize=" + fFontSize);
			AlertNotSupportedMember("SetDocDefaultAsianFont");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool SetDocDefaultWestFont(string sFontName, float fFontSize)
		{
			BeginLogFunction("SetDocDefaultWestFont", "sFontName=" + sFontName + "  fFontSize=" + fFontSize);
			AlertNotSupportedMember("SetDocDefaultWestFont");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		[DefaultValue(false)]
		public virtual bool DocRegionLinkRegion(string strSourceRegion)
		{
			int num = 16;
			XTextSectionElement xTextSectionElement = myEditControl.GetElementById(strSourceRegion) as XTextSectionElement;
			string attribute = xTextSectionElement.GetAttribute("RegionLinkTargetRegionName");
			XTextSectionElement xTextSectionElement2 = myEditControl.GetElementById(attribute) as XTextSectionElement;
			if (xTextSectionElement == null || xTextSectionElement2 == null)
			{
				EndLogFunction("false");
				return false;
			}
			string attribute2 = xTextSectionElement.GetAttribute("RegionLinkRegionState");
			if (bool.Parse(attribute2))
			{
				XTextDocument xTextDocument = new XTextDocument();
				xTextDocument = xTextSectionElement2.CreateContentDocument(includeThis: false);
				xTextSectionElement.Clear();
				xTextSectionElement.ContentBuilder.AppendDocumentContent(xTextDocument, removeLogicDeletedContent: false, clearUserTrack: false, removeComments: false, deleteRedundant: true);
				xTextSectionElement.ContentReadonly = ContentReadonlyState.True;
				xTextSectionElement.EditorRefreshView();
				myEditControl.RefreshDocument();
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool SetDocRegionLinkRegion(string strSourceRegion, string strNamedRegion)
		{
			int num = 10;
			BeginLogFunction("SetDocRegionLinkRegion", "strSourceRegion=" + strSourceRegion + "  strNamedRegion=" + strNamedRegion);
			if (string.IsNullOrEmpty(strSourceRegion) || string.IsNullOrEmpty(strNamedRegion))
			{
				EndLogFunction("false");
				return false;
			}
			XTextSectionElement xTextSectionElement = myEditControl.GetElementById(strSourceRegion) as XTextSectionElement;
			XTextSectionElement xTextSectionElement2 = myEditControl.GetElementById(strNamedRegion) as XTextSectionElement;
			if (xTextSectionElement != null && xTextSectionElement2 != null)
			{
				xTextSectionElement.SetAttribute("RegionLinkTargetRegionName", strNamedRegion);
				xTextSectionElement.SetAttribute("RegionLinkRegionState", "true");
				if (DocRegionLinkRegion(strSourceRegion))
				{
					EndLogFunction("true");
					return true;
				}
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool SetDocSpaceByParam(int lLineSpacing)
		{
			BeginLogFunction("SetDocSpaceByParam", "lLineSpacing=" + lLineSpacing);
			AlertNotSupportedMember("SetDocSpaceByParam");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool SetDragMode(int lMode)
		{
			bool flag = true;
			BeginLogFunction("SetDragMode", "Mode=" + lMode);
			if (lMode == 0)
			{
				myEditControl.AllowDragContent = false;
				myEditControl.AllowDrop = false;
				flag = true;
			}
			myEditControl.AllowDrop = true;
			myEditControl.AllowDragContent = true;
			myEditControl.DataObjectRange = WriterDataObjectRange.OS;
			switch (lMode)
			{
			case 1:
				myEditControl.AllowDragContent = false;
				myEditControl.DataObjectRange = WriterDataObjectRange.OS;
				break;
			case 2:
				myEditControl.AllowDragContent = true;
				myEditControl.DataObjectRange = WriterDataObjectRange.SingleWriterControl;
				break;
			case 3:
				myEditControl.AllowDragContent = false;
				myEditControl.DataObjectRange = WriterDataObjectRange.SingleWriterControl;
				break;
			case 4:
				myEditControl.AllowDragContent = true;
				myEditControl.DataObjectRange = WriterDataObjectRange.Application;
				break;
			case 5:
				myEditControl.AllowDragContent = true;
				myEditControl.DataObjectRange = WriterDataObjectRange.Application;
				break;
			case 6:
				myEditControl.AllowDragContent = true;
				myEditControl.DataObjectRange = WriterDataObjectRange.OS;
				break;
			case 7:
				myEditControl.AllowDragContent = false;
				myEditControl.DataObjectRange = WriterDataObjectRange.SingleWriterControl;
				break;
			}
			EndLogFunction(flag);
			return flag;
		}

		[ComVisible(true)]
		public virtual void SetDynamicGridLineColor(int nColor)
		{
			BeginLogFunction("SetDynamicGridLineColor", "nColor=" + nColor);
			Color gridLineColor = Color.FromArgb(nColor);
			MyWriterControl.DocumentOptions.ViewOptions.GridLineColor = gridLineColor;
			if (pnlMainContainer.Visible)
			{
				MyWriterControl.Invalidate();
			}
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public virtual void SetDynamicGridShow(bool bShow)
		{
			BeginLogFunction("SetDynamicGridShow", "bShow=" + bShow);
			MyWriterControl.DocumentOptions.ViewOptions.ShowGridLine = bShow;
			if (pnlMainContainer.Visible)
			{
				MyWriterControl.Invalidate();
			}
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public virtual bool SetEmptyLineHeightBeforeTableInNewControl(string strName, int iType)
		{
			BeginLogFunction("SetEmptyLineHeightBeforeTableInNewControl", "strName=" + strName + "  iType=" + iType);
			AlertNotSupportedMember("SetEmptyLineHeightBeforeTableInNewControl");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool SetEndDateTime(string sName, string sValue)
		{
			int num = 9;
			BeginLogFunction("SetEndDateTime", "sName=" + sName + "  sValue=" + sValue);
			XTextInputFieldElement xTextInputFieldElement = GetElementById(sName) as XTextInputFieldElement;
			if (xTextInputFieldElement != null)
			{
				if (xTextInputFieldElement.DisplayFormat == null)
				{
					xTextInputFieldElement.DisplayFormat = new ValueFormater();
					xTextInputFieldElement.DisplayFormat.Style = ValueFormatStyle.DateTime;
					xTextInputFieldElement.DisplayFormat.Format = "yyyy-MM-dd HH:mm";
				}
				DateTime result = default(DateTime);
				if (sValue == "")
				{
					if (xTextInputFieldElement.ValidateStyle == null)
					{
						xTextInputFieldElement.ValidateStyle = new ValueValidateStyle();
					}
					xTextInputFieldElement.ValidateStyle.DateTimeMinValue = result;
					EndLogFunction("true");
					return true;
				}
				if (DateTime.TryParse(sValue, out result))
				{
					if (xTextInputFieldElement.ValidateStyle == null)
					{
						xTextInputFieldElement.ValidateStyle = new ValueValidateStyle();
					}
					xTextInputFieldElement.ValidateStyle.DateTimeMaxValue = result;
					xTextInputFieldElement.ValidateStyle.ValueType = ValueTypeStyle.DateTime;
					xTextInputFieldElement.ValidateStyle.CheckMaxValue = true;
					xTextInputFieldElement.ValidateStyle.CustomMessage = "您输入的日期在规定范围以外，请重输！";
					xTextInputFieldElement.ValidateStyle.Level = ValueValidateLevel.Error;
					EndLogFunction("true");
					return true;
				}
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual void SetFontProp(string propName, int propVal)
		{
			BeginLogFunction("SetFontProp", "propName=" + propName + "  propVal=" + propVal);
			AlertNotSupportedMember("SetFontProp");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual void SetFormatTagVisible(bool bShow)
		{
			BeginLogFunction("SetFormatTagVisible", "bShow=" + bShow);
			if (menuControlCodes.Checked != bShow)
			{
				menuControlCodes.Checked = bShow;
			}
			myEditControl.DocumentOptions.ViewOptions.ShowParagraphFlag = bShow;
			myEditControl.Invalidate();
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public virtual bool SetGridShow(bool bTable, bool bImage)
		{
			BeginLogFunction("SetGridShow", "bTable=" + bTable + "  bImage=" + bImage);
			EndLogFunction("true");
			return true;
		}

		[ComVisible(true)]
		public virtual void SetInsertMode(int lMode)
		{
			BeginLogFunction("SetInsertMode", "lMode=" + lMode);
			AlertNotSupportedMember("SetInsertMode");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		public virtual void SetIntellectiveListener(bool bCancel)
		{
			BeginLogFunction("SetIntellectiveListener", "bCancel=" + bCancel);
			EnableRaiseOnNsoIntellectiveEvent = bCancel;
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public virtual bool SetNetDogServerInfo(string sServerIP, string sPort)
		{
			BeginLogFunction("SetNetDogServerInfo", "sServerIP=" + sServerIP + "  sPort" + sPort);
			AlertNotSupportedMember("SetNetDogServerInfo");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool SetOfficeRegKey(string filePath, short edition)
		{
			BeginLogFunction("SetOfficeRegKey", "filePath=" + filePath + "  edition" + edition);
			AlertNotSupportedMember("SetOfficeRegKey");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool SetPageStyleLayout(int lType)
		{
			BeginLogFunction("SetPageStyleLayout", "lType=" + lType);
			AlertNotSupportedMember("SetPageStyleLayout");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool SetPageViewSizeChange(bool bChange)
		{
			BeginLogFunction("SetPageViewSizeChange", "bChange=" + bChange);
			AlertNotSupportedMember("SetPageViewSizeChange");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool SetParagraphIndent(int nCount, int nType)
		{
			BeginLogFunction("SetParagraphIndent", "nCount=" + nCount + "  nType=" + nType);
			AlertNotSupportedMember("SetParagraphIndent");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool SetParagraphLastLineAdjustment(int nType)
		{
			BeginLogFunction("SetParagraphLastLineAdjustment", "nType=" + nType);
			AlertNotSupportedMember("SetParagraphLastLineAdjustment");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		                                                                    /// <summary>
		                                                                    ///       设置当前段落的 FirstLineIndent, Alignment 属性
		                                                                    ///       </summary>
		                                                                    /// <param name="propName">属性名</param>
		                                                                    /// <param name="propVal">属性值</param>
		[ComVisible(true)]
		public virtual void SetParagraphProp(string propName, int propVal)
		{
			int num = 18;
			BeginLogFunction("SetParagraphProp", "propName=" + propName + "  propVal=" + propVal);
			if (!string.IsNullOrEmpty(propName))
			{
				if (propName == "FirstLineIndent")
				{
					DocumentContentStyle paragraph = myEditControl.Document.CurrentStyleInfo.Paragraph;
					paragraph.FirstLineIndent = propVal;
					paragraph.LeftIndent = propVal;
					MyWriterControl.ExecuteCommand("FirstLineIndent", showUI: false, true);
				}
				else if (propName == "Alignment")
				{
					if (propVal == 0)
					{
						MyWriterControl.ExecuteCommand("AlignLeft", showUI: false, null);
					}
					if (propVal == 1)
					{
						MyWriterControl.ExecuteCommand("AlignRight", showUI: false, null);
					}
					if (propVal == 2)
					{
						MyWriterControl.ExecuteCommand("AlignDistribute", showUI: false, null);
					}
					if (propVal == 3)
					{
						MyWriterControl.ExecuteCommand("AlignCenter", showUI: false, null);
					}
				}
			}
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public virtual void SetParaLineSpacing(int nType, int nHeight)
		{
			BeginLogFunction("SetParaLineSpacing", "nType=" + nType + "  nHeight=" + nHeight);
			AlertNotSupportedMember("SetParaLineSpacing");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool SetParaProtectAreaName(string sName, string sNewName)
		{
			BeginLogFunction("SetParaProtectAreaName", "sName=" + sName + "  sNewName=" + sNewName);
			AlertNotSupportedMember("SetParaProtectAreaName");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool SetPostilPropertyByCurrentCursor(string sPropertyName, bool bValue)
		{
			BeginLogFunction("SetPostilPropertyByCurrentCursor", "sPropertyName=" + sPropertyName + "  bValue=" + bValue);
			AlertNotSupportedMember("SetPostilPropertyByCurrentCursor");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool SetPostilsPropertyByAuthor(string sAuthor, string sPropertyName, bool bValue)
		{
			BeginLogFunction("SetPostilsPropertyByAuthor", "sAuthor=" + sAuthor + "  sPropertyName=" + sPropertyName + "  bValue=" + bValue);
			AlertNotSupportedMember("SetPostilsPropertyByAuthor");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool SetPrintWithTableBorder(bool bWithBorder)
		{
			BeginLogFunction("SetPrintWithTableBorder", "bWithBorder=" + bWithBorder);
			_SetPrintWithTableBorder_Value = bWithBorder;
			EndLogFunction(null);
			return true;
		}

		                                                                    /// <summary>
		                                                                    ///       选择性粘贴，比如从网页copy，设置粘贴是否带格式
		                                                                    ///       </summary>
		                                                                    /// <param name="bWithForamt">是否带格式</param>
		                                                                    /// <returns>True－ 设置成功 False－ 设置失败</returns>
		[ComVisible(true)]
		public virtual bool SetSpecialPaste(bool bWithForamt)
		{
			int num = 5;
			BeginLogFunction("SetSpecialPaste", "bWithForamt=" + bWithForamt);
			if (bWithForamt)
			{
				myEditControl.AcceptDataFormats = WriterDataFormats.All;
				EndLogFunction("true");
				return true;
			}
			myEditControl.AcceptDataFormats = (WriterDataFormats.Text | WriterDataFormats.XML);
			EndLogFunction("true");
			return true;
		}

		[ComVisible(true)]
		public virtual void SetSpellOnline(bool bFlag)
		{
			BeginLogFunction("SetSpellOnline", "bFlag=" + bFlag);
			AlertNotSupportedMember("SetSpellOnline");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool SetStartDateTime(string sName, string sValue)
		{
			int num = 10;
			BeginLogFunction("SetStartDateTime", "sName=" + sName + "  sValue=" + sValue);
			XTextInputFieldElement xTextInputFieldElement = GetElementById(sName) as XTextInputFieldElement;
			if (xTextInputFieldElement != null)
			{
				if (xTextInputFieldElement.DisplayFormat == null)
				{
					xTextInputFieldElement.DisplayFormat = new ValueFormater();
					xTextInputFieldElement.DisplayFormat.Style = ValueFormatStyle.DateTime;
					xTextInputFieldElement.DisplayFormat.Format = "yyyy-MM-dd HH:mm";
				}
				DateTime result = default(DateTime);
				if (sValue == "")
				{
					if (xTextInputFieldElement.ValidateStyle == null)
					{
						xTextInputFieldElement.ValidateStyle = new ValueValidateStyle();
					}
					xTextInputFieldElement.ValidateStyle.DateTimeMinValue = result;
					EndLogFunction("true");
					return true;
				}
				if (DateTime.TryParse(sValue, out result))
				{
					if (xTextInputFieldElement.ValidateStyle == null)
					{
						xTextInputFieldElement.ValidateStyle = new ValueValidateStyle();
					}
					xTextInputFieldElement.ValidateStyle.DateTimeMinValue = result;
					xTextInputFieldElement.ValidateStyle.ValueType = ValueTypeStyle.DateTime;
					xTextInputFieldElement.ValidateStyle.CheckMinValue = true;
					xTextInputFieldElement.ValidateStyle.CustomMessage = "您输入的日期在规定范围以外，请重输！";
					xTextInputFieldElement.ValidateStyle.Level = ValueValidateLevel.Error;
					EndLogFunction("true");
					return true;
				}
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool SetStructNavigationInfo(string sXML, string sRev1, string sRev2, string sRev3)
		{
			int num = 11;
			if (string.IsNullOrEmpty(sXML))
			{
				return false;
			}
			BeginLogFunction("SetStructNavigationInfo", "xml=" + sXML);
			XmlDocument xmlDocument = new XmlDocument();
			sXML = sXML.Trim();
			if (sXML.StartsWith("<"))
			{
				xmlDocument.LoadXml(sXML);
			}
			else
			{
				xmlDocument.Load(sXML);
			}
			List<string> list = new List<string>();
			_ListForSetStructNavigationInfo = new List<StructNavigationInfo>();
			foreach (XmlElement item in xmlDocument.SelectNodes("/DocObjContent/NewCtrl"))
			{
				StructNavigationInfo structNavigationInfo = new StructNavigationInfo();
				structNavigationInfo.FloatInform = item.GetAttribute("FloatInform");
				structNavigationInfo.PropertyContent = item.GetAttribute("PropertyContent");
				structNavigationInfo.ImagePath = item.GetAttribute("ImagePath");
				structNavigationInfo.IdType = item.GetAttribute("IdType");
				structNavigationInfo.ID = item.GetAttribute("Id");
				if (File.Exists(structNavigationInfo.ImagePath))
				{
					int num2 = list.IndexOf(structNavigationInfo.ImagePath);
					if (num2 < 0)
					{
						list.Add(structNavigationInfo.ImagePath);
						num2 = list.Count - 1;
					}
					structNavigationInfo.ImageIndex = num2;
				}
				_ListForSetStructNavigationInfo.Add(structNavigationInfo);
			}
			tvwNavigate.Nodes.Clear();
			if (tvwNavigate.ImageList == null)
			{
				tvwNavigate.ImageList = new ImageList();
			}
			else
			{
				tvwNavigate.ImageList.Images.Clear();
			}
			foreach (string item2 in list)
			{
				Image value = Image.FromFile(item2);
				tvwNavigate.ImageList.Images.Add(value);
			}
			if (tvwNavigate.ImageList.Images.Count == 0)
			{
				tvwNavigate.ImageList = null;
			}
			foreach (StructNavigationInfo item3 in _ListForSetStructNavigationInfo)
			{
				TreeNode treeNode = new TreeNode(item3.PropertyContent);
				treeNode.ToolTipText = item3.FloatInform;
				treeNode.ImageIndex = item3.ImageIndex;
				treeNode.Tag = item3;
				tvwNavigate.Nodes.Add(treeNode);
			}
			EndLogFunction("true");
			return true;
		}

		private void InnerNavigateTo(StructNavigationInfo info, bool selectSection)
		{
			int num = 11;
			BeginLogFunction("InnerNavigateTo", string.Concat("info=", info, "  selectSection=", selectSection));
			myEditControl.Focus();
			if (info.IdType == "1" || info.IdType == "3")
			{
				XTextElement elementById = GetElementById(info.ID);
				if (elementById != null)
				{
					elementById.Focus();
					if (elementById is XTextContainerElement)
					{
						foreach (XTextElement element in elementById.Elements)
						{
							if (!(element is XTextPageBreakElement) && !(element is XTextParagraphFlagElement) && !(element is XTextLineBreakElement))
							{
								myEditControl.MoveToPosition(element.FirstContentElement.ViewIndex);
								break;
							}
						}
					}
					myEditControl.ExecuteCommand("SelectLine", showUI: false, null);
					myEditControl.ScrollToCaretExt(ScrollToViewStyle.Middle);
				}
			}
			else if (info.IdType == "2")
			{
				int result = -1;
				if (int.TryParse(info.ID, out result))
				{
					result--;
					if (result >= Document.Body.PrivateLines.Count)
					{
						result = Document.Body.PrivateLines.Count - 1;
					}
					if (result >= 0 && result < Document.Body.PrivateLines.Count)
					{
						XTextLine xTextLine = Document.Body.PrivateLines[result];
						xTextLine[0].Focus();
						myEditControl.ExecuteCommand("SelectLine", showUI: false, null);
						myEditControl.ScrollToCaretExt(ScrollToViewStyle.Middle);
					}
				}
			}
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public virtual void SetStructNavigationVisible(bool bFlag)
		{
			BeginLogFunction("SetStructNavigationVisible", null);
			mySplitContainer.Panel1Collapsed = !bFlag;
			tabFunction.SelectedIndex = 0;
			if (!mySplitContainer.Panel1Collapsed)
			{
				RefreshTrackList();
			}
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public virtual bool SetWestCharBreakAttribute(int nType, bool bEnable)
		{
			BeginLogFunction("SetWestCharBreakAttribute", "nType=" + nType + "  bEnable=" + bEnable);
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool SetXmlInfoWithTable(string sXML, string sTableProp, string sRegionProp, string sSectionProp, string sNewControlProp, string sTableCellProp, string sRev1, string sRev2)
		{
			BeginLogFunction("SetXmlInfoWithTable", "sXML=" + sXML + "  sTableProp=" + sTableProp + "  sRegionProp=" + sRegionProp + "  sSectionProp=" + sSectionProp + "  sNewControlProp=" + sNewControlProp + "  sTableCellProp=" + sTableCellProp + "  sRev1=" + sRev1 + "  sRev2=" + sRev2);
			AlertNotSupportedMember("SetXmlInfoWithTable");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual void UpdateOfficeWindows()
		{
			BeginLogFunction("UpdateOfficeWindows", null);
			AlertNotSupportedMember("UpdateOfficeWindows");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool WriteIniFileKeyString(string appName, string keyName, string inString, string fileName)
		{
			BeginLogFunction("WriteIniFileKeyString", "appName=" + appName + "  keyName=" + keyName + "  inString=" + inString + "  fileName=" + fileName);
			AlertNotSupportedMember("WriteIniFileKeyString");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool WriteSecretInfoToStruct(string sStructName, string sInfo)
		{
			BeginLogFunction("WriteSecretInfoToStruct", "sStructName=" + sStructName + "  sInfo=" + sInfo);
			AlertNotSupportedMember("WriteSecretInfoToStruct");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual void ZoomIn()
		{
			int num = 9;
			BeginLogFunction("ZoomIn", null);
			if (myEditControl != null)
			{
				myEditControl.ExecuteCommand("ZoomIn", showUI: false, null);
			}
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public virtual void ZoomOut()
		{
			int num = 16;
			BeginLogFunction("ZoomOut", null);
			if (myEditControl != null)
			{
				myEditControl.ExecuteCommand("ZoomOut", showUI: false, null);
			}
			EndLogFunction(null);
		}

		                                                                    /// <summary>
		                                                                    ///       设置拉线打印的模式
		                                                                    ///       </summary>
		                                                                    /// <param name="nType">模式
		                                                                    ///       0 － 退出拉线打印模式
		                                                                    ///       1 － 拉线打印拖选模式
		                                                                    ///       2 － 拉线打印点选模式
		                                                                    ///       </param>
		                                                                    /// <remarks>
		                                                                    ///       拉线打印模式是新推出来的一种续打模式，指定起始位置跟结束位置后，打印指定位置以内的内容。
		                                                                    ///       拉线打印包括 2种模式 一种拉线打印的拖选模式 ，类似于选择打印模式，但是可以选择表格的一部分
		                                                                    ///       行进行打印，属于高级的选择打印；另外一种是拉线打印的点选模式，选择头尾位置后就选中一片区域
		                                                                    ///       </remarks>
		                                                                    /// <example>
		                                                                    ///       AxNsoControl1. SetDragLinePrintMode (1)
		                                                                    ///       </example>
		[ComVisible(true)]
		public void SetDragLinePrintMode(int nType)
		{
			int num = 5;
			BeginLogFunction("SetDragLinePrintMode", "nType=" + nType);
			if (nType == 0)
			{
				MyWriterControl.ExecuteCommand("ClearJumpPrintMode", showUI: false, null);
			}
			else if (nType == 1 || nType == 2)
			{
				MyWriterControl.ExecuteCommand("JumpPrintMode", showUI: false, true);
			}
			EndLogFunction(null);
		}

		                                                                    /// <summary>
		                                                                    ///       获取当前拉线模式用户选择打印区域的开始位置
		                                                                    ///       </summary>
		                                                                    /// <returns>位置； -1 表示失败</returns>
		                                                                    /// <remarks>该接口详细使用请参考附录拉线打印的场景说明，必须严格按照场景说明使用相应的接口</remarks>
		[ComVisible(true)]
		public int GetDragLineStartPos()
		{
			BeginLogFunction("GetDragLineStartPos");
			int num = (int)MyWriterControl.JumpPrintPosition;
			EndLogFunction(num);
			return num;
		}

		                                                                    /// <summary>
		                                                                    ///       获取当前拉线模式用户选择打印区域的结束位置
		                                                                    ///       </summary>
		                                                                    /// <returns>位置； -1 表示失败</returns>
		                                                                    /// <remarks>该接口详细使用请参考附录拉线打印的场景说明，必须严格按照场景说明使用相应的接口</remarks>
		[ComVisible(true)]
		public int GetDragLineEndPos()
		{
			BeginLogFunction("GetDragLineEndPos");
			int num = (int)MyWriterControl.Document.Body.Height;
			EndLogFunction(num);
			return num;
		}

		[ComVisible(true)]
		public virtual bool PreviewDocByPage(int nPageID)
		{
			AlertNotSupportedMember("PreviewDocByPage");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool PreviewDocBySelect()
		{
			BeginLogFunction("PreviewDocBySelect", null);
			EndLogFunction(PreviewDocBySelect2(bShowFirstHeader: true));
			return PreviewDocBySelect2(bShowFirstHeader: true);
		}

		[ComVisible(true)]
		public virtual bool PreviewDocBySelect2(bool bShowFirstHeader)
		{
			int num = 10;
			BeginLogFunction("PreviewDocBySelect2", "bShowFirstHeader=" + bShowFirstHeader);
			ShowPrintPreviewUI();
			XTextElement xTextElement = null;
			XTextElement xTextElement2 = null;
			JumpPrintInfo jumpPrintInfo = null;
			if (myEditControl.Selection.Length != 0)
			{
				xTextElement = myEditControl.Selection.ContentElements.FirstElement;
				xTextElement2 = myEditControl.Selection.ContentElements.LastElement;
				jumpPrintInfo = myEditControl.Document.GetJumpPrintInfo(xTextElement, xTextElement2);
			}
			if (jumpPrintInfo == null)
			{
				jumpPrintInfo = new JumpPrintInfo();
				jumpPrintInfo.Enabled = true;
			}
			WriterPrintDocument writerPrintDocument = new WriterPrintDocument();
			writerPrintDocument.Options.DrawFirstHeaderFooterWhenJumpPrintMode = bShowFirstHeader;
			writerPrintDocument.AddDocumentByWriterControl(myEditControl);
			writerPrintDocument.UpdateDocumentsState();
			myPreviewControl.Document = writerPrintDocument;
			writerPrintDocument.Options.JumpPrint = jumpPrintInfo;
			myPreviewControl.EnableJumpPrint = true;
			myPreviewControl.InvalidatePreview();
			myPreviewControl.ShowPageSettingsButton = false;
			EndLogFunction("true");
			return true;
		}

		[ComVisible(true)]
		public virtual bool Print(string pageType, int copies, string pageNumbers)
		{
			int num = 18;
			BeginLogFunction("Print", "pageType=" + pageType + "  copies=" + copies + "  pageNumbers=" + pageNumbers);
			FilePrintCommandParameter filePrintCommandParameter = new FilePrintCommandParameter();
			int[] array = GClass154.smethod_6(pageNumbers, -1);
			if (array != null && array.Length > 0)
			{
				if ((myPreviewControl.Options.JumpPrint != null && myPreviewControl.Options.JumpPrint.HasValidateInfo) || (myPreviewControl.Options.BoundsSelection != null && myPreviewControl.Options.BoundsSelection.HasValidateInfo))
				{
					MessageBox.Show(this, "处于续打模式或者区域打印模式时无法打印指定页！", "系统提示", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
					EndLogFunction("false");
					return false;
				}
				filePrintCommandParameter.SpecifyPageIndexs = new List<int>(array);
			}
			filePrintCommandParameter.SpecifyCopies = copies;
			PrintResult printResult = myEditControl.ExecuteCommand("FilePrint", showUI: false, filePrintCommandParameter) as PrintResult;
			if (printResult != null)
			{
				EndLogFunction(printResult.CompleteSuccessed);
				return printResult.CompleteSuccessed;
			}
			EndLogFunction(false);
			return false;
		}

		[ComVisible(true)]
		public virtual bool PrintDocByLine2(bool bAutoSetPrinter, bool bFirstPageHeadFooter, int nCopyNum, int aBeginPage, int aBeginRow, int aEndPage, int aEndRow)
		{
			BeginLogFunction("PrintDocByLine2", "bAutoSetPrinter=" + bAutoSetPrinter + " bFirstPageHeadFooter" + bFirstPageHeadFooter + " nCopyNum=" + nCopyNum + " aBeginPage" + aBeginPage + " aBeginRow" + aBeginRow + " aEndPage" + aEndPage + " aEndRow" + aEndRow);
			bool flag = PrintDocByLine(bAutoSetPrinter, bFirstPageHeadFooter, nCopyNum, aBeginPage, aBeginRow, aEndPage, aEndRow);
			EndLogFunction(flag);
			return flag;
		}

		[ComVisible(true)]
		public virtual bool PrintDocBySelect(bool bFirstPageHeadFooter)
		{
			int num = 7;
			BeginLogFunction("PrintDocBySelect", "bFirstPageHeadFooter=" + bFirstPageHeadFooter);
			myEditControl.ExecuteCommand("JumpPrintMode", showUI: false, true);
			try
			{
				myEditControl.DocumentOptions.ViewOptions.TableCellBorderVisibility = RenderVisibility.Paint;
				XTextElement xTextElement = null;
				XTextElement xTextElement2 = null;
				if (myEditControl.Selection.Length == 0)
				{
					EndLogFunction("false");
					return false;
				}
				xTextElement = myEditControl.Selection.ContentElements.FirstElement;
				xTextElement2 = myEditControl.Selection.ContentElements.LastElement;
				JumpPrintInfo jumpPrintInfo = myEditControl.Document.GetJumpPrintInfo(xTextElement, xTextElement2);
				FilePrintCommandParameter filePrintCommandParameter = new FilePrintCommandParameter();
				filePrintCommandParameter.DrawFirstHeaderFooterWhenJumpPrintMode = bFirstPageHeadFooter;
				filePrintCommandParameter.JumpPrintInfo = jumpPrintInfo;
				object obj = myEditControl.ExecuteCommand("FilePrint", showUI: false, filePrintCommandParameter);
				if (obj is PrintResult)
				{
					PrintResult printResult = (PrintResult)obj;
					EndLogFunction(printResult.CompleteSuccessed);
					return printResult.CompleteSuccessed;
				}
			}
			finally
			{
				myEditControl.DocumentOptions.ViewOptions.TableCellBorderVisibility = RenderVisibility.All;
				myEditControl.ExecuteCommand("JumpPrintMode", showUI: false, false);
			}
			EndLogFunction(false);
			return false;
		}

		[ComVisible(true)]
		public virtual bool PrintDocBySelectWithoutHeaderFooter()
		{
			BeginLogFunction("PrintDocBySelectWithoutHeaderFooter", null);
			EndLogFunction(PrintDocBySelect(bFirstPageHeadFooter: false));
			return PrintDocBySelect(bFirstPageHeadFooter: false);
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       Void CancelPrintPreview ()
		                                                                    ///       功能描述：
		                                                                    ///       取消打印预览
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值				
		                                                                    ///       返回值：
		                                                                    ///       无
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1. CancelPrintPreview（）
		                                                                    ///       实现说明：
		                                                                    ///       无
		                                                                    ///       Date:10-12 Jy
		                                                                    ///       </summary>
		[ComVisible(true)]
		public void CancelPrintPreview()
		{
			BeginLogFunction("CancelPrintPreview", null);
			if (myPreviewControl.Visible)
			{
				WriterPrintDocument writerPrintDocument = (WriterPrintDocument)myPreviewControl.Document;
				if (writerPrintDocument != null)
				{
					writerPrintDocument.RestoreDocumentsState();
					myEditControl.UpdatePages();
					pnlPrintPreview.Visible = false;
					pnlMainContainer.Visible = true;
					mainMenuStrip.BringToFront();
				}
			}
			EndLogFunction(null);
		}

		                                                                    /// <summary>
		                                                                    ///       显示打印预览用的UI
		                                                                    ///       </summary>
		private void ShowPrintPreviewUI()
		{
			if (!pnlPrintPreview.Visible)
			{
				if (pnlMainContainer.Visible)
				{
					pnlMainContainer.Visible = false;
				}
				pnlPrintPreview.Visible = true;
			}
		}

		[ComVisible(true)]
		public virtual bool PrintPreview(bool bViewLineNumber)
		{
			int num = 1;
			BeginLogFunction("PrintPreview", "bViewLineNumber=" + bViewLineNumber);
			if (HasFileOpened() == "-1")
			{
				EndLogFunction("false");
				return false;
			}
			ShowPrintPreviewUI();
			myEditControl.Document.Options.ViewOptions.ShowFieldBorderElement = false;
			myEditControl.Document.Options.ViewOptions.IgnoreFieldBorderWhenPrint = false;
			myEditControl.RefreshDocument();
			WriterPrintDocument writerPrintDocument = new WriterPrintDocument();
			writerPrintDocument.AddDocumentByWriterControl(myEditControl);
			myPreviewControl.Document = writerPrintDocument;
			writerPrintDocument.UpdateDocumentsState();
			myPreviewControl.InvalidatePreview();
			EndLogFunction(true);
			return true;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       Bool SetPrinterName (BSTR sPrinterName)
		                                                                    ///       功能描述：
		                                                                    ///       设置打印的默认打印机
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明
		                                                                    ///       sPrinterName	BSTR	默认打印机名称
		                                                                    ///       返回值：
		                                                                    ///       True – 成功
		                                                                    ///       False – 失败
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1. SetPrinterName (“\\10.3.0.166\HP LaserJet 1020”)
		                                                                    ///       实现说明：
		                                                                    ///       通过名字设置当前打印机	
		                                                                    ///       若设置的名字未能在打印机列表中找到，则不处理，返回false，设置不成功
		                                                                    ///       若设置的名字已是当前打印机，则不处理，返回true
		                                                                    ///       若设置的名字不是当前打印机并能在打印机列表中找到，则处理，返回true
		                                                                    ///       打印机名字，必须为全名(例如：\\10.3.0.166\HP LaserJet 1020 )
		                                                                    ///       Date:10-12 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="sPrinterName">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool SetPrinterName(string sPrinterName)
		{
			int num = 9;
			BeginLogFunction("SetPrinterName", "sPrinterName=" + sPrinterName);
			try
			{
				foreach (string installedPrinter in PrinterSettings.InstalledPrinters)
				{
					if (string.Compare(installedPrinter, sPrinterName, ignoreCase: true) == 0)
					{
						myEditControl.Document.PageSettings.PrinterName = installedPrinter;
						WriterControl.GlobalDefaultPrinterName = installedPrinter;
						EndLogFunction("true");
						return true;
					}
				}
			}
			catch (Exception ex)
			{
				MessageBox.Show(ex.Message);
			}
			EndLogFunction(false);
			return false;
		}

		[ComVisible(true)]
		public bool SetPrinterRightLeft(int lPrintMode)
		{
			int num = 8;
			BeginLogFunction("SetPrinterRightLeft", "lPrintMode=" + lPrintMode);
			switch (lPrintMode)
			{
			default:
				EndLogFunction("false");
				return false;
			case 0:
				_PrinterRightLeftModel = 0;
				_IsSetPrinterRightLeft = true;
				EndLogFunction("true");
				return true;
			case 1:
				_PrinterRightLeftModel = 1;
				_IsSetPrinterRightLeft = true;
				EndLogFunction("true");
				return true;
			case 2:
				_PrinterRightLeftModel = 2;
				_IsSetPrinterRightLeft = true;
				EndLogFunction("true");
				return true;
			case 3:
				_PrinterRightLeftModel = 3;
				_IsSetPrinterRightLeft = true;
				EndLogFunction("true");
				return true;
			}
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       void PrintDoc ( BOOL ShowDialog )
		                                                                    ///       功能描述：
		                                                                    ///       打印当前文档。
		                                                                    ///       参数：
		                                                                    ///       名称	类型	可选	取值
		                                                                    ///       ShowDialog	Bool	可选	False：直接打印
		                                                                    ///       True：弹出打印对话框
		                                                                    ///       返回值：无
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1.PrintDoc(False)
		                                                                    ///       实现说明：
		                                                                    ///       适用于三大模块。
		                                                                    ///       Date:10-12 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="ShowDialog">
		                                                                    /// </param>
		[ComVisible(true)]
		public void PrintDoc(bool ShowDialog)
		{
			int num = 8;
			BeginLogFunction("PrintDoc", "ShowDialog=" + ShowDialog);
			if (_IsSetPrinterRightLeft)
			{
				FilePrintCommandParameter filePrintCommandParameter = new FilePrintCommandParameter();
				switch (_PrinterRightLeftModel)
				{
				case 1:
				{
					filePrintCommandParameter.SpecifyPageIndexs = new List<int>();
					for (int i = 0; i < myEditControl.Document.Pages.Count; i += 2)
					{
						filePrintCommandParameter.SpecifyPageIndexs.Add(i);
					}
					break;
				}
				case 2:
				{
					filePrintCommandParameter.SpecifyPageIndexs = new List<int>();
					for (int i = 1; i < myEditControl.Document.Pages.Count; i += 2)
					{
						filePrintCommandParameter.SpecifyPageIndexs.Add(i);
					}
					break;
				}
				case 3:
				{
					for (int i = 0; i < myEditControl.Document.Pages.Count; i++)
					{
						filePrintCommandParameter.SpecifyPageIndexs.Add(i);
					}
					break;
				}
				}
				MyWriterControl.ExecuteCommand("FilePrint", showUI: false, filePrintCommandParameter);
			}
			else if (pnlPrintPreview.Visible)
			{
				myPreviewControl.PrintDocument(ShowDialog);
			}
			else if (ShowDialog)
			{
				myEditControl.ExecuteCommand("FilePrint", showUI: true, null);
			}
			else
			{
				myEditControl.ExecuteCommand("FilePrint", showUI: false, null);
			}
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public bool PrintDocByLine(bool bAutoSetPrinter, bool bFirstPageHeadFooter, int nCopyNum, int aBeginPage, int aBeginRow, int aEndPage, int aEndRow)
		{
			int num = 0;
			BeginLogFunction("PrintDocByLine", "bAutoSetPrinter=" + bAutoSetPrinter + "  bAutoSetPrinter=" + bAutoSetPrinter + "  bFirstPageHeadFooter=" + bFirstPageHeadFooter + "  nCopyNum=" + nCopyNum + "  aBeginPage=" + aBeginPage + "  aEndPage=" + aEndPage + "  aEndRow=" + aEndRow);
			FilePrintCommandParameter filePrintCommandParameter;
			if (_IsSetPrinterRightLeft)
			{
				filePrintCommandParameter = new FilePrintCommandParameter();
				switch (_PrinterRightLeftModel)
				{
				case 0:
					EndLogFunction("true");
					return true;
				case 1:
				{
					filePrintCommandParameter.SpecifyPageIndexs = new List<int>();
					for (int i = 0; i < myEditControl.Document.Pages.Count; i += 2)
					{
						filePrintCommandParameter.SpecifyPageIndexs.Add(i);
					}
					break;
				}
				case 2:
				{
					filePrintCommandParameter.SpecifyPageIndexs = new List<int>();
					for (int i = 1; i < myEditControl.Document.Pages.Count; i += 2)
					{
						filePrintCommandParameter.SpecifyPageIndexs.Add(i);
					}
					break;
				}
				case 3:
				{
					filePrintCommandParameter.DrawFirstHeaderFooterWhenJumpPrintMode = bFirstPageHeadFooter;
					filePrintCommandParameter.SpecifyCopies = nCopyNum;
					for (int i = aBeginPage; i < aEndPage; i++)
					{
						filePrintCommandParameter.SpecifyPageIndexs.Add(i);
					}
					break;
				}
				}
				PrintResult printResult = (PrintResult)MyWriterControl.ExecuteCommand("FilePrint", showUI: false, filePrintCommandParameter);
				EndLogFunction(printResult?.CompleteSuccessed ?? false);
				return printResult?.CompleteSuccessed ?? false;
			}
			filePrintCommandParameter = new FilePrintCommandParameter();
			filePrintCommandParameter.DrawFirstHeaderFooterWhenJumpPrintMode = bFirstPageHeadFooter;
			filePrintCommandParameter.SpecifyCopies = nCopyNum;
			int num2 = 0;
			int num3 = 0;
			int aEndRow2 = 0;
			num2 = ((aBeginRow != 0) ? aBeginPage : myEditControl.CurrentPageIndex);
			num3 = ((aEndPage != 0) ? aEndPage : myEditControl.CurrentPageIndex);
			if (aEndRow == 0)
			{
				int num4 = 0;
				foreach (XTextLine line in myEditControl.Document.Body.Lines)
				{
					if (line.OwnerPage.PageIndex == num3 - 1)
					{
						num4++;
					}
				}
				aEndRow2 = num4;
			}
			SelectOneArea(num2, aBeginRow, num3, aEndRow2);
			MyWriterControl.ExecuteCommand("FilePrintSelection", showUI: false, filePrintCommandParameter);
			EndLogFunction("true");
			return true;
		}

		                                                                    /// <summary>
		                                                                    ///       按页范围打印文档，并且控制打印的第一页页眉是否保留
		                                                                    ///       </summary>
		                                                                    /// <param name="copies">打印份数</param>
		                                                                    /// <param name="pageNumbers">打印页码范围</param>
		                                                                    /// <param name="bPrintFirstHeaderFooter">打印的第一页页眉是否需要</param>
		                                                                    /// <returns>True – 成功 False – 失败</returns>
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1. PrintByPage (1, "1-3",FALSE)
		                                                                    ///       页码范围 连续页 比如 1-5
		                                                                    ///       指定多页 比如 1;2;3
		                                                                    ///       单独一页 比如 1 (后面一定不能加;)
		[ComVisible(true)]
		public bool PrintByPage(int copies, string pageNumbers, bool bPrintFirstHeaderFooter)
		{
			int num = 11;
			BeginLogFunction("PrintByPage", "copies=" + copies + "pageNumbers=" + pageNumbers + "bPrintFirstHeaderFooter=" + bPrintFirstHeaderFooter);
			FilePrintCommandParameter filePrintCommandParameter = new FilePrintCommandParameter();
			if (!string.IsNullOrEmpty(pageNumbers))
			{
				filePrintCommandParameter.SpecifyCopies = copies;
				filePrintCommandParameter.DrawFirstHeaderFooterWhenJumpPrintMode = bPrintFirstHeaderFooter;
				filePrintCommandParameter.SpecifyPageIndexs = new List<int>();
				if (Convert.ToInt32(pageNumbers) >= 0)
				{
					filePrintCommandParameter.SpecifyPageIndexs.Add(Convert.ToInt32(pageNumbers));
				}
				if (pageNumbers.Contains("-"))
				{
					for (int num2 = int.Parse(pageNumbers.Split('-')[0]); num2 < int.Parse(pageNumbers.Split('-')[1]) + 1; num2++)
					{
						filePrintCommandParameter.SpecifyPageIndexs.Add(num2);
					}
				}
				if (pageNumbers.Contains(";"))
				{
					string[] array = pageNumbers.Split(';');
					for (int num2 = 0; num2 < array.Length; num2++)
					{
						filePrintCommandParameter.SpecifyPageIndexs.Add(int.Parse(array[num2]));
					}
				}
				ExecuteCommand("FilePrint", showUI: false, filePrintCommandParameter);
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       BOOL PrintDocByOddEven (LONG  nType)
		                                                                    ///       功能描述：
		                                                                    ///       设置给定的方式进行打印（奇数页，偶数页）
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       nType	LONG	打印选项	必需	0 － 整篇打印
		                                                                    ///       1 － 奇数页打印
		                                                                    ///       2 － 偶数页打印
		                                                                    ///       返回值：
		                                                                    ///       TRUE －  成功
		                                                                    ///       FALSE － 失败
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. PrintDocByOddEven (2)
		                                                                    ///       实现说明：
		                                                                    ///       无
		                                                                    ///       Date:10-14 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="nType">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool PrintDocByOddEven(int nType)
		{
			int num = 2;
			BeginLogFunction("PrintDocByOddEven", "nType=" + nType);
			XTextDocument document = Document;
			FilePrintCommandParameter filePrintCommandParameter = new FilePrintCommandParameter();
			switch (nType)
			{
			case 1:
			{
				filePrintCommandParameter.SpecifyPageIndexs = new List<int>();
				for (int i = 0; i < document.Pages.Count; i += 2)
				{
					filePrintCommandParameter.SpecifyPageIndexs.Add(i);
				}
				break;
			}
			case 2:
			{
				filePrintCommandParameter.SpecifyPageIndexs = new List<int>();
				for (int i = 1; i < document.Pages.Count; i += 2)
				{
					filePrintCommandParameter.SpecifyPageIndexs.Add(i);
				}
				break;
			}
			}
			ExecuteCommand("FilePrint", showUI: false, filePrintCommandParameter);
			EndLogFunction("true");
			return true;
		}

		                                                                    /// <summary>
		                                                                    ///       设置Windows的默认打印机
		                                                                    ///       </summary>
		                                                                    /// <param name="sPrinterName">默认打印机名称</param>
		                                                                    /// <returns>True – 成功 False – 失败</returns>
		[ComVisible(true)]
		public bool SetDefaultPrinterName(string sPrinterName)
		{
			int num = 11;
			BeginLogFunction("SetDefaultPrinterName", "sPrinterName=" + sPrinterName);
			if (!string.IsNullOrEmpty(sPrinterName))
			{
				myEditControl.ExecuteCommand("SetDefaultPrinterName", showUI: false, sPrinterName);
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       获取Windows的默认打印机
		                                                                    ///       </summary>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public string GetDefaultPrinterName()
		{
			BeginLogFunction("GetDefaultPrinterName");
			string text = null;
			text = WriterControl.GlobalDefaultPrinterName;
			if (!string.IsNullOrEmpty(text))
			{
				EndLogFunction(text);
				return text;
			}
			EndLogFunction("");
			return null;
		}

		[ComVisible(true)]
		public virtual bool SetOleSectionProgID(string sName, string sPrgID)
		{
			int num = 6;
			BeginLogFunction("SetOleSectionProgID", "sName=" + sName + "  sPrgID=" + sPrgID);
			XTextInputFieldElement xTextInputFieldElement = GetElementById(sName) as XTextInputFieldElement;
			if (IsNsoSection(xTextInputFieldElement))
			{
				xTextInputFieldElement.SetAttribute("OleSectionProgID", sPrgID);
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual string GetSectionContentBySectionName(string strSectionName)
		{
			BeginLogFunction("GetSectionContentBySectionName", "strSectionName=" + strSectionName);
			XTextInputFieldElement nsoSection = GetNsoSection(strSectionName);
			if (nsoSection == null)
			{
				EndLogFunction("");
				return "";
			}
			XTextDocument xTextDocument = nsoSection.CreateContentDocument(includeThis: false);
			if (xTextDocument == null)
			{
				EndLogFunction("");
				return "";
			}
			string xMLText = xTextDocument.XMLText;
			EndLogFunction(xMLText);
			return xMLText;
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       BSTR GetObjectBySelectArea ()
		                                                                    ///       功能描述：
		                                                                    ///       获得选中区域中Section和NewControl名称列表；
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值		
		                                                                    ///       返回值：
		                                                                    ///       BSTR, 选中区域中 Section 和 NewControl 名称列表，空则表示选中区域中无NewControl和Section，多个Object名称采用逗号分隔，依此排列。如果某个NewControl在Section内，只需要返回Section的名称
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. GetObjectBySelectArea ()
		                                                                    ///       实现说明：
		                                                                    ///       无
		                                                                    ///       Date:10-9 Jy
		                                                                    ///       </summary>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public string GetObjectBySelectArea()
		{
			int num = 17;
			BeginLogFunction("GetObjectBySelectArea", null);
			if (myEditControl.Document.Selection.ContentElements.Count > 0)
			{
				StringBuilder stringBuilder = new StringBuilder();
				foreach (XTextElement element in myEditControl.Document.Selection.CreateDocument(excludeLogicDeleted: true).Body.Elements)
				{
					if (IsNsoSection(element))
					{
						if (stringBuilder.Length > 0)
						{
							stringBuilder.Append(",");
						}
						stringBuilder.Append(element.ID);
					}
					if (IsNewControl(element))
					{
						if (element.Parent != null && IsNsoSection(element.Parent))
						{
							if (stringBuilder.Length > 0)
							{
								stringBuilder.Append(",");
							}
							stringBuilder.Append(element.Parent.ID);
						}
						else
						{
							if (stringBuilder.Length > 0)
							{
								stringBuilder.Append(",");
							}
							stringBuilder.Append(element.ID);
						}
					}
				}
				EndLogFunction(stringBuilder.ToString());
				return stringBuilder.ToString();
			}
			EndLogFunction("");
			return "";
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BSTR GetSectionByPasteContent（）
		                                                                    ///       功能描述：
		                                                                    ///       获得系统剪贴板内容中Section名称列表
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值			
		                                                                    ///       返回值：
		                                                                    ///       多个 Section 采用逗号分隔，依此排列。空则表示内容中无 Section，
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1. GetSectionByPasteContent ()
		                                                                    ///       实现说明：
		                                                                    ///       该接口支持跨进程.在A控件窗口中调用CopySelectArea后，可以在B控件
		                                                                    ///       窗口获取名称列表
		                                                                    ///       Date:10-9 Jy
		                                                                    ///       </summary>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public string GetSectionByPasteContent()
		{
			int num = 18;
			BeginLogFunction("GetSectionByPasteContent", null);
			XTextElementList elementsByType = myEditControl.CreateDocumentFromClipboard().GetElementsByType(typeof(XTextInputFieldElement));
			if (elementsByType.Count > 0)
			{
				StringBuilder stringBuilder = new StringBuilder();
				foreach (XTextElement item in elementsByType)
				{
					if (stringBuilder.Length > 0)
					{
						stringBuilder.Append(",");
					}
					if (IsNsoSection(item))
					{
						stringBuilder.Append(item.ID);
					}
				}
				EndLogFunction(stringBuilder.ToString());
				return stringBuilder.ToString();
			}
			EndLogFunction("");
			return "";
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BSTR GetObjectByPasteContent ()
		                                                                    ///       功能描述：
		                                                                    ///       获得系统剪贴板内容中Section和Control名称列表
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值		
		                                                                    ///       返回值：
		                                                                    ///       空则表示内容中无Control和Section，多个Object采用逗号分隔，依此排列。如果某个Control在Section内，只需要返回Section的名称
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1. GetObjectByPasteContent ()
		                                                                    ///       实现说明：
		                                                                    ///       该接口支持跨进程.在A控件窗口中调用CopySelectArea后，可以在B控件
		                                                                    ///       窗口获取名称列表
		                                                                    ///       Date:10-9 Jy
		                                                                    ///       </summary>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public string GetObjectByPasteContent()
		{
			int num = 6;
			BeginLogFunction("GetObjectByPasteContent", null);
			XTextElementList elementsByType = myEditControl.CreateDocumentFromClipboard().GetElementsByType(typeof(XTextInputFieldElement));
			if (elementsByType.Count > 0)
			{
				StringBuilder stringBuilder = new StringBuilder();
				foreach (XTextElement item in elementsByType)
				{
					stringBuilder.Append(item.ID);
					stringBuilder.Append(",");
				}
				EndLogFunction(stringBuilder.ToString());
				return stringBuilder.ToString();
			}
			EndLogFunction("");
			return "";
		}

		                                                                    /// <summary>
		                                                                    ///       返回区域中的Section和游离的NewControl对象编号列表，之间用|分开
		                                                                    ///       Section和内置NewControl的编号之间用逗号分开。
		                                                                    ///       </summary>
		                                                                    /// <param name="elements">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		private string GetSectionNewControlIDsWithStruct(XTextElementList elements)
		{
			if (elements == null || elements.Count == 0)
			{
				return "";
			}
			new XTextElementList();
			StringBuilder stringBuilder = new StringBuilder();
			GetSectionNewControlIDsWithStruct(null, elements, stringBuilder);
			return stringBuilder.ToString();
		}

		private void GetSectionNewControlIDsWithStruct(XTextElement currentSectionElement, XTextElementList elements, StringBuilder stringBuilder_0)
		{
			int num = 14;
			foreach (XTextElement element in elements)
			{
				if (IsNsoSection(element))
				{
					currentSectionElement = element;
					stringBuilder_0.Append("|");
					stringBuilder_0.Append(element.ID);
				}
				else if (IsNewControl(element))
				{
					if (currentSectionElement != null)
					{
						stringBuilder_0.Append(",");
					}
					else
					{
						stringBuilder_0.Append("|");
					}
					stringBuilder_0.Append(element.ID);
				}
				if (element is XTextContainerElement)
				{
					GetSectionNewControlIDsWithStruct(currentSectionElement, element.Elements, stringBuilder_0);
				}
			}
		}

		                                                                    /// <summary>
		                                                                    ///       返回区域中的Section和NewControl对象编号列表，如果NewControl在某个Section中则只返回Section的编号。
		                                                                    ///       </summary>
		                                                                    /// <param name="elements">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		private string GetSectionNewControlIDs(XTextElementList elements)
		{
			int num = 7;
			if (elements == null || elements.Count == 0)
			{
				return "";
			}
			XTextElementList xTextElementList = new XTextElementList();
			foreach (XTextElement element in elements)
			{
				XTextElement xTextElement = element;
				XTextElement xTextElement2 = null;
				if (xTextElement != null)
				{
					if (IsNewControl(xTextElement))
					{
						xTextElement2 = xTextElement;
					}
					else if (IsNsoSection(xTextElement))
					{
						if (!xTextElementList.Contains(xTextElement))
						{
							xTextElementList.Add(xTextElement);
						}
						xTextElement2 = null;
					}
				}
				if (xTextElement2 != null && !xTextElementList.Contains(xTextElement2))
				{
					xTextElementList.Add(xTextElement2);
				}
			}
			StringBuilder stringBuilder = new StringBuilder();
			foreach (XTextElement item in xTextElementList)
			{
				stringBuilder.Append(item.ID);
				stringBuilder.Append(",");
			}
			return stringBuilder.ToString();
		}

		[ComVisible(true)]
		public string GetCurrentSectionName()
		{
			BeginLogFunction("GetCurrentSectionName", null);
			XTextElement xTextElement = MyWriterControl.CurrentElement;
			XTextInputFieldElement xTextInputFieldElement;
			while (true)
			{
				if (xTextElement != null)
				{
					if (xTextElement is XTextInputFieldElement)
					{
						xTextInputFieldElement = (XTextInputFieldElement)xTextElement;
						if (IsNsoSection(xTextInputFieldElement))
						{
							break;
						}
					}
					xTextElement = xTextElement.Parent;
					continue;
				}
				EndLogFunction("");
				return "";
			}
			if (xTextInputFieldElement.ID == null)
			{
				EndLogFunction("");
				return "";
			}
			EndLogFunction(xTextInputFieldElement.ID);
			return xTextInputFieldElement.ID;
		}

		[ComVisible(true)]
		public bool SelectOneSection(string name)
		{
			int num = 18;
			BeginLogFunction("SelectOneSection", "name=" + name);
			XTextInputFieldElement nsoSection = GetNsoSection(name);
			if (nsoSection != null)
			{
				nsoSection.Select();
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		internal static void UpdateByNsoAttribute(XTextElement element, string attributeName)
		{
			int num = 5;
			if (element is XTextCheckBoxElementBase)
			{
				XTextCheckBoxElementBase xTextCheckBoxElementBase = (XTextCheckBoxElementBase)element;
				if (attributeName == "IsNullPrint")
				{
					string attribute = xTextCheckBoxElementBase.GetAttribute(attributeName);
					if (string.Compare(attribute, "true", ignoreCase: true) == 0)
					{
						xTextCheckBoxElementBase.PrintVisibilityWhenUnchecked = PrintVisibilityModeWhenUnchecked.HiddenCheckBoxOnly;
					}
					else
					{
						xTextCheckBoxElementBase.PrintVisibilityWhenUnchecked = PrintVisibilityModeWhenUnchecked.Visible;
					}
				}
				if (attributeName == "CheckOption")
				{
					xTextCheckBoxElementBase.ToolTip = xTextCheckBoxElementBase.GetAttribute(attributeName);
				}
				if (attributeName == "IsChecked")
				{
					xTextCheckBoxElementBase.Checked = WriterUtils.smethod_41(xTextCheckBoxElementBase.GetAttribute("IsChecked"), bool_2: false);
					if (xTextCheckBoxElementBase.OwnerDocument != null)
					{
						xTextCheckBoxElementBase.InvalidateView();
					}
				}
				if (attributeName == "PlaceHolder")
				{
					xTextCheckBoxElementBase.Caption = xTextCheckBoxElementBase.GetAttribute("PlaceHolder");
					if (xTextCheckBoxElementBase.OwnerDocument != null)
					{
						xTextCheckBoxElementBase.EditorRefreshView();
					}
				}
				if (attributeName == "IsCtrlHidden")
				{
					bool flag = !WriterUtils.smethod_41(xTextCheckBoxElementBase.GetAttribute("IsCtrlHidden"), bool_2: false);
					if (xTextCheckBoxElementBase.Visible != flag)
					{
						xTextCheckBoxElementBase.Visible = flag;
						xTextCheckBoxElementBase.EditorRefreshView();
					}
				}
				if (attributeName == "HelpTip")
				{
					xTextCheckBoxElementBase.ToolTip = xTextCheckBoxElementBase.GetAttribute("HelpTip");
				}
				xTextCheckBoxElementBase.EditorRefreshView();
			}
			if (!(element is XTextInputFieldElement))
			{
				return;
			}
			XTextInputFieldElement xTextInputFieldElement = (XTextInputFieldElement)element;
			if (attributeName == "ControlName")
			{
				xTextInputFieldElement.Name = xTextInputFieldElement.GetAttribute("ControlName");
			}
			if (attributeName == "HelpTip")
			{
				xTextInputFieldElement.ToolTip = xTextInputFieldElement.GetAttribute("HelpTip");
			}
			if (attributeName == "IsDropDown")
			{
				xTextInputFieldElement.EnableValueEditor = WriterUtils.smethod_41(xTextInputFieldElement.GetAttribute("IsDropDown"), bool_2: true);
			}
			if (attributeName == "BorderEndString")
			{
				xTextInputFieldElement.EndBorderText = xTextInputFieldElement.GetAttribute("BorderEndString");
			}
			if (attributeName == "BorderStartString")
			{
				xTextInputFieldElement.StartBorderText = xTextInputFieldElement.GetAttribute("BorderStartString");
			}
			if (attributeName == "Edge")
			{
				if (WriterUtils.smethod_41(xTextInputFieldElement.GetAttribute("Edge"), bool_2: true))
				{
					xTextInputFieldElement.BorderVisible = DCVisibleState.Default;
				}
				else
				{
					xTextInputFieldElement.BorderVisible = DCVisibleState.Hidden;
				}
			}
			if (attributeName == "DeleteProtect")
			{
				if (WriterUtils.smethod_41(xTextInputFieldElement.GetAttribute("DeleteProtect"), bool_2: false))
				{
					xTextInputFieldElement.Deleteable = false;
				}
				else
				{
					xTextInputFieldElement.Deleteable = true;
				}
			}
			if (attributeName == "PlaceHolder")
			{
				string text = xTextInputFieldElement.GetAttribute("PlaceHolder");
				if (string.IsNullOrEmpty(text))
				{
					text = null;
				}
				if (string.IsNullOrEmpty(xTextInputFieldElement.BackgroundText))
				{
					xTextInputFieldElement.BackgroundText = null;
				}
				if (text != xTextInputFieldElement.BackgroundText)
				{
					xTextInputFieldElement.BackgroundText = text;
					if (text == "牙齿公式")
					{
						XTextNewMedicalExpressionElement xTextNewMedicalExpressionElement = new XTextNewMedicalExpressionElement();
						xTextNewMedicalExpressionElement.ExpressionStyle = DCMedicalExpressionStyle.FourValuesGeneral;
						xTextNewMedicalExpressionElement.Values.Value1 = "1";
						xTextNewMedicalExpressionElement.Values.Value2 = "2";
						xTextNewMedicalExpressionElement.Values.Value3 = "3";
						xTextNewMedicalExpressionElement.Values.Value4 = "4";
						xTextNewMedicalExpressionElement.Width = 300f;
						xTextNewMedicalExpressionElement.Height = 200f;
						xTextInputFieldElement.Elements.Clear();
						xTextInputFieldElement.Elements.Add(xTextNewMedicalExpressionElement);
					}
					if (xTextInputFieldElement.OwnerDocument != null && xTextInputFieldElement.Elements.Count == 0)
					{
						xTextInputFieldElement.EditorRefreshView();
					}
				}
			}
			if (attributeName == "DelFlag")
			{
				xTextInputFieldElement.Deleteable = !WriterUtils.smethod_41(xTextInputFieldElement.GetAttribute("DelFlag"), bool_2: false);
			}
			if (attributeName == "EditProtect")
			{
				if (WriterUtils.smethod_41(xTextInputFieldElement.GetAttribute("EditProtect"), bool_2: false))
				{
					xTextInputFieldElement.ContentReadonly = ContentReadonlyState.True;
				}
				else
				{
					xTextInputFieldElement.ContentReadonly = ContentReadonlyState.Inherit;
				}
			}
			if (attributeName == "MustFillContent")
			{
				if (xTextInputFieldElement.ValidateStyle == null)
				{
					xTextInputFieldElement.ValidateStyle = new ValueValidateStyle();
				}
				xTextInputFieldElement.ValidateStyle.Required = WriterUtils.smethod_41(xTextInputFieldElement.GetAttribute("MustFillContent"), bool_2: false);
				xTextInputFieldElement.ValidateStyle.ContentVersion = -1;
				if (xTextInputFieldElement.ValidateStyle.Required)
				{
					xTextInputFieldElement.BackgroundTextColor = Color.Red;
				}
				else
				{
					xTextInputFieldElement.BackgroundTextColor = Color.Empty;
				}
				xTextInputFieldElement.InvalidateView();
			}
			if (attributeName == "ViewSecret")
			{
				if (WriterUtils.smethod_41(xTextInputFieldElement.GetAttribute("ViewSecret"), bool_2: false))
				{
					xTextInputFieldElement.ViewEncryptType = ContentViewEncryptType.Partial;
				}
				else
				{
					xTextInputFieldElement.ViewEncryptType = ContentViewEncryptType.None;
				}
			}
			if (attributeName == "IsEnterJumpNext")
			{
				if (WriterUtils.smethod_41(xTextInputFieldElement.GetAttribute("IsEnterJumpNext"), bool_2: false))
				{
					xTextInputFieldElement.MoveFocusHotKey = MoveFocusHotKeys.Enter;
				}
				else
				{
					xTextInputFieldElement.MoveFocusHotKey = MoveFocusHotKeys.Default;
				}
			}
			if (attributeName == "IsCtrlHidden")
			{
				bool flag = !WriterUtils.smethod_41(xTextInputFieldElement.GetAttribute("IsCtrlHidden"), bool_2: false);
				if (xTextInputFieldElement.Visible != flag)
				{
					xTextInputFieldElement.Visible = flag;
					xTextInputFieldElement.EditorRefreshView();
				}
			}
			xTextInputFieldElement.EditorRefreshView();
		}

		[ComVisible(true)]
		public bool SetSectionProp(string name, string propName, string Value)
		{
			int num = 5;
			BeginLogFunction("SetSectionProp", "name=" + name + "  propName=" + propName + "  Value=" + Value);
			XTextInputFieldElement nsoSection = GetNsoSection(name);
			if (nsoSection != null)
			{
				nsoSection.SetAttribute(propName, Value);
				UpdateByNsoAttribute(nsoSection, propName);
				MyWriterControl.RefreshDocument();
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public string GetSectionProp(string name, string propertyName)
		{
			BeginLogFunction("GetSectionProp", "name=" + name + "  propertyName=" + propertyName);
			XTextInputFieldElement nsoSection = GetNsoSection(name);
			if (nsoSection == null)
			{
				EndLogFunction("");
				return "";
			}
			string attribute = nsoSection.GetAttribute(propertyName);
			if (attribute == null)
			{
				EndLogFunction("");
				return "";
			}
			EndLogFunction(attribute);
			return attribute;
		}

		[ComVisible(true)]
		public string GetAllSectionNamesByCurrentDoc()
		{
			int num = 16;
			BeginLogFunction("GetAllSectionNamesByCurrentDoc", null);
			StringBuilder stringBuilder = new StringBuilder();
			XTextElementList elementsByType = MyWriterControl.Document.GetElementsByType(typeof(XTextInputFieldElementBase));
			if (elementsByType != null)
			{
				foreach (XTextElement item in elementsByType)
				{
					if (IsNsoSection(item))
					{
						stringBuilder.Append(item.ID);
						stringBuilder.Append(",");
					}
				}
			}
			EndLogFunction(stringBuilder.ToString());
			return stringBuilder.ToString();
		}

		[ComVisible(true)]
		public bool SetSectionName(string Section_name, string newValue)
		{
			int num = 2;
			BeginLogFunction("SetSectionName", "Section_name=" + Section_name + "  newValue=" + newValue);
			XTextElement elementById = GetElementById(Section_name);
			if (elementById != null)
			{
				elementById.ID = newValue;
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       BOOL SetSectionText (BSTR sName, BSTR sText)
		                                                                    ///       功能描述：
		                                                                    ///       设置指定 section 的文本内容
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sName	BSTR　	section名称	 必需	
		                                                                    ///       sText	BSTR　	文本内容	必需	
		                                                                    ///       返回值：
		                                                                    ///       False：失败
		                                                                    ///       True：成功
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. SetSectionText (“ea1”，“EA2”)
		                                                                    ///       实现说明：
		                                                                    ///       无
		                                                                    ///       Date:10-9 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">
		                                                                    /// </param>
		                                                                    /// <param name="sText">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool SetSectionText(string sName, string sText)
		{
			int num = 10;
			BeginLogFunction("SetSectionText", "sName=" + sName + "  sText=" + sText);
			XTextInputFieldElement xTextInputFieldElement = myEditControl.GetElementById(sName) as XTextInputFieldElement;
			if (xTextInputFieldElement != null)
			{
				string text = sText;
				if (text == "签名")
				{
					text = null;
					xTextInputFieldElement.BackgroundText = "签名";
				}
				if (text == xTextInputFieldElement.BackgroundText)
				{
					text = null;
				}
				else if (text == xTextInputFieldElement.ToolTip)
				{
					text = null;
				}
				xTextInputFieldElement.EditorTextExt = text;
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       void DeleteSection(BSTR Section_name)
		                                                                    ///       功能描述：
		                                                                    ///       删除一个 section
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       Section_name	BSTR　	section名称	 必需	
		                                                                    ///       返回值：
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. DeleteSection (“sct”)
		                                                                    ///       实现说明：
		                                                                    ///       无
		                                                                    ///       Date:10-9 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="Section_name">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool DeleteSection(string Section_name)
		{
			int num = 8;
			BeginLogFunction("DeleteSection", "Section_name=" + Section_name);
			XTextElement elementById = myEditControl.GetElementById(Section_name);
			if (elementById != null)
			{
				if (IsNsoSection(elementById))
				{
					XTextInputFieldElement xTextInputFieldElement = elementById as XTextInputFieldElement;
					xTextInputFieldElement.Focus();
					using (myEditControl.CreateBackgroundModeSetter())
					{
						xTextInputFieldElement.EditorDelete(logUndo: true);
					}
					EndLogFunction("true");
					return true;
				}
				EndLogFunction("false");
				return false;
			}
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       BSTR InsertSectionAtCurrentCursor (BSTR sName, BSTR sText)
		                                                                    ///       功能描述：
		                                                                    ///       当前光标位置插入Section。
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sName	BSTR　	名称	 必需	
		                                                                    ///       sText	BSTR　	内容	必需	如果为NULL
		                                                                    ///       则不替换文字
		                                                                    ///       返回值：
		                                                                    ///       Section名称,如果为空则失败
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. InsertSectionAtCurrentCursor(“sct”，“A2”)
		                                                                    ///       实现说明：
		                                                                    ///       无
		                                                                    ///       Date:10-9 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">
		                                                                    /// </param>
		                                                                    /// <param name="sText">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public string InsertSectionAtCurrentCursor(string sName, string sText)
		{
			int num = 4;
			BeginLogFunction("InsertSectionAtCurrentCursor", "sName=" + sName + " sText=" + sText);
			if (sName == null)
			{
				throw new ArgumentNullException("sName");
			}
			XTextElement xTextElement = myEditControl.CurrentElement;
			while (true)
			{
				if (xTextElement != null)
				{
					if (!_EnableSectionNested && IsNsoSection(xTextElement))
					{
						break;
					}
					xTextElement = xTextElement.Parent;
					continue;
				}
				XTextInputFieldElement xTextInputFieldElement = new XTextInputFieldElement();
				xTextInputFieldElement.SetAttribute("NsoElementTypeName", "Section");
				xTextInputFieldElement.StartBorderText = "『";
				xTextInputFieldElement.EndBorderText = "』";
				xTextInputFieldElement.OwnerDocument = Document;
				xTextInputFieldElement.ID = sName;
				xTextInputFieldElement.BackgroundText = sName;
				xTextInputFieldElement.AcceptChildElementTypes2 = ElementType.All;
				xTextInputFieldElement.SetInnerTextFast(sText);
				xTextInputFieldElement.EnableHighlight = EnableState.Disabled;
				myEditControl.ExecuteCommand("InsertInputField", showUI: false, xTextInputFieldElement);
				myEditControl.Focus();
				xTextInputFieldElement.Focus();
				EndLogFunction(xTextInputFieldElement.ID);
				return xTextInputFieldElement.ID;
			}
			return "";
		}

		[ComVisible(true)]
		public void SetSectionHighlight(bool bFlag)
		{
			BeginLogFunction("SetSectionHighlight", "bFlag=" + bFlag);
			XTextElementList elementsByType = myEditControl.Document.GetElementsByType(typeof(XTextInputFieldElement));
			if (elementsByType != null && elementsByType.Count > 0)
			{
				foreach (XTextInputFieldElement item in elementsByType)
				{
					if (IsNsoSection(item))
					{
						if (bFlag)
						{
							item.EnableHighlight = EnableState.Enabled;
						}
						else
						{
							item.EnableHighlight = EnableState.Disabled;
						}
					}
				}
			}
			myEditControl.RefreshDocument();
			if (pnlMainContainer.Visible)
			{
				myEditControl.Invalidate();
			}
			EndLogFunction(null);
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       LONG GetSectionBegin (BSTR sName)
		                                                                    ///       功能描述：
		                                                                    ///       返回section 开始位置
		                                                                    ///        参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sName	BSTR　	section名称	 必需	
		                                                                    ///       返回值：
		                                                                    ///       LONG, 位置；-1 表示失败
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. GetSectionBegin(“ea”)
		                                                                    ///        实现说明：
		                                                                    ///       如果调用该接口是为了获取结构的内容(不包括边框) 
		                                                                    ///       请直接调用 SelectOneStructContent
		                                                                    ///       如果调用该接口是为了将光标定位到结构的边框前后位置，请直接调用
		                                                                    ///       CursorJumpOutOfOneStruct
		                                                                    ///       Date:10-13 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public int GetSectionBegin(string sName)
		{
			int num = 10;
			BeginLogFunction("GetSectionBegin", "sName=" + sName);
			if (sName == null)
			{
				EndLogFunction(null);
				throw new ArgumentException("sName");
			}
			XTextInputFieldElement nsoSection = GetNsoSection(sName);
			if (nsoSection == null)
			{
				EndLogFunction(-1);
				return -1;
			}
			EndLogFunction(nsoSection.StartElement.ViewIndex);
			return nsoSection.StartElement.ViewIndex;
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       LONG GetSectionEnd (BSTR sName)
		                                                                    ///       功能描述：
		                                                                    ///       返回Section 结束位置；-1 表示失败
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sName	BSTR　	section 名称	 必需	
		                                                                    ///        返回值：
		                                                                    ///       LONG, 位置
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. GetSectionEnd（“ea”）
		                                                                    ///        实现说明：
		                                                                    ///       如果调用该接口是为了获取结构的内容(不包括边框) 
		                                                                    ///       请直接调用 SelectOneStructContent
		                                                                    ///       如果调用该接口是为了将光标定位到结构的边框前后位置，请直接调用
		                                                                    ///       CursorJumpOutOfOneStruct
		                                                                    ///       Date:10-13 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public int GetSectionEnd(string sName)
		{
			int num = 18;
			BeginLogFunction("GetSectionEnd", "sName=" + sName);
			if (sName == null)
			{
				EndLogFunction(null);
				throw new ArgumentException("sName");
			}
			XTextInputFieldElement nsoSection = GetNsoSection(sName);
			if (nsoSection == null)
			{
				EndLogFunction(-1);
				return -1;
			}
			EndLogFunction(nsoSection.EndElement.ViewIndex);
			return nsoSection.EndElement.ViewIndex;
		}

		[ComVisible(true)]
		public string GetSectionBySelectArea()
		{
			int num = 8;
			BeginLogFunction("GetSectionBySelectArea", null);
			XTextElementList elements = myEditControl.Document.Selection.CreateDocument(excludeLogicDeleted: true).Body.Elements;
			if (elements.Count > 0)
			{
				StringBuilder stringBuilder = new StringBuilder();
				foreach (XTextElement item in elements)
				{
					if (IsNsoSection(item))
					{
						if (stringBuilder.Length > 0)
						{
							stringBuilder.Append(",");
						}
						stringBuilder.Append(item.ID);
					}
				}
				if (stringBuilder.Length > 0)
				{
					EndLogFunction(stringBuilder.ToString());
					return stringBuilder.ToString();
				}
				EndLogFunction("");
				return "";
			}
			EndLogFunction("");
			return "";
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       BSTR GetAllSectAndNewCtrlContentByCurrentDoc(BSTR aSctContType, BSTR aCtrlContType,LONG nPostionFlag,LONG nReserved)
		                                                                    ///       功能描述：
		                                                                    ///       以XML格式依次返回文档 Section 和新式控件的层次关系
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       aSctContType	BSTR　	Section节点包含的内容	必填	0,1,2中任意组合,见附表
		                                                                    ///       aCtrlContType	BSTR　	NewControl节点包含的内容	必填	0,1中任意组合,见附表
		                                                                    ///       nPostionFlag	LONG	起始位置标记	必填	0,1
		                                                                    ///       nReserved	LONG	该参数已经废弃	必填	0,1
		                                                                    ///       附表：
		                                                                    ///       名称	说明
		                                                                    ///       ID_RESERVE =‘0’	返回XML中含有Reserve 跟其他的自定义属性 节点
		                                                                    ///       ID_TEXT =‘1’	返回XML中含有Content_Text节点
		                                                                    ///       ID_HTML =‘2’	返回XML中含有Content_Html节点
		                                                                    ///       返回值：
		                                                                    ///       BSTR, 整个文档的 Section 和新式控件的层次关系（Text节点的内容不需要包括对象边框标记）
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. GetAllSectAndNewCtrlContentByCurrentDoc (“0,1”，“0,1”,0,0)
		                                                                    ///       实现说明：
		                                                                    ///       更加复杂的说明请参考 手册说明
		                                                                    ///       Date:10-14 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="aSctContType">
		                                                                    /// </param>
		                                                                    /// <param name="aCtrlContType">
		                                                                    /// </param>
		                                                                    /// <param name="nPostionFlag">
		                                                                    /// </param>
		                                                                    /// <param name="nReserved">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public string GetAllSectAndNewCtrlContentByCurrentDoc(string aSctContType, string aCtrlContType, int nPostionFlag, int nReserved)
		{
			int num = 5;
			BeginLogFunction("GetAllSectAndNewCtrlContentByCurrentDoc", "aSctContType=" + aSctContType + " aCtrlContType=" + aCtrlContType + " nPostionFlag" + nPostionFlag + " nReserved" + nReserved);
			if (aSctContType == null)
			{
				aSctContType = "";
			}
			if (aCtrlContType == null)
			{
				aCtrlContType = "";
			}
			bool sectionReserve = aSctContType.IndexOf("0") >= 0;
			bool sectionText = aSctContType.IndexOf("1") >= 0;
			bool sectionHtml = aSctContType.IndexOf("2") >= 0;
			bool ctlReserve = aCtrlContType.IndexOf("0") >= 0;
			bool ctlText = aCtrlContType.IndexOf("1") >= 0;
			bool ctlHtml = aCtrlContType.IndexOf("2") >= 0;
			StringWriter stringWriter = new StringWriter();
			XmlTextWriter xmlTextWriter = new XmlTextWriter(stringWriter);
			xmlTextWriter.Formatting = Formatting.Indented;
			xmlTextWriter.Indentation = 1;
			xmlTextWriter.IndentChar = '\t';
			xmlTextWriter.WriteStartDocument();
			xmlTextWriter.WriteStartElement("DocObjContent");
			WriteXMLForGetAllSectAndNewCtrlContentByCurrentDoc(MyWriterControl.Document, xmlTextWriter, sectionReserve, sectionText, sectionHtml, ctlReserve, ctlText, ctlHtml);
			xmlTextWriter.WriteEndElement();
			xmlTextWriter.WriteEndDocument();
			xmlTextWriter.Close();
			string result = stringWriter.ToString();
			EndLogFunction(result);
			return result;
		}

		private bool IsNsoPreserveAttributeName(string name)
		{
			int num = 15;
			int num2;
			switch (name)
			{
			default:
				num2 = ((!(name == "Id")) ? 1 : 0);
				break;
			case "NsoControlTypeName":
			case "NsoElementTypeName":
			case "Type":
				num2 = 0;
				break;
			}
			if (num2 == 0)
			{
				return true;
			}
			return false;
		}

		private void WriteXMLForGetRegionContentByByCurrentRegion(XTextElement rootElement, XmlTextWriter writer, bool sectionReserve, bool sectionText, bool sectionHtml, bool ctlReserve, bool ctlText, bool ctlHtml)
		{
			int num = 10;
			if (rootElement.Elements != null)
			{
				foreach (XTextElement element in rootElement.Elements)
				{
					if (!(element is XTextCharElement) && !(element.GetAttribute("RecordInXML") == "FALSE"))
					{
						string attribute = element.GetAttribute("XmlNodeString");
						XmlDocument xmlDocument = null;
						if (!string.IsNullOrEmpty(attribute) && attribute.IndexOf("<") >= 0)
						{
							xmlDocument = new XmlDocument();
							xmlDocument.LoadXml(attribute);
						}
						List<string> list = new List<string>();
						if (IsNsoSection(element))
						{
							writer.WriteStartElement("Section");
							writer.WriteAttributeString("Id", element.ID);
							writer.WriteAttributeString("Type", "1");
							list.Add("Id");
							list.Add("Type");
							if (sectionReserve)
							{
								XAttributeList attributes = element.Attributes;
								if (attributes != null)
								{
									foreach (XAttribute item in attributes)
									{
										if (!IsNsoPreserveAttributeName(item.Name) && XmlReader.IsName(item.Name) && !list.Contains(item.Name))
										{
											writer.WriteAttributeString(item.Name, item.Value);
											list.Add(item.Name);
										}
									}
								}
							}
							WriteXMLForGetRegionContentByByCurrentRegion(element, writer, sectionReserve, sectionText, sectionHtml, ctlReserve, ctlText, ctlHtml);
							if (sectionReserve)
							{
								xmlDocument?.DocumentElement.WriteTo(writer);
								writer.WriteElementString("Reserve", element.GetAttribute("Reserve"));
							}
							if (sectionText)
							{
								writer.WriteElementString("Content_Text", element.Text);
							}
							writer.WriteEndElement();
						}
						else if (element is XTextInputFieldElement)
						{
							if (IsNewControl(element))
							{
								writer.WriteStartElement("NewCtrl");
								writer.WriteAttributeString("Id", element.ID);
								writer.WriteAttributeString("Type", Convert.ToInt32(GetNewControlType(element)).ToString());
								list.Add("Id");
								string text = null;
								if (ctlReserve)
								{
									XAttributeList attributes = element.Attributes;
									if (attributes != null)
									{
										foreach (XAttribute item2 in attributes)
										{
											if (item2.Name == "ShowControlCustom")
											{
												text = item2.Value;
											}
											else if (!IsNsoPreserveAttributeName(item2.Name) && XmlReader.IsName(item2.Name) && !list.Contains(item2.Name))
											{
												writer.WriteAttributeString(item2.Name, item2.Value);
												list.Add(item2.Name);
											}
										}
										if (attributes.GetValue("NsoControlTypeName") == "Combox" || attributes.GetValue("NsoControlTypeName") == "ListBox" || attributes.GetValue("NsoControlTypeName") == "MultiComBox" || attributes.GetValue("NsoControlTypeName") == "MultiListBox")
										{
											XTextInputFieldElement xTextInputFieldElement = (XTextInputFieldElement)element;
											if (!list.Contains("SelectedCode"))
											{
												writer.WriteAttributeString("SelectedCode", xTextInputFieldElement.InnerValue);
											}
											if (!list.Contains("SelectedName"))
											{
												writer.WriteAttributeString("SelectedName", xTextInputFieldElement.Text);
											}
										}
									}
								}
								if (ctlReserve && CompanyType != 0)
								{
									writer.WriteElementString("Reserve", element.GetAttribute("Reserve"));
								}
								if (ctlReserve)
								{
									xmlDocument?.DocumentElement.WriteTo(writer);
									if (!string.IsNullOrEmpty(text))
									{
										writer.WriteStartElement("ShowControlCustom");
										try
										{
											XmlDocument xmlDocument2 = new XmlDocument();
											xmlDocument2.LoadXml(text);
											xmlDocument2.DocumentElement.WriteContentTo(writer);
										}
										catch
										{
										}
										writer.WriteEndElement();
									}
								}
								if (ctlText)
								{
									writer.WriteElementString("Content_Text", element.Text);
								}
								writer.WriteEndElement();
							}
						}
						else if (element is XTextCheckBoxElementBase)
						{
							if (IsNewControl(element))
							{
								XTextCheckBoxElementBase xTextCheckBoxElementBase = (XTextCheckBoxElementBase)element;
								writer.WriteStartElement("NewCtrl");
								writer.WriteAttributeString("Id", element.ID);
								list.Add("Id");
								writer.WriteAttributeString("Type", Convert.ToInt32(GetNewControlType(element)).ToString());
								writer.WriteAttributeString("IsChecked", xTextCheckBoxElementBase.Checked ? "TRUE" : "FALSE");
								if (ctlReserve)
								{
									XAttributeList attributes = element.Attributes;
									if (attributes != null)
									{
										foreach (XAttribute item3 in attributes)
										{
											if (!IsNsoPreserveAttributeName(item3.Name) && XmlReader.IsName(item3.Name) && !list.Contains(item3.Name))
											{
												writer.WriteAttributeString(item3.Name, item3.Value);
												list.Add(item3.Name);
											}
										}
									}
									xmlDocument?.DocumentElement.WriteTo(writer);
									writer.WriteElementString("Reserve", element.GetAttribute("Reserve"));
								}
								if (ctlText)
								{
									writer.WriteElementString("Content_Text", GetNewControlText(element));
								}
								writer.WriteEndElement();
							}
						}
						else if (element is XTextContainerElement)
						{
							WriteXMLForGetRegionContentByByCurrentRegion(element, writer, sectionReserve, sectionText, sectionHtml, ctlReserve, ctlText, ctlHtml);
						}
					}
				}
			}
		}

		private void WriteXMLForGetAllSectAndNewCtrlContentByCurrentDoc(XTextElement rootElement, XmlTextWriter writer, bool sectionReserve, bool sectionText, bool sectionHtml, bool ctlReserve, bool ctlText, bool ctlHtml)
		{
			int num = 8;
			if (rootElement.Elements != null)
			{
				foreach (XTextElement element in rootElement.Elements)
				{
					if (!(element is XTextCharElement) && !(element.GetAttribute("RecordInXML") == "FALSE"))
					{
						string attribute = element.GetAttribute("XmlNodeString");
						XmlDocument xmlDocument = null;
						if (!string.IsNullOrEmpty(attribute) && attribute.IndexOf("<") >= 0)
						{
							xmlDocument = new XmlDocument();
							xmlDocument.LoadXml(attribute);
						}
						List<string> list = new List<string>();
						if (IsNsoSection(element))
						{
							writer.WriteStartElement("Section");
							writer.WriteAttributeString("Id", element.ID);
							writer.WriteAttributeString("Type", "1");
							list.Add("Id");
							list.Add("Type");
							if (sectionReserve)
							{
								XAttributeList attributes = element.Attributes;
								if (attributes != null)
								{
									foreach (XAttribute item in attributes)
									{
										if (!IsNsoPreserveAttributeName(item.Name) && XmlReader.IsName(item.Name) && !list.Contains(item.Name))
										{
											writer.WriteAttributeString(item.Name, item.Value);
											list.Add(item.Name);
										}
									}
								}
							}
							WriteXMLForGetAllSectAndNewCtrlContentByCurrentDoc(element, writer, sectionReserve, sectionText, sectionHtml, ctlReserve, ctlText, ctlHtml);
							if (sectionReserve)
							{
								xmlDocument?.DocumentElement.WriteTo(writer);
								writer.WriteElementString("Reserve", element.GetAttribute("Reserve"));
							}
							if (sectionText)
							{
								writer.WriteElementString("Content_Text", element.Text);
							}
							writer.WriteEndElement();
						}
						else if (element is XTextInputFieldElement)
						{
							if (IsNewControl(element))
							{
								writer.WriteStartElement("NewCtrl");
								writer.WriteAttributeString("Id", element.ID);
								writer.WriteAttributeString("Type", Convert.ToInt32(GetNewControlType(element)).ToString());
								list.Add("Id");
								string text = null;
								if (ctlReserve)
								{
									XAttributeList attributes = element.Attributes;
									if (attributes != null)
									{
										foreach (XAttribute item2 in attributes)
										{
											if (item2.Name == "ShowControlCustom")
											{
												text = item2.Value;
											}
											else if (!IsNsoPreserveAttributeName(item2.Name) && XmlReader.IsName(item2.Name) && !list.Contains(item2.Name))
											{
												writer.WriteAttributeString(item2.Name, item2.Value);
												list.Add(item2.Name);
											}
										}
										if (attributes.GetValue("NsoControlTypeName") == "Combox" || attributes.GetValue("NsoControlTypeName") == "ListBox" || attributes.GetValue("NsoControlTypeName") == "MultiComBox" || attributes.GetValue("NsoControlTypeName") == "MultiListBox")
										{
											XTextInputFieldElement xTextInputFieldElement = (XTextInputFieldElement)element;
											if (!list.Contains("SelectedCode"))
											{
												writer.WriteAttributeString("SelectedCode", xTextInputFieldElement.InnerValue);
											}
											if (!list.Contains("SelectedName"))
											{
												writer.WriteAttributeString("SelectedName", xTextInputFieldElement.Text);
											}
										}
									}
								}
								if (ctlReserve && CompanyType != 0)
								{
									writer.WriteElementString("Reserve", element.GetAttribute("Reserve"));
								}
								if (ctlReserve)
								{
									xmlDocument?.DocumentElement.WriteTo(writer);
									if (!string.IsNullOrEmpty(text))
									{
										writer.WriteStartElement("ShowControlCustom");
										try
										{
											XmlDocument xmlDocument2 = new XmlDocument();
											xmlDocument2.LoadXml(text);
											xmlDocument2.DocumentElement.WriteContentTo(writer);
										}
										catch
										{
										}
										writer.WriteEndElement();
									}
								}
								if (ctlText)
								{
									writer.WriteElementString("Content_Text", element.Text);
								}
								writer.WriteEndElement();
							}
						}
						else if (element is XTextCheckBoxElementBase)
						{
							if (IsNewControl(element))
							{
								XTextCheckBoxElementBase xTextCheckBoxElementBase = (XTextCheckBoxElementBase)element;
								writer.WriteStartElement("NewCtrl");
								writer.WriteAttributeString("Id", element.ID);
								list.Add("Id");
								writer.WriteAttributeString("Type", Convert.ToInt32(GetNewControlType(element)).ToString());
								writer.WriteAttributeString("IsChecked", xTextCheckBoxElementBase.Checked ? "TRUE" : "FALSE");
								if (ctlReserve)
								{
									XAttributeList attributes = element.Attributes;
									if (attributes != null)
									{
										foreach (XAttribute item3 in attributes)
										{
											if (!IsNsoPreserveAttributeName(item3.Name) && XmlReader.IsName(item3.Name) && !list.Contains(item3.Name))
											{
												writer.WriteAttributeString(item3.Name, item3.Value);
												list.Add(item3.Name);
											}
										}
									}
									xmlDocument?.DocumentElement.WriteTo(writer);
									writer.WriteElementString("Reserve", element.GetAttribute("Reserve"));
								}
								if (ctlText)
								{
									writer.WriteElementString("Content_Text", GetNewControlText(element));
								}
								writer.WriteEndElement();
							}
						}
						else if (element is XTextContainerElement)
						{
							WriteXMLForGetAllSectAndNewCtrlContentByCurrentDoc(element, writer, sectionReserve, sectionText, sectionHtml, ctlReserve, ctlText, ctlHtml);
						}
					}
				}
			}
		}

		private void WriteXMLForGetAllSectionAndNewControlByCurrentDoc(XTextElement rootElement, XmlTextWriter writer, bool sectionReserve, bool sectionText, bool sectionHtml, bool ctlReserve, bool ctlText, bool ctlHtml)
		{
			int num = 15;
			if (rootElement.Elements != null)
			{
				foreach (XTextElement element in rootElement.Elements)
				{
					if (!(element is XTextCharElement) && !(element.GetAttribute("RecordInXML") == "FALSE"))
					{
						string attribute = element.GetAttribute("XmlNodeString");
						XmlDocument xmlDocument = null;
						if (!string.IsNullOrEmpty(attribute) && attribute.IndexOf("<") >= 0)
						{
							xmlDocument = new XmlDocument();
							xmlDocument.LoadXml(attribute);
						}
						List<string> list = new List<string>();
						if (IsNsoSection(element))
						{
							writer.WriteStartElement("Section");
							list.Add("Id");
							list.Add("Type");
							if (sectionReserve)
							{
								XAttributeList attributes = element.Attributes;
								if (attributes != null)
								{
									foreach (XAttribute item in attributes)
									{
										if (!IsNsoPreserveAttributeName(item.Name) && XmlReader.IsName(item.Name) && !list.Contains(item.Name))
										{
											writer.WriteAttributeString(item.Name, item.Value);
											list.Add(item.Name);
										}
									}
								}
							}
							WriteXMLForGetAllSectAndNewCtrlContentByCurrentDoc(element, writer, sectionReserve, sectionText, sectionHtml, ctlReserve, ctlText, ctlHtml);
							if (sectionReserve)
							{
								xmlDocument?.DocumentElement.WriteTo(writer);
								writer.WriteElementString("Reserve", element.GetAttribute("Reserve"));
							}
							if (sectionText)
							{
								writer.WriteElementString("Content_Text", element.Text);
							}
							writer.WriteEndElement();
						}
						else if (element is XTextInputFieldElement)
						{
							if (IsNewControl(element))
							{
								writer.WriteStartElement("NewCtrl");
								list.Add("Id");
								string text = null;
								if (ctlReserve)
								{
									XAttributeList attributes = element.Attributes;
									if (attributes != null)
									{
										foreach (XAttribute item2 in attributes)
										{
											if (item2.Name == "ShowControlCustom")
											{
												text = item2.Value;
											}
											else if (!IsNsoPreserveAttributeName(item2.Name) && XmlReader.IsName(item2.Name) && !list.Contains(item2.Name))
											{
												list.Add(item2.Name);
											}
										}
									}
								}
								if (ctlReserve && CompanyType != 0)
								{
									writer.WriteElementString("Reserve", element.GetAttribute("Reserve"));
								}
								if (ctlReserve)
								{
									xmlDocument?.DocumentElement.WriteTo(writer);
									if (!string.IsNullOrEmpty(text))
									{
										writer.WriteStartElement("ShowControlCustom");
										try
										{
											XmlDocument xmlDocument2 = new XmlDocument();
											xmlDocument2.LoadXml(text);
											xmlDocument2.DocumentElement.WriteContentTo(writer);
										}
										catch
										{
										}
										writer.WriteEndElement();
									}
								}
								if (ctlText)
								{
									writer.WriteElementString("Content_Text", element.Text);
								}
								writer.WriteEndElement();
							}
						}
						else if (element is XTextCheckBoxElementBase)
						{
							if (IsNewControl(element))
							{
								writer.WriteStartElement("NewCtrl");
								list.Add("Id");
								if (ctlReserve)
								{
									XAttributeList attributes = element.Attributes;
									if (attributes != null)
									{
										foreach (XAttribute item3 in attributes)
										{
											if (!IsNsoPreserveAttributeName(item3.Name) && XmlReader.IsName(item3.Name) && !list.Contains(item3.Name))
											{
												list.Add(item3.Name);
											}
										}
									}
									xmlDocument?.DocumentElement.WriteTo(writer);
									writer.WriteElementString("Reserve", element.GetAttribute("Reserve"));
								}
								if (ctlText)
								{
									writer.WriteElementString("Content_Text", GetNewControlText(element));
								}
								writer.WriteEndElement();
							}
						}
						else if (element is XTextContainerElement)
						{
							WriteXMLForGetAllSectAndNewCtrlContentByCurrentDoc(element, writer, sectionReserve, sectionText, sectionHtml, ctlReserve, ctlText, ctlHtml);
						}
					}
				}
			}
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BOOL  SetAllSectionFloadBorderColor (LONG  lRGBColor)
		                                                                    ///       功能描述：设置 光标点入Section后，出来的选择框的颜色。
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       lRGBColor	LONG	RGB 颜色值	必须	
		                                                                    ///       返回值： 
		                                                                    ///       TRUE 成功| FALSE 失败
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNsoControl1. SetAllSectionFloadBorderColor (RGB(255,0,0))
		                                                                    ///       实现说明：
		                                                                    ///       设置 光标点入Section后，出来的选择框的颜色。
		                                                                    ///       只能对所有的Section进行统一颜色设置，不能对某一个Section单独设置
		                                                                    ///       Date:10-14 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="lRGBColor">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool SetAllSectionFloadBorderColor(int lRGBColor)
		{
			BeginLogFunction("SetAllSectionFloadBorderColor", "lRGBColor=" + lRGBColor);
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual string GetAllSectAndNewCtrlContentByCurrentDoc2(string aSctContType, string aCtrlContType, int nPostionFlag, int nReserved)
		{
			AlertNotSupportedMember("GetAllSectAndNewCtrlContentByCurrentDoc2");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual string GetAllSectAndNewCtrlContentByCurrentDoc3(string aSctContType, string aCtrlContType, int nPostionFlag, int nReserved)
		{
			AlertNotSupportedMember("GetAllSectAndNewCtrlContentByCurrentDoc3");
			throw new NotSupportedException();
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       BSTR GetAllSectionAndNewControlByCurrentDoc ()
		                                                                    ///        功能描述：
		                                                                    ///       获取整个文档的Section跟新式控件的层次关系，返回xml形式的字符串
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       返回值：
		                                                                    ///       BSTR, 获取整个文档的Section跟新式控件的层次关系
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. GetAllSectionAndNewControlByCurrentDoc ()
		                                                                    ///        实现说明：
		                                                                    ///       只含有层次结构,没有结构的属性等节点
		                                                                    ///       </summary>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public virtual string GetAllSectionAndNewControlByCurrentDoc()
		{
			BeginLogFunction("GetAllSectionAndNewControlByCurrentDoc");
			StringWriter stringWriter = new StringWriter();
			XmlTextWriter xmlTextWriter = new XmlTextWriter(stringWriter);
			xmlTextWriter.WriteStartDocument();
			xmlTextWriter.WriteStartElement("DocObjContent");
			xmlTextWriter.WriteString(" ");
			WriteXMLForGetAllSectionAndNewControlByCurrentDoc(MyWriterControl.Document, xmlTextWriter, sectionReserve: true, sectionText: true, sectionHtml: false, ctlReserve: true, ctlText: true, ctlHtml: false);
			xmlTextWriter.WriteEndElement();
			xmlTextWriter.WriteEndDocument();
			xmlTextWriter.Close();
			string xmlText = stringWriter.ToString();
			xmlText = XMLHelper.CleanupXMLHeader(xmlText);
			EndLogFunction(xmlText);
			return xmlText;
		}

		[ComVisible(true)]
		public virtual string GetAllSectionAndNewControlByCurrentDoc2()
		{
			BeginLogFunction("GetAllSectionAndNewControlByCurrentDoc2");
			string allSectionAndNewControlByCurrentDoc = GetAllSectionAndNewControlByCurrentDoc();
			EndLogFunction(allSectionAndNewControlByCurrentDoc);
			return allSectionAndNewControlByCurrentDoc;
		}

		[ComVisible(true)]
		public virtual int GetAllSectionCount()
		{
			AlertNotSupportedMember("GetAllSectionCount");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual string InsertSectionAtCurrentCursor2(string sName)
		{
			int num = 16;
			BeginLogFunction("InsertSectionAtCurrentCursor2", "sName=" + sName);
			if (myEditControl.Selection.Length == 0)
			{
				return InsertSectionAtCurrentCursor(sName, null);
			}
			XTextInputFieldElement xTextInputFieldElement = myEditControl.ExecuteCommand("ConvertContentToField", showUI: false, null) as XTextInputFieldElement;
			if (xTextInputFieldElement != null)
			{
				xTextInputFieldElement.SetAttribute("NsoElementTypeName", "Section");
				xTextInputFieldElement.StartBorderText = "『";
				xTextInputFieldElement.EndBorderText = "』";
				xTextInputFieldElement.EnableHighlight = EnableState.Disabled;
				xTextInputFieldElement.ID = sName;
				xTextInputFieldElement.AcceptChildElementTypes2 = ElementType.All;
				xTextInputFieldElement.EditorRefreshView();
				EndLogFunction(xTextInputFieldElement.ID);
				return xTextInputFieldElement.ID;
			}
			EndLogFunction(null);
			return "";
		}

		[ComVisible(true)]
		public void SortRegions(string string_0, string data, string data2)
		{
			int num = 7;
			if (string.IsNullOrEmpty(string_0))
			{
				return;
			}
			BeginLogFunction("SortRegions", null);
			LogFunctionParameter("xml", string_0);
			string_0 = string_0.Trim();
			XmlDocument xmlDocument = new XmlDocument();
			if (string_0.StartsWith("<"))
			{
				xmlDocument.LoadXml(string_0);
			}
			else
			{
				xmlDocument.Load(string_0);
			}
			List<string> list = new List<string>();
			foreach (XmlNode childNode in xmlDocument.DocumentElement.ChildNodes)
			{
				if (childNode.Name == "NewCtrl")
				{
					string attribute = ((XmlElement)childNode).GetAttribute("Id");
					if (!string.IsNullOrEmpty(attribute))
					{
						list.Add(attribute);
					}
				}
			}
			XTextElementList xTextElementList = new XTextElementList();
			foreach (string item in list)
			{
				XTextElement elementById = GetElementById(item);
				if (elementById != null)
				{
					xTextElementList.Add(elementById);
					elementById.Parent.RemoveChild(elementById);
				}
			}
			if (xTextElementList.Count > 0)
			{
				for (int i = 0; i < xTextElementList.Count; i++)
				{
					myEditControl.Document.Body.Elements.method_13(i, xTextElementList[i]);
				}
				myEditControl.Document.FixDomState();
				myEditControl.Document.Body.FixElements();
				myEditControl.RefreshDocumentExt(refreshSize: false, executeLayout: true);
				myEditControl.OnDocumentContentChanged(null);
			}
			EndLogFunction(null);
		}

		public string GetXmlWithFirstLevelRegionByCurrentDoc()
		{
			BeginLogFunction("GetXmlWithFirstLevelRegionByCurrentDoc", null);
			StringWriter stringWriter = new StringWriter();
			XmlTextWriter xmlTextWriter = new XmlTextWriter(stringWriter);
			xmlTextWriter.Formatting = Formatting.None;
			xmlTextWriter.WriteStartDocument();
			xmlTextWriter.WriteStartElement("tree");
			InnerGetXmlWithFirstLevelRegionByCurrentDoc(myEditControl.Document.Body, xmlTextWriter);
			xmlTextWriter.WriteEndElement();
			xmlTextWriter.WriteEndDocument();
			string result = stringWriter.ToString();
			EndLogFunction(result);
			return result;
		}

		private void InnerGetXmlWithFirstLevelRegionByCurrentDoc(XTextElement rootElement, XmlWriter writer)
		{
			int num = 13;
			foreach (XTextElement element in rootElement.Elements)
			{
				if (IsNsoRegion(element))
				{
					List<string> list = new List<string>();
					writer.WriteStartElement("region");
					writer.WriteAttributeString("id", element.ID);
					writer.WriteAttributeString("Type", "4");
					list.Add("id");
					list.Add("Type");
					foreach (XAttribute attribute in element.Attributes)
					{
						if (!list.Contains(attribute.Name) && XmlReader.IsName(attribute.Name))
						{
							writer.WriteAttributeString(attribute.Name, attribute.Value);
						}
					}
					writer.WriteEndElement();
				}
				else if (element is XTextContainerElement)
				{
					InnerGetXmlWithFirstLevelRegionByCurrentDoc(element, writer);
				}
			}
		}

		[ComVisible(true)]
		public virtual bool SetRegionBorderVisible(bool bVisible)
		{
			int num = 19;
			BeginLogFunction("SetRegionBorderVisible", "bVisible=" + bVisible);
			if (bVisible)
			{
				myEditControl.DocumentOptions.ViewOptions.SectionBorderVisibility = RenderVisibility.All;
			}
			else
			{
				myEditControl.DocumentOptions.ViewOptions.SectionBorderVisibility = RenderVisibility.Hidden;
			}
			EndLogFunction("true");
			return true;
		}

		                                                                    /// <summary>
		                                                                    ///       设置区域的边框的显示模式
		                                                                    ///       </summary>
		                                                                    /// <param name="nViewType">1 旧模式 2 新模式</param>
		                                                                    /// <returns>True   成功 False  失败</returns>
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1.SetRegionBorderViewMode(2)
		                                                                    ///       实现说明：
		                                                                    ///       调用接口AxNsoControl1.SetRegionBorderViewMode(2)，
		                                                                    ///       区域边框显示为新模式，当光标不在任何一个区域内时，区域边框都常显灰色，
		                                                                    ///       当光标在某一个区域内时，该区域边框显示以前的彩色
		[ComVisible(true)]
		public virtual bool SetRegionBorderViewMode(int nViewType)
		{
			int num = 3;
			BeginLogFunction("SetRegionBorderViewMode", "nViewType=" + nViewType);
			if (nViewType == 2)
			{
				XTextElementList elementsByType = myEditControl.Document.GetElementsByType(typeof(XTextSectionElement));
				if (elementsByType != null)
				{
					foreach (XTextSectionElement item in elementsByType)
					{
						if (item != null)
						{
							DocumentContentStyle style = item.Style;
							style.BorderWidth = 2f;
							style.BorderColor = Color.Blue;
							style.BorderLeft = true;
							style.BorderTop = true;
							style.BorderRight = true;
							style.BorderBottom = true;
							EndLogFunction("true");
							return true;
						}
					}
				}
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool SetRegionFileLink(string strName, string strPath)
		{
			AlertNotSupportedMember("SetRegionFileLink");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool SetRegionFileLinkWithStream(string sRegionName, object stmFile)
		{
			AlertNotSupportedMember("SetRegionFileLinkWithStream");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool SetRegionFileLinkWithString(string sRegionName, string base64String)
		{
			int num = 4;
			BeginLogFunction("SetRegionFileLinkWithString", "sRegionName=" + sRegionName + "  base64String=" + base64String);
			if (string.IsNullOrEmpty(sRegionName))
			{
				EndLogFunction("false");
				return false;
			}
			if (string.IsNullOrEmpty(base64String))
			{
				EndLogFunction("false");
				return false;
			}
			XTextSectionElement xTextSectionElement = GetElementById(sRegionName) as XTextSectionElement;
			if (xTextSectionElement == null)
			{
				EndLogFunction("false");
				return false;
			}
			byte[] byte_ = Convert.FromBase64String(base64String);
			XTextDocument xTextDocument = new XTextDocument();
			if (InnerOpenDocumentBinary(byte_, xTextDocument))
			{
				using (myEditControl.CreateBackgroundModeSetter())
				{
					XTextElementList elements = xTextDocument.Body.Elements;
					if (elements.Count > 0)
					{
						myEditControl.Document.ImportElementsSpceifyImportPermssion(elements, preserveUserTrack: true, enablePermission: false);
						xTextSectionElement.Elements.Clear();
						xTextSectionElement.Elements.AddRange(elements);
						xTextSectionElement.EditorRefreshView();
						myEditControl.OnDocumentContentChanged(EventArgs.Empty);
						myEditControl.vmethod_17(null);
						EndLogFunction("true");
						return true;
					}
				}
			}
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       重新命名指定区域
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">名称</param>
		                                                                    /// <param name="sNewName">新名称</param>
		                                                                    /// <returns>False：失败 True：成功</returns>
		[ComVisible(true)]
		public virtual bool SetRegionName(string sName, string sNewName)
		{
			int num = 8;
			BeginLogFunction("SetRegionName", "sName=" + sName + " sNewName=" + sNewName);
			if (string.IsNullOrEmpty(sName) || string.IsNullOrEmpty(sNewName))
			{
				EndLogFunction("false");
				return false;
			}
			XTextSectionElement xTextSectionElement = GetElementById(sName) as XTextSectionElement;
			if (xTextSectionElement != null)
			{
				xTextSectionElement.ID = sNewName;
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       设置指定区域内容文本
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">区域名称</param>
		                                                                    /// <param name="sText">区域内容</param>
		                                                                    /// <returns>False：失败 True：成功</returns>
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. SetRegionText (“region1”)
		                                                                    ///       实现说明：
		                                                                    ///       设置区域内容不会删除区域的标题
		[ComVisible(true)]
		public virtual bool SetRegionText(string sName, string sText)
		{
			int num = 15;
			BeginLogFunction("SetRegionText", "sName=" + sName + "sText=" + sText);
			XTextSectionElement xTextSectionElement = GetElementById(sName) as XTextSectionElement;
			if (xTextSectionElement != null)
			{
				xTextSectionElement.Text = sText;
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool SetRegionTitle(string strName, string strTitle, bool bAppend)
		{
			int num = 5;
			BeginLogFunction("SetRegionTitle", "strName=" + strName + "  strTitle=" + strTitle + "  bAppend=" + bAppend);
			XTextSectionElement xTextSectionElement = GetElementById(strName) as XTextSectionElement;
			if (IsNsoRegion(xTextSectionElement) && xTextSectionElement.Elements.Count > 0)
			{
				XTextInputFieldElement regionTitleField = GetRegionTitleField(xTextSectionElement, create: true);
				string text = strTitle;
				if (bAppend)
				{
					text += Environment.NewLine;
				}
				regionTitleField.EditorTextExt = text;
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		private XTextInputFieldElement GetRegionTitleField(XTextSectionElement xtextSectionElement_0, bool create)
		{
			int num = 12;
			foreach (XTextElement element in xtextSectionElement_0.Elements)
			{
				if (element is XTextInputFieldElement)
				{
					return (XTextInputFieldElement)element;
				}
			}
			if (create)
			{
				XTextInputFieldElement xTextInputFieldElement = new XTextInputFieldElement();
				xTextInputFieldElement.SetAttribute("DCRegionTitle", "true");
				xTextInputFieldElement.ContentReadonly = ContentReadonlyState.True;
				xTextInputFieldElement.EnableHighlight = EnableState.Disabled;
				xTextInputFieldElement.Deleteable = false;
				xtextSectionElement_0.Elements.method_13(0, xTextInputFieldElement);
				xtextSectionElement_0.EditorRefreshView();
				return xTextInputFieldElement;
			}
			return null;
		}

		                                                                    /// <summary>
		                                                                    ///       设置指定区域的标题是否显示
		                                                                    ///       </summary>
		                                                                    /// <param name="strName">区域名称</param>
		                                                                    /// <param name="bVisible">是否显示	True 显示标题 False 隐藏标题</param>
		                                                                    /// <returns>False：失败 True：成功</returns>
		[ComVisible(true)]
		public virtual bool SetRegionTitleVisible(string strName, bool bVisible)
		{
			int num = 5;
			BeginLogFunction("SetRegionTitleVisible", "strName=" + strName + " bVisible=" + bVisible);
			XTextElement elementById = GetElementById(strName);
			if (elementById != null && IsNsoRegion(elementById))
			{
				XTextSectionElement xTextSectionElement = elementById as XTextSectionElement;
				if (xTextSectionElement == null)
				{
					XTextInputFieldElement xTextInputFieldElement = new XTextInputFieldElement();
					bool flag = xTextInputFieldElement.SetAttribute("DCRegionTitle", bVisible.ToString());
					xTextInputFieldElement.ContentReadonly = ContentReadonlyState.True;
					xTextInputFieldElement.EnableHighlight = EnableState.Disabled;
					xTextInputFieldElement.Deleteable = false;
					xTextSectionElement.Elements.method_13(0, xTextInputFieldElement);
					xTextSectionElement.EditorRefreshView();
					EndLogFunction(flag);
					return flag;
				}
				foreach (XTextElement element in xTextSectionElement.Elements)
				{
					if (element is XTextInputFieldElement && !string.IsNullOrEmpty(element.GetAttribute("DCRegionTtile")))
					{
						bool flag = element.SetAttribute("DCRegionTtile", bVisible.ToString());
						EndLogFunction(flag);
						return flag;
					}
				}
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual string GetCurrentRegionName()
		{
			BeginLogFunction("GetCurrentRegionName", null);
			XTextElement xTextElement = MyWriterControl.CurrentElement;
			XTextSectionElement xTextSectionElement;
			while (true)
			{
				if (xTextElement != null)
				{
					if (xTextElement is XTextSectionElement)
					{
						xTextSectionElement = (XTextSectionElement)xTextElement;
						if (IsNsoRegion(xTextSectionElement))
						{
							break;
						}
					}
					xTextElement = xTextElement.Parent;
					continue;
				}
				EndLogFunction("");
				return "";
			}
			if (xTextSectionElement.ID == null)
			{
				EndLogFunction("");
				return "";
			}
			EndLogFunction(xTextSectionElement.ID);
			return xTextSectionElement.ID;
		}

		[ComVisible(true)]
		public virtual bool DeleteRegion(string sName, int lFlag)
		{
			int num = 11;
			BeginLogFunction("DeleteRegion", "sName=" + sName + "  lFlag=" + lFlag);
			XTextElement elementById = myEditControl.GetElementById(sName);
			if (elementById != null && IsNsoRegion(elementById))
			{
				bool flag = false;
				XTextSectionElement xTextSectionElement = elementById as XTextSectionElement;
				xTextSectionElement.Focus();
				switch (lFlag)
				{
				case 1:
				{
					XTextDocument xTextDocument = xTextSectionElement.CreateContentDocument(includeThis: false);
					string xMLText = xTextDocument.XMLText;
					flag = xTextSectionElement.EditorDelete(logUndo: true);
					if (!string.IsNullOrEmpty(xMLText))
					{
						myEditControl.ExecuteCommand("InsertXML", showUI: false, xMLText);
					}
					EndLogFunction(flag);
					myEditControl.RefreshDocument();
					return flag;
				}
				case 2:
					xTextSectionElement.Elements.Clear();
					myEditControl.RefreshDocument();
					return true;
				case 3:
					EndLogFunction(xTextSectionElement.EditorDelete(logUndo: true));
					flag = xTextSectionElement.EditorDelete(logUndo: true);
					myEditControl.RefreshDocument();
					return flag;
				}
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool DeleteRegionTitle(string strName)
		{
			int num = 17;
			BeginLogFunction("DeleteRegionTitle", "strName=" + strName);
			XTextElement elementById = GetElementById(strName);
			if (elementById != null && IsNsoRegion(elementById))
			{
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual int GetRegionBegin(string sName)
		{
			BeginLogFunction("GetRegionBegin", "sName=" + sName);
			XTextSectionElement xTextSectionElement = GetElementById(sName) as XTextSectionElement;
			if (IsNsoRegion(xTextSectionElement))
			{
				EndLogFunction(xTextSectionElement.FirstContentElementInPublicContent.ViewIndex);
				return xTextSectionElement.FirstContentElementInPublicContent.ViewIndex;
			}
			EndLogFunction(-1);
			return -1;
		}

		[ComVisible(true)]
		public virtual int GetRegionEnd(string sName)
		{
			BeginLogFunction("GetRegionEnd", "sName=" + sName);
			XTextSectionElement xTextSectionElement = GetElementById(sName) as XTextSectionElement;
			if (IsNsoRegion(xTextSectionElement))
			{
				EndLogFunction(xTextSectionElement.LastContentElementInPublicContent.ViewIndex);
				return xTextSectionElement.LastContentElementInPublicContent.ViewIndex;
			}
			EndLogFunction(-1);
			return -1;
		}

		                                                                    /// <summary>
		                                                                    ///       获取当前文档每页第一行所在的区域id
		                                                                    ///       </summary>
		                                                                    /// <param name="nFlag">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public string GetRegionNamesByStartPosOfPage(int nFlag)
		{
			BeginLogFunction("GetRegionNamesByStartPosOfPage", "nFlag=" + nFlag);
			PrintPage printPage = null;
			List<XTextSectionElement> list = new List<XTextSectionElement>();
			for (int i = 0; i < Document.Body.Lines.Count; i++)
			{
				XTextLine xTextLine = Document.Body.Lines[i];
				if (printPage == null || xTextLine.OwnerPage != printPage)
				{
					printPage = xTextLine.OwnerPage;
					XTextElement xTextElement = xTextLine[0];
					if (xTextElement is XTextParagraphListItemElement && xTextLine.Count > 1)
					{
						xTextElement = xTextLine[1];
					}
					XTextSectionElement xTextSectionElement = (XTextSectionElement)xTextElement.GetOwnerParent(typeof(XTextSectionElement), includeThis: true);
					if (xTextSectionElement != null)
					{
						list.Add(xTextSectionElement);
					}
				}
			}
			list.Reverse();
			StringBuilder stringBuilder = new StringBuilder();
			foreach (XTextSectionElement item in list)
			{
				if (stringBuilder.Length > 0)
				{
					stringBuilder.Append(',');
				}
				stringBuilder.Append(item.ID);
			}
			EndLogFunction(stringBuilder.ToString());
			return stringBuilder.ToString();
		}

		                                                                    /// <summary>
		                                                                    ///       获取当前文档每页最后一行所在的区域id
		                                                                    ///       </summary>
		                                                                    /// <param name="nFlag">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public string GetRegionNamesByEndPosOfPage(int nFlag)
		{
			BeginLogFunction("GetRegionNamesByEndPosOfPage", "nFlag=" + nFlag);
			PrintPage printPage = null;
			List<XTextSectionElement> list = new List<XTextSectionElement>();
			for (int num = Document.Body.Lines.Count - 1; num >= 0; num--)
			{
				XTextLine xTextLine = Document.Body.Lines[num];
				if (printPage == null || xTextLine.OwnerPage != printPage)
				{
					printPage = xTextLine.OwnerPage;
					XTextElement xTextElement = xTextLine[0];
					if (xTextElement is XTextParagraphListItemElement && xTextLine.Count > 1)
					{
						xTextElement = xTextLine[1];
					}
					XTextSectionElement xTextSectionElement = (XTextSectionElement)xTextElement.GetOwnerParent(typeof(XTextSectionElement), includeThis: true);
					if (xTextSectionElement != null)
					{
						list.Add(xTextSectionElement);
					}
				}
			}
			list.Reverse();
			StringBuilder stringBuilder = new StringBuilder();
			foreach (XTextSectionElement item in list)
			{
				if (stringBuilder.Length > 0)
				{
					stringBuilder.Append(',');
				}
				stringBuilder.Append(item.ID);
			}
			EndLogFunction(stringBuilder.ToString());
			return stringBuilder.ToString();
		}

		                                                                    /// <summary>
		                                                                    ///       获取某个页的页末位置 光标 所在的区域名称，用分号隔开(“;”)
		                                                                    ///       </summary>
		                                                                    /// <param name="sPageRange">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		public string GetRegionNamesByPage(string sPageRange, bool flag)
		{
			BeginLogFunction("GetRegionNamesByPage", "sPageRange=" + sPageRange + "  flag=" + flag);
			EndLogFunction("");
			return "";
		}

		[ComVisible(true)]
		public virtual string GetRegionNamesBySelectArea()
		{
			int num = 8;
			BeginLogFunction("GetRegionNamesBySelectArea", null);
			XTextElementList contentElements = MyWriterControl.Selection.ContentElements;
			if (contentElements != null && contentElements.Count > 0)
			{
				XTextElementList elementsByTypeDeeply = contentElements.GetElementsByTypeDeeply(typeof(XTextSectionElement));
				if (elementsByTypeDeeply != null && elementsByTypeDeeply.Count > 0)
				{
					StringBuilder stringBuilder = new StringBuilder();
					foreach (XTextElement item in elementsByTypeDeeply)
					{
						stringBuilder.Append(item.ID).Append(",");
					}
					EndLogFunction(stringBuilder.ToString().Substring(0, stringBuilder.ToString().Length - 1));
					return stringBuilder.ToString().Substring(0, stringBuilder.ToString().Length - 1);
				}
				EndLogFunction(string.Empty);
				return string.Empty;
			}
			EndLogFunction(string.Empty);
			return string.Empty;
		}

		[ComVisible(true)]
		public virtual bool SetRegionProp(string sName, string sProp, string sValue)
		{
			BeginLogFunction("SetRegionProp", "sName=" + sName + " " + sProp + "=>" + sValue);
			XTextSectionElement xTextSectionElement = GetElementById(sName) as XTextSectionElement;
			if (xTextSectionElement == null)
			{
				return false;
			}
			bool flag = SetRegionProp(xTextSectionElement, sProp, sValue);
			EndLogFunction(flag);
			return flag;
		}

		private bool SetRegionProp(XTextSectionElement field, string sProp, string sValue)
		{
			int num = 10;
			switch (sProp)
			{
			case "bDeleteProtect":
			{
				bool flag = string.Compare(sValue, "TRUE", ignoreCase: true) == 0;
				break;
			}
			case "bEditInReadOnly":
			{
				bool flag;
				if (flag = (string.Compare(sValue, "TRUE", ignoreCase: true) == 0))
				{
					field.ContentReadonly = ContentReadonlyState.False;
				}
				else
				{
					field.ContentReadonly = ContentReadonlyState.Inherit;
				}
				break;
			}
			case "bEditProtect":
			{
				bool flag;
				if (flag = (string.Compare(sValue, "TRUE", ignoreCase: true) == 0))
				{
					field.ContentReadonly = ContentReadonlyState.True;
				}
				else
				{
					field.ContentReadonly = ContentReadonlyState.Inherit;
				}
				break;
			}
			case "bVisible":
			{
				bool flag = string.Compare(sValue, "TRUE", ignoreCase: true) == 0;
				if (field.Visible != flag)
				{
					field.Visible = flag;
					field.EditorRefreshView();
				}
				break;
			}
			case "AllRegionProp_CS2C":
			{
				if (string.IsNullOrEmpty(sValue))
				{
					return false;
				}
				XmlDocument xmlDocument = new XmlDocument();
				xmlDocument.LoadXml(sValue);
				if (xmlDocument.DocumentElement.GetAttribute("Id") != field.ID)
				{
					return false;
				}
				XmlNode xmlNode = xmlDocument.SelectSingleNode("Region/InnateProp");
				if (xmlNode != null)
				{
					foreach (XmlNode childNode in xmlNode.ChildNodes)
					{
						if (childNode is XmlElement)
						{
							SetRegionProp(field, childNode.Name, childNode.InnerText);
						}
					}
				}
				xmlNode = xmlDocument.SelectSingleNode("Region/CustomProp");
				if (xmlNode != null)
				{
					foreach (XmlNode childNode2 in xmlNode.ChildNodes)
					{
						if (childNode2 is XmlElement)
						{
							SetRegionProp(field, childNode2.Name, childNode2.InnerText);
						}
					}
				}
				break;
			}
			default:
				field.SetAttribute(sProp, sValue);
				break;
			}
			return true;
		}

		[ComVisible(true)]
		public virtual string GetRegionProp(string sName, string sProp)
		{
			BeginLogFunction("GetRegionProp", "sName=" + sName + "  sProp=" + sProp);
			XTextSectionElement xTextSectionElement = GetElementById(sName) as XTextSectionElement;
			if (xTextSectionElement != null && myEditControl.DocumentControler.CanModify(xTextSectionElement))
			{
				EndLogFunction(GetRegionProp(xTextSectionElement, sProp));
				return GetRegionProp(xTextSectionElement, sProp);
			}
			EndLogFunction("");
			return "";
		}

		private string GetRegionProp(XTextSectionElement xtextSectionElement_0, string sProp)
		{
			int num = 6;
			switch (sProp)
			{
			case "bEditProtect":
				return (xtextSectionElement_0.ContentReadonly == ContentReadonlyState.True).ToString();
			case "bDeleteProtect":
				return xtextSectionElement_0.Deleteable.ToString();
			case "bVisible":
				return xtextSectionElement_0.Visible.ToString();
			case "bEditInReadOnly":
				return (xtextSectionElement_0.ContentReadonly == ContentReadonlyState.False).ToString();
			case "AllRegionProp_CS2C":
			{
				StringWriter stringWriter = new StringWriter();
				XmlTextWriter xmlTextWriter = new XmlTextWriter(stringWriter);
				xmlTextWriter.Indentation = 1;
				xmlTextWriter.IndentChar = ' ';
				xmlTextWriter.Formatting = Formatting.Indented;
				xmlTextWriter.WriteStartDocument();
				xmlTextWriter.WriteStartElement("Region");
				xmlTextWriter.WriteAttributeString("Id", xtextSectionElement_0.ID);
				xmlTextWriter.WriteStartElement("InnateProp");
				xmlTextWriter.WriteElementString("bEditProtect", GetRegionProp(xtextSectionElement_0, "bEditProtect"));
				xmlTextWriter.WriteElementString("bDeleteProtect", GetRegionProp(xtextSectionElement_0, "bDeleteProtect"));
				xmlTextWriter.WriteElementString("bVisible", GetRegionProp(xtextSectionElement_0, "bVisible"));
				xmlTextWriter.WriteElementString("bEditInReadOnly", GetRegionProp(xtextSectionElement_0, "bEditInReadOnly"));
				xmlTextWriter.WriteEndElement();
				xmlTextWriter.WriteStartElement("CustomProp");
				foreach (XAttribute attribute in xtextSectionElement_0.Attributes)
				{
					xmlTextWriter.WriteElementString(attribute.Name, attribute.Value);
				}
				xmlTextWriter.WriteEndElement();
				xmlTextWriter.WriteEndElement();
				xmlTextWriter.WriteEndDocument();
				xmlTextWriter.Close();
				string xmlText = stringWriter.ToString();
				return XMLHelper.CleanupXMLHeader(xmlText);
			}
			default:
				return xtextSectionElement_0.GetAttribute(sProp);
			}
		}

		[ComVisible(true)]
		public virtual string GetRegionText(string sName)
		{
			BeginLogFunction("GetRegionText", "sName=" + sName);
			XTextSectionElement xTextSectionElement = GetElementById(sName) as XTextSectionElement;
			if (xTextSectionElement != null)
			{
				BeginLogFunction(xTextSectionElement.Text);
				return xTextSectionElement.Text;
			}
			BeginLogFunction("");
			return "";
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       BSTR GetRegionTitle (BSTR strName)
		                                                                    ///       功能描述：
		                                                                    ///       获得指定区域的标题内容
		                                                                    ///        参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       strName	BSTR　	区域名称	 必需	
		                                                                    ///             返回值：
		                                                                    ///       BSTR, 区域的标题内容
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. GetRegionTitle (“region1”)
		                                                                    ///         实现说明：
		                                                                    ///       	无
		                                                                    ///       </summary>
		                                                                    /// <param name="strName">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public virtual string GetRegionTitle(string strName)
		{
			BeginLogFunction("GetRegionTitle", "strName=" + strName);
			XTextSectionElement xTextSectionElement = myEditControl.GetElementById(strName) as XTextSectionElement;
			if (xTextSectionElement != null)
			{
				XTextInputFieldElement regionTitleField = GetRegionTitleField(xTextSectionElement, create: false);
				if (regionTitleField != null)
				{
					string text = regionTitleField.Text;
					if (text == null)
					{
						EndLogFunction("");
						return "";
					}
					EndLogFunction(text);
					return text;
				}
			}
			EndLogFunction("");
			return "";
		}

		                                                                    /// <summary>
		                                                                    ///       以XML格式依次返回指定区域的Region, Section 和NewControl的层次关系
		                                                                    ///       可以按照用户传递进来的参数自定义返回结构内容
		                                                                    ///       </summary>
		                                                                    /// <param name="strName">区域名称</param>
		                                                                    /// <param name="aSctContType">Section节点包含的内容</param>
		                                                                    /// <param name="aCtrlContType">NewControl节点包含的内容</param>
		                                                                    /// <param name="sRev1">保留参数目前无用</param>
		                                                                    /// <param name="sRev2">保留参数目前无用</param>
		                                                                    /// <param name="sRev3">保留参数目前无用</param>
		                                                                    /// <returns>Text内容跟类型 是默认返回的，不需要设置</returns>
		[ComVisible(true)]
		public virtual string GetRegionXmlInfoByParament(string strName, string aSctContType, string aCtrlContType, string sRev1, string sRev2, string sRev3)
		{
			int num = 3;
			BeginLogFunction("GetRegionXmlInfoByParament", "strName=" + strName + "aSctContType=" + aSctContType + "  aCtrlContType=" + aCtrlContType + "  sRev1=" + sRev1 + "  sRev2=" + sRev2 + "  sRev3=" + sRev3);
			float tickCountFloat = CountDown.GetTickCountFloat();
			StringWriter stringWriter = new StringWriter();
			XmlTextWriter xmlTextWriter = new XmlTextWriter(stringWriter);
			xmlTextWriter.WriteStartDocument();
			xmlTextWriter.WriteStartElement("DocObjContent");
			xmlTextWriter.WriteString(" ");
			XTextElement elementById = GetElementById(strName);
			WriteXMLForGetRegionContentByByCurrentRegion(elementById, xmlTextWriter, sectionReserve: true, sectionText: true, sectionHtml: false, ctlReserve: true, ctlText: true, ctlHtml: false);
			xmlTextWriter.WriteEndElement();
			xmlTextWriter.WriteEndDocument();
			xmlTextWriter.Close();
			string xmlText = stringWriter.ToString();
			xmlText = XMLHelper.CleanupXMLHeader(xmlText);
			tickCountFloat = CountDown.GetTickCountFloat() - tickCountFloat;
			if (myEditControl.DocumentOptions.BehaviorOptions.SpecifyDebugMode)
			{
				MessageBox.Show(this, "GetRegionXmlInfoByParament(" + aSctContType + "," + aCtrlContType + ") 耗时 " + tickCountFloat + " 毫秒");
			}
			EndLogFunction(xmlText);
			return xmlText;
		}

		                                                                    /// <summary>
		                                                                    ///       在指定区域的后面插入一个区域，并且指定插入区域的名称
		                                                                    ///       </summary>
		                                                                    /// <param name="strInsertRegion">插入区域的名称</param>
		                                                                    /// <param name="strNamedRegion">指定区域的名称</param>
		                                                                    /// <returns>False：失败 True：成功</returns>
		[ComVisible(true)]
		public virtual bool InsertRegionAfterNamedRegion(string strInsertRegion, string strNamedRegion)
		{
			int num = 18;
			BeginLogFunction("InsertRegionAfterNamedRegion", "strInsertRegion=" + strInsertRegion + " strNamedRegion=" + strNamedRegion);
			if (string.IsNullOrEmpty(strInsertRegion))
			{
				EndLogFunction("false");
				return false;
			}
			XTextElement elementById = GetElementById(strNamedRegion);
			if (elementById == null)
			{
				EndLogFunction("false");
				return false;
			}
			if (IsNsoRegion(elementById))
			{
				XTextSectionElement xTextSectionElement = new XTextSectionElement();
				xTextSectionElement.ID = strInsertRegion;
				xTextSectionElement.Name = strInsertRegion;
				xTextSectionElement.SetAttribute("NsoElementTypeName", "Region");
				bool flag = elementById.Parent.Elements.InsertAfter(elementById, xTextSectionElement);
				elementById.Parent.EditorRefreshView();
				if (flag)
				{
					EndLogFunction("true");
					return true;
				}
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual string InsertRegionAtCurrentCursor(string sName)
		{
			int num = 0;
			BeginLogFunction("InsertRegionAtCurrentCursor", "sName=" + sName);
			bool backgroundMode = myEditControl.BackgroundMode;
			myEditControl.BackgroundMode = true;
			try
			{
				if (Document.Selection.Length == 0)
				{
					XTextSectionElement xTextSectionElement = new XTextSectionElement();
					xTextSectionElement.SetAttribute("NsoElementTypeName", "Region");
					xTextSectionElement.ID = sName;
					xTextSectionElement.CompressOwnerLineSpacing = true;
					XTextSectionElement xTextSectionElement2 = (XTextSectionElement)myEditControl.GetCurrentElement(typeof(XTextSectionElement));
					if (xTextSectionElement2 != null)
					{
						int viewIndex = xTextSectionElement2.PrivateContent.LastContentElement.ViewIndex;
						myEditControl.MoveToPosition(viewIndex + 1);
					}
					object obj = myEditControl.ExecuteCommand("InsertSection", showUI: false, xTextSectionElement);
					if (obj != null)
					{
						xTextSectionElement.Focus();
						EndLogFunction(sName);
						return sName;
					}
				}
				else
				{
					XTextSectionElement xTextSectionElement2 = new XTextSectionElement();
					xTextSectionElement2.SetAttribute("NsoElementTypeName", "Region");
					xTextSectionElement2.ID = sName;
					xTextSectionElement2.CompressOwnerLineSpacing = true;
					object obj2 = myEditControl.ExecuteCommand("ConvertContentToContainerElement", showUI: false, xTextSectionElement2);
					if (obj2 is XTextSectionElement)
					{
						xTextSectionElement2.SetAttribute("NsoElementTypeName", "Region");
						xTextSectionElement2.ID = sName;
						xTextSectionElement2.Focus();
						EndLogFunction(xTextSectionElement2.ID);
						return xTextSectionElement2.ID;
					}
				}
				EndLogFunction(null);
				return "";
			}
			finally
			{
				myEditControl.BackgroundMode = backgroundMode;
			}
		}

		[ComVisible(true)]
		public virtual string GetAllRegionNamesByCurrentDoc()
		{
			int num = 19;
			BeginLogFunction("GetAllRegionNamesByCurrentDoc", null);
			StringBuilder stringBuilder = new StringBuilder();
			foreach (XTextSectionElement item in myEditControl.Document.GetElementsByType(typeof(XTextSectionElement)))
			{
				stringBuilder.Append(item.ID);
				stringBuilder.Append(",");
			}
			EndLogFunction(stringBuilder.ToString());
			return stringBuilder.ToString();
		}

		                                                                    /// <summary>
		                                                                    ///       在指定区域的前面插入一个区域，并且指定插入区域的名称
		                                                                    ///       </summary>
		                                                                    /// <param name="strInsertRegion">插入区域的名称</param>
		                                                                    /// <param name="strNamedRegion">指定区域的名称</param>
		                                                                    /// <returns>False：失败 True：成功</returns>
		[ComVisible(true)]
		public virtual bool InsertRegionBeforeNamedRegion(string strInsertRegion, string strNamedRegion)
		{
			int num = 17;
			if (string.IsNullOrEmpty(strInsertRegion))
			{
				EndLogFunction("false");
				return false;
			}
			XTextElement elementById = GetElementById(strNamedRegion);
			if (elementById == null)
			{
				EndLogFunction("false");
				return false;
			}
			if (IsNsoRegion(elementById))
			{
				XTextSectionElement xTextSectionElement = new XTextSectionElement();
				xTextSectionElement.ID = strInsertRegion;
				xTextSectionElement.Name = strInsertRegion;
				xTextSectionElement.SetAttribute("NsoElementTypeName", "Region");
				bool flag = elementById.Parent.Elements.InsertBefore(elementById, xTextSectionElement);
				elementById.Parent.EditorRefreshView();
				if (flag)
				{
					EndLogFunction("true");
					return true;
				}
			}
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>        
		                                                                    ///       选中指定名称的区域
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">区域名称</param>
		                                                                    /// <param name="bOnlyContent">是否只是选中内容,True － 只选中区域的内容,False － 选中整个区域结构</param>
		                                                                    /// <returns>true 成功,false 失败</returns>
		[ComVisible(true)]
		public virtual bool SelectOneRegion(string sName, bool bOnlyContent)
		{
			int num = 6;
			BeginLogFunction("SelectOneRegion", "sName =" + sName + " bOnlyContent =" + bOnlyContent);
			XTextElement elementById = myEditControl.GetElementById(sName);
			if (elementById != null && IsNsoRegion(elementById))
			{
				XTextSectionElement xTextSectionElement = elementById as XTextSectionElement;
				xTextSectionElement.Focus();
				if (bOnlyContent)
				{
					xTextSectionElement.ContentElement.Select();
					EndLogFunction("true");
					return true;
				}
				xTextSectionElement.Select();
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool SelectRegionTitle(string strName)
		{
			int num = 2;
			BeginLogFunction("SelectRegionTitle", "strName=" + strName);
			XTextSectionElement xTextSectionElement = GetElementById(strName) as XTextSectionElement;
			if (IsNsoRegion(xTextSectionElement) && xTextSectionElement.Elements.Count > 0)
			{
				XTextInputFieldElement regionTitleField = GetRegionTitleField(xTextSectionElement, create: false);
				if (regionTitleField != null)
				{
					regionTitleField.Select();
					EndLogFunction("true");
					return true;
				}
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool SetCanEditRegionTitleProperty(bool bCan)
		{
			AlertNotSupportedMember("SetCanEditRegionTitleProperty");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public void SetLimitNumOfPasteCharacters(int nType, int nCharacters, string string_0)
		{
			int num = 0;
			BeginLogFunction("SetLimitNumOfPasteCharacters", "nType=" + nType + "  nCharacters=" + nCharacters + "  msg=" + string_0);
			if (nType == 0)
			{
				_Max_SetLimitNumOfPasteCharacters = 0;
			}
			else
			{
				_Max_SetLimitNumOfPasteCharacters = nCharacters;
			}
			if (string.IsNullOrEmpty(string_0))
			{
				_Msg_SetLimitNumOfPasteCharacters = "超过允许复制到最大字数.";
			}
			else
			{
				_Msg_SetLimitNumOfPasteCharacters = string_0;
			}
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public void InsertTextAtCurrentCursor(string sText)
		{
			BeginLogFunction("InsertTextAtCurrentCursor", "sText=" + sText);
			MyWriterControl.ExecuteCommand("InsertString", showUI: false, sText);
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public bool AddPostilAtCurrentCursor(string strPostilConent, string strDateTime)
		{
			int num = 0;
			if (!pnlMainContainer.Visible)
			{
				return false;
			}
			BeginLogFunction("AddPostilAtCurrentCursor", "strPostilConent=" + strPostilConent + " strDateTime=" + strDateTime);
			DocumentComment documentComment = new DocumentComment();
			documentComment.Text = strPostilConent;
			if (!string.IsNullOrEmpty(strDateTime))
			{
				DateTime result = Document.GetNowDateTime();
				if (DateTime.TryParse(strDateTime, out result))
				{
					documentComment.CreationTime = result;
				}
				else
				{
					documentComment.CreationTime = Document.GetNowDateTime();
				}
			}
			else
			{
				documentComment.CreationTime = Document.GetNowDateTime();
			}
			documentComment.CreatorIndex = Document.UserHistories.CurrentIndex;
			if (Document.UserHistories.Count > 0 && myEditControl.DocumentOptions.SecurityOptions.EnablePermission)
			{
				documentComment.Author = Document.UserHistories.CurrentInfo.Name;
				documentComment.AuthorID = Document.UserHistories.CurrentInfo.ID;
				documentComment.BindingUserTrack = true;
			}
			object obj = myEditControl.ExecuteCommand("InsertComment", showUI: false, documentComment);
			EndLogFunction(obj);
			if (obj is bool)
			{
				EndLogFunction(((bool)obj).ToString());
				return (bool)obj;
			}
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       设置是否可以从外部(比如IE，记事本，VS等等)拷贝到odt文档
		                                                                    ///       </summary>
		                                                                    /// <param name="bEnable">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool EnableCopyFromExternal(bool bEnable)
		{
			int num = 2;
			BeginLogFunction("EnableCopyFromExternal", "bEnable=" + bEnable);
			if (!bEnable)
			{
				MyWriterControl.AcceptDataFormats = WriterDataFormats.All;
				MyWriterControl.DataObjectRange = WriterDataObjectRange.Application;
				MyWriterControl.ClearInnerDataObject();
			}
			else
			{
				MyWriterControl.AcceptDataFormats = WriterDataFormats.All;
				MyWriterControl.DataObjectRange = WriterDataObjectRange.OS;
				MyWriterControl.ClearInnerDataObject();
			}
			EndLogFunction("true");
			return true;
		}

		[ComVisible(true)]
		public void SetCanCopyFromActiveX(bool bCanCopy)
		{
			BeginLogFunction("SetCanCopyFromActiveX", "bCanCopy=" + bCanCopy);
			_Value_SetCanCopyFromActiveX = !bCanCopy;
			if (bCanCopy)
			{
				MyWriterControl.DocumentOptions.BehaviorOptions.InsertDocumentWithCheckMRID = InsertDocumentWithCheckMRIDType.PromptForbitWhenFail;
			}
			else
			{
				MyWriterControl.DocumentOptions.BehaviorOptions.InsertDocumentWithCheckMRID = InsertDocumentWithCheckMRIDType.ForbitWhenFail;
			}
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public void SetExtraCopyInformation(string bstrExtraCopyInformation)
		{
			BeginLogFunction("SetExtraCopyInformation", "bstrExtraCopyInformation=" + bstrExtraCopyInformation);
			_Value_SetExtraCopyInformation = bstrExtraCopyInformation;
			MyWriterControl.Document.Info.MRID = bstrExtraCopyInformation;
			EndLogFunction(null);
		}

		                                                                    /// <summary>
		                                                                    ///       在指定位置上插入新的一行 
		                                                                    ///       BOOL InsertNewLine（long nPosition, Long* pVal）pVal为可选参数
		                                                                    ///       函数说明：
		                                                                    ///       BOOL InsertNewLine（long nPosition, Long* pVal）
		                                                                    ///       功能描述：
		                                                                    ///       在指定位置上插入新的一行
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       nPosition	Long	指定位置	必需	从1开始
		                                                                    ///       pVal	Long*		可选	
		                                                                    ///       返回值：
		                                                                    ///       False：失败
		                                                                    ///       True： 成功
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1.InsertNewLine（1）
		                                                                    ///       功能描述：无
		                                                                    ///       Date:10-8 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="nPosition">
		                                                                    /// </param>
		                                                                    /// <returns>False：失败 True： 成功</returns>
		[ComVisible(true)]
		public bool InsertNewLine(int nPosition)
		{
			int num = 0;
			try
			{
				BeginLogFunction("InsertNewLine", "POsition=" + nPosition);
				if (nPosition >= 0)
				{
					myEditControl.ExecuteCommand("MoveToPosition", showUI: false, nPosition);
				}
				myEditControl.ExecuteCommand("InsertParagrahFlag", showUI: false, null);
				EndLogFunction("true");
				return true;
			}
			catch
			{
				EndLogFunction("false");
				return false;
			}
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       BSTR CopySelectArea (BOOL bCopyWithBookmark)
		                                                                    ///       功能描述：
		                                                                    ///       拷贝选中区域内容；
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       bCopyWithBookmark	BOOL	是否带结构	必需	
		                                                                    ///       返回值：
		                                                                    ///       -1：表示拷贝操作失败；0：表示选中区域中无Control和Section；多个Object名称采用逗号分隔，依此排列。如果某个Control在Section内，只返回Section的名称
		                                                                    ///       如果返回值为空，则表示拷贝不带结构
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. CopySelectArea ()
		                                                                    ///       实现说明：
		                                                                    ///       无
		                                                                    ///       Date:10-9 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="bCopyWithBookmark">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public string CopySelectArea(bool bCopyWithBookmark)
		{
			int num = 9;
			BeginLogFunction("CopySelectArea", "bCopyWithBookmark=" + bCopyWithBookmark);
			string text = null;
			if (bCopyWithBookmark)
			{
				myEditControl.ExecuteCommand("Copy", showUI: false, null);
				if (myEditControl.Selection.Document.GetElementsByType(typeof(XTextInputFieldElement)).Count == 0)
				{
					text = "0";
				}
				else
				{
					StringBuilder stringBuilder = new StringBuilder();
					XTextElementList elementsByType = myEditControl.Selection.Document.GetElementsByType(typeof(XTextInputFieldElement));
					foreach (XTextElement item in elementsByType)
					{
						stringBuilder.Append(item.ID);
						stringBuilder.Append(",");
					}
					text = stringBuilder.ToString();
				}
			}
			else
			{
				WriterDataFormats creationDataFormats = myEditControl.CreationDataFormats;
				myEditControl.CreationDataFormats = WriterDataFormats.Text;
				myEditControl.ExecuteCommand("Copy", showUI: false, null);
				myEditControl.CreationDataFormats = creationDataFormats;
				if (myEditControl.Selection.Document.GetElementsByType(typeof(XTextInputFieldElement)).Count == 0)
				{
					text = "0";
				}
				else
				{
					StringBuilder stringBuilder = new StringBuilder();
					XTextElementList elementsByType = myEditControl.Selection.Document.GetElementsByType(typeof(XTextInputFieldElement));
					foreach (XTextElement item2 in elementsByType)
					{
						if (stringBuilder.Length > 0)
						{
							stringBuilder.Append(",");
						}
						stringBuilder.Append(item2.ID);
					}
					text = stringBuilder.ToString();
				}
			}
			EndLogFunction(text);
			return text;
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       BSTR CutSelectArea ()
		                                                                    ///       功能描述：
		                                                                    ///       剪切选中区域内容;
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值			
		                                                                    ///       返回值：
		                                                                    ///       BSTR, -1：表示剪切操作失败；0：表示选中区域中无 Control 和Section；如果某个 Control 在 Section 内，只返回Section的名称
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. CutSelectArea ()
		                                                                    ///       实现说明：
		                                                                    ///       无
		                                                                    ///       Date:10-9 Jy
		                                                                    ///       </summary>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public string CutSelectArea()
		{
			int num = 9;
			string text = null;
			BeginLogFunction("CutSelectArea", null);
			myEditControl.ExecuteCommand("Cut", showUI: false, null);
			XTextElementList elementsByType = myEditControl.Selection.Document.GetElementsByType(typeof(XTextInputFieldElement));
			if (elementsByType.Count == 0)
			{
				text = "0";
			}
			else
			{
				StringBuilder stringBuilder = new StringBuilder();
				foreach (XTextElement item in elementsByType)
				{
					if (stringBuilder.Length > 0)
					{
						stringBuilder.Append(",");
					}
					if (IsNsoSection(item))
					{
						stringBuilder.Append(item.ID);
					}
				}
				text = stringBuilder.ToString();
			}
			EndLogFunction(text);
			return text;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BSTR PasteAtCurrentCursor ()
		                                                                    ///       功能描述：
		                                                                    ///       在当前光标位置粘贴的内存内容
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       返回值：
		                                                                    ///       -1：表示删除操作失败；0：表示内容中无Control和Section；多个Object名称采用逗号分隔，依此排列。如果某个Control在Section内，只返回Section的名称
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1. PasteAtCurrentCursor ()
		                                                                    ///       实现说明：
		                                                                    ///       无
		                                                                    ///       Date:10-9 Jy
		                                                                    ///       </summary>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public string PasteAtCurrentCursor()
		{
			int num = 17;
			string text = null;
			BeginLogFunction("PasteAtCurrentCursor", null);
			try
			{
				myEditControl.ExecuteCommand("Paste", showUI: false, null);
				XTextElementList lastNewElements = myEditControl.Document.LastNewElements;
				if (lastNewElements.method_5(typeof(XTextInputFieldElement)) == null)
				{
					StringBuilder stringBuilder = new StringBuilder();
					foreach (XTextElement item in lastNewElements)
					{
						if (item is XTextInputFieldElement)
						{
							if (stringBuilder.Length > 0)
							{
								stringBuilder.Append(",");
							}
							if (IsNsoSection(item))
							{
								stringBuilder.Append(item.ID);
							}
						}
					}
					text = stringBuilder.ToString();
				}
				else
				{
					text = "0";
				}
			}
			catch
			{
				text = "-1";
			}
			EndLogFunction(text);
			return text;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       void Redo ( void )
		                                                                    ///       功能描述：
		                                                                    ///       操作重做。
		                                                                    ///       参数：无
		                                                                    ///       返回值：无
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1.Redo()
		                                                                    ///       实现说明：
		                                                                    ///       Date:10-9 Jy
		                                                                    ///       </summary>
		[ComVisible(true)]
		public void Redo()
		{
			BeginLogFunction("Redo", null);
			myEditControl.ExecuteCommand("Redo", showUI: false, null);
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public string DeleteSelectArea()
		{
			int num = 17;
			BeginLogFunction("DeleteSelectArea", null);
			if (!pnlMainContainer.Visible)
			{
				EndLogFunction("-1");
				return "-1";
			}
			if (myEditControl.Document.Selection.ContentElements.Count > 0)
			{
				string sectionNewControlIDs = GetSectionNewControlIDs(myEditControl.Selection.ContentElements);
				if ((bool)myEditControl.ExecuteCommand("Delete", showUI: false, null))
				{
					if (sectionNewControlIDs.Length > 0)
					{
						EndLogFunction(sectionNewControlIDs);
						return sectionNewControlIDs;
					}
					EndLogFunction("0");
					return "0";
				}
				EndLogFunction("-1");
				return "-1";
			}
			EndLogFunction("-1");
			return "-1";
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       void Undo ( void )
		                                                                    ///       功能描述：
		                                                                    ///       撤销操作。
		                                                                    ///       参数：无
		                                                                    ///       返回值：无
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1.Undo()
		                                                                    ///       实现说明：
		                                                                    ///       Date:10-14 Jy
		                                                                    ///       </summary>
		[ComVisible(true)]
		public void Undo()
		{
			BeginLogFunction("Undo", null);
			myEditControl.ExecuteCommand("Undo", showUI: false, null);
			EndLogFunction(null);
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       void Cut ( void )
		                                                                    ///       功能描述：
		                                                                    ///       剪切当前选定的内容。
		                                                                    ///       参数：无
		                                                                    ///       返回值：无
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1.Cut()
		                                                                    ///       实现说明：无
		                                                                    ///       Date:10-14 Jy
		                                                                    ///       </summary>
		[ComVisible(true)]
		public void Cut()
		{
			BeginLogFunction("Cut", null);
			myEditControl.ExecuteCommand("Cut", showUI: false, null);
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public virtual bool AddLineBeforeTableAtHead()
		{
			BeginLogFunction("AddLineBeforeTableAtHead", null);
			AlertNotSupportedMember("AddLineBeforeTableAtHead");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual string AddSignaturePic(string sPath)
		{
			BeginLogFunction("AddSignaturePic", "sPath=" + sPath);
			XTextImageElement xTextImageElement = new XTextImageElement();
			xTextImageElement.OwnerDocument = Document;
			xTextImageElement.LoadImage(sPath, setSize: true);
			xTextImageElement.ID = Guid.NewGuid().ToString();
			xTextImageElement.ContentReadonly = ContentReadonlyState.True;
			myEditControl.ExecuteCommand("InsertImage", showUI: false, xTextImageElement);
			EndLogFunction(xTextImageElement.ID);
			return xTextImageElement.ID;
		}

		[ComVisible(true)]
		public virtual string AddSignaturePic2(string sPath)
		{
			BeginLogFunction("AddSignaturePic2", "sPath=" + sPath);
			EndLogFunction(AddSignaturePic(sPath));
			return AddSignaturePic(sPath);
		}

		[ComVisible(true)]
		public virtual string AddSignaturePic2WithStream(object stmLoad)
		{
			BeginLogFunction("AddSignaturePic2WithStream", "stmLoad=" + stmLoad);
			AlertNotSupportedMember("AddSignaturePic2WithStream");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual string AddSignaturePic2WithString(string base64String)
		{
			int num = 3;
			BeginLogFunction("AddSignaturePic2WithString", "base64String=" + base64String);
			if (base64String != null && base64String != string.Empty)
			{
				byte[] parameter = Convert.FromBase64String(base64String);
				XTextImageElement xTextImageElement = myEditControl.ExecuteCommand("InsertImage", showUI: false, parameter) as XTextImageElement;
				if (xTextImageElement != null)
				{
					EndLogFunction(xTextImageElement.Name);
					return xTextImageElement.Name;
				}
				EndLogFunction("");
				return "";
			}
			EndLogFunction("");
			return "";
		}

		[ComVisible(true)]
		public virtual string AddSignaturePicBase64(string sInfo, int nType)
		{
			int num = 19;
			BeginLogFunction("AddSignaturePicBase64", "sInfo=" + sInfo + "  nType=" + nType);
			switch (nType)
			{
			case 1:
				if (File.Exists(sInfo))
				{
					Image parameter2 = Image.FromFile(sInfo);
					XTextImageElement xTextImageElement2 = myEditControl.ExecuteCommand("InsertImage", showUI: false, parameter2) as XTextImageElement;
					if (xTextImageElement2 != null)
					{
						EndLogFunction(xTextImageElement2.Name);
						return xTextImageElement2.Name;
					}
					EndLogFunction("");
					return "";
				}
				EndLogFunction("");
				return "";
			case 2:
				if (sInfo != null && sInfo != string.Empty)
				{
					byte[] parameter = Convert.FromBase64String(sInfo);
					XTextImageElement xTextImageElement = myEditControl.ExecuteCommand("InsertImage", showUI: false, parameter) as XTextImageElement;
					xTextImageElement.ContentReadonly = ContentReadonlyState.True;
					if (xTextImageElement != null)
					{
						EndLogFunction(xTextImageElement.Name);
						return xTextImageElement.Name;
					}
					EndLogFunction("");
					return "";
				}
				EndLogFunction("");
				return "";
			default:
				EndLogFunction("");
				return "";
			}
		}

		[ComVisible(true)]
		public virtual void ClearUndoList()
		{
			BeginLogFunction("ClearUndoList", null);
			myEditControl.Document.UndoList.Clear();
			myEditControl.CommandControler.InvalidateCommandState();
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public virtual void Copy()
		{
			BeginLogFunction("Copy", null);
			MyWriterControl.Copy();
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public virtual bool CopySelectArea2(bool bWithForamt)
		{
			BeginLogFunction("CopySelectArea2", "bWithForamt=" + bWithForamt);
			AlertNotSupportedMember("CopySelectArea2");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual string CreateRandomStructName()
		{
			BeginLogFunction("CreateRandomStructName", null);
			AlertNotSupportedMember("CreateRandomStructName");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual void DeleteOfficeAppData()
		{
			BeginLogFunction("DeleteOfficeAppData", null);
			AlertNotSupportedMember("DeleteOfficeAppData");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool DeleteParaProtectArea(string sName)
		{
			BeginLogFunction("DeleteParaProtectArea", "sName=" + sName);
			AlertNotSupportedMember("DeleteParaProtectArea");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool DeletePostil(int nType, string strAuthor)
		{
			int num = 1;
			BeginLogFunction("DeletePostil", "nType=" + nType + " strAuthor=" + strAuthor);
			object obj = null;
			switch (nType)
			{
			case 1:
				obj = myEditControl.ExecuteCommand("DeleteComment", showUI: false, null);
				break;
			case 2:
			{
				DocumentCommentList documentCommentList = new DocumentCommentList();
				foreach (DocumentComment comment in Document.Comments)
				{
					if (comment.AuthorID == strAuthor)
					{
						documentCommentList.Add(comment);
					}
				}
				obj = ((documentCommentList.Count <= 0) ? ((object)false) : myEditControl.ExecuteCommand("DeleteComment", showUI: false, documentCommentList));
				break;
			}
			case 3:
				obj = myEditControl.ExecuteCommand("DeleteAllComment", showUI: false, null);
				break;
			}
			if (obj == null)
			{
				obj = false;
			}
			EndLogFunction(((bool)obj).ToString());
			return (bool)obj;
		}

		[ComVisible(true)]
		public virtual bool DeleteRedundant(bool bBlankLine, bool bSpace, bool bTab)
		{
			BeginLogFunction("DeleteRedundant", "bBlankLine=" + bBlankLine + "  bSpace=" + bSpace + "  bTab=" + bTab);
			myEditControl.Document.Body.Focus();
			myEditControl.Document.Body.DeleteRedundant(bSpace, bTab, bBlankLine, bSpace, pageBreak: false, lineBreak: true);
			myEditControl.MoveTo(MoveTarget.DocumentEnd);
			EndLogFunction("true");
			return true;
		}

		[ComVisible(true)]
		public virtual bool DeleteRedundantEx(bool bBlankLine, bool bSpace, bool bTab, bool bDelPageBreak)
		{
			BeginLogFunction("DeleteRedundantEx", "bBlankLine=" + bBlankLine + "  bSpace=" + bSpace + "  bTab=" + bTab + "  bDelPageBreak=" + bDelPageBreak);
			myEditControl.Document.Body.Focus();
			myEditControl.Document.Body.DeleteRedundant(bSpace, bTab, bBlankLine, bSpace, bDelPageBreak, lineBreak: true);
			myEditControl.MoveTo(MoveTarget.DocumentEnd);
			EndLogFunction("true");
			return true;
		}

		[ComVisible(true)]
		public virtual bool DeleteSectionContent(string sName)
		{
			int num = 6;
			BeginLogFunction("DeleteSectionContent", "sName=" + sName);
			XTextInputFieldElement xTextInputFieldElement = GetElementById(sName) as XTextInputFieldElement;
			if (xTextInputFieldElement != null)
			{
				xTextInputFieldElement.Elements.Clear();
				xTextInputFieldElement.EditorRefreshView();
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       获取当前光标所在区域的最外层区域名称
		                                                                    ///       </summary>
		                                                                    /// <returns>
		                                                                    /// </returns>
		public string GetOutestRegionNameByCurrentCursor()
		{
			BeginLogFunction("GetOutestRegionNameByCurrentCursor", null);
			XTextElement currentElement = MyWriterControl.CurrentElement;
			XTextElement xTextElement = currentElement;
			string text = null;
			while (xTextElement != null)
			{
				if (IsNsoRegion(xTextElement))
				{
					text = xTextElement.ID;
				}
				xTextElement = xTextElement.Parent;
			}
			if (text == null)
			{
				text = "";
			}
			EndLogFunction(text);
			return text;
		}

		                                                                    /// <summary>
		                                                                    ///       删除指定区域内部末尾的空白行 空格 Tab字符
		                                                                    ///       </summary>
		                                                                    /// <returns>
		                                                                    /// </returns>
		public bool DeleteRedundantByRegionName(string ID, bool bBlankLine, bool bSpace, bool bTab)
		{
			int num = 19;
			BeginLogFunction("DeleteRedundantByRegionName", "ID=" + ID + "  bBlankLine=" + bBlankLine + "  bSpace=" + bSpace + "  bTab=" + bTab);
			XTextElement elementById = GetElementById(ID);
			if (elementById != null)
			{
				if (elementById is XTextSectionElement)
				{
					XTextSectionElement xTextSectionElement = elementById as XTextSectionElement;
					xTextSectionElement.DeleteRedundant(whiteSpace: true, bTab, bBlankLine, bSpace, pageBreak: false, lineBreak: true);
					EndLogFunction("true");
					return true;
				}
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual void EndUndo()
		{
		}

		[ComVisible(true)]
		public virtual bool InsertBlankArea(int nHeight, int nTopDistance)
		{
			BeginLogFunction("InsertBlankArea", "nHeight=" + nHeight + "  nTopDistance=" + nTopDistance);
			AlertNotSupportedMember("InsertBlankArea");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual void InsertHyperlinkInWriter(string string_0, string textToDisplay)
		{
			BeginLogFunction("InsertHyperlinkInWriter", "url=" + string_0 + "  textToDisplay=" + textToDisplay);
			AlertNotSupportedMember("InsertHyperlinkInWriter");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool InsertSpecialPageBreak()
		{
			BeginLogFunction("InsertSpecialPageBreak", null);
			WriterControl.ExecuteCommand("InsertPageBreak", showUI: false, null);
			EndLogFunction("true");
			return true;
		}

		[ComVisible(true)]
		public virtual bool InsertTabAtCurrentCursor(int nTabStopAlignment, int nTabPos)
		{
			BeginLogFunction("InsertTabAtCurrentCursor", "nTabStopAlignment=" + nTabStopAlignment + "  nTabPos=" + nTabPos);
			AlertNotSupportedMember("InsertTabAtCurrentCursor");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool InsertTabStopAtCurrentCursor()
		{
			BeginLogFunction("InsertTabStopAtCurrentCursor");
			AlertNotSupportedMember("InsertTabStopAtCurrentCursor");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual string InsertTextboxAtSelection(string sName)
		{
			BeginLogFunction("InsertTextboxAtSelection", "sName=" + sName);
			AlertNotSupportedMember("InsertTextboxAtSelection");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool MergeSectionParagraph(string strName)
		{
			BeginLogFunction("MergeSectionParagraph", "strName=" + strName);
			AlertNotSupportedMember("MergeSectionParagraph");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual void Paste()
		{
			BeginLogFunction("Paste", null);
			myEditControl.Paste();
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public virtual bool PasteAtCurrentCursor2()
		{
			BeginLogFunction("PasteAtCurrentCursor2", null);
			AlertNotSupportedMember("PasteAtCurrentCursor2");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual void PasteWithoutFormat()
		{
			BeginLogFunction("PasteWithoutFormat", null);
			myEditControl.ExecuteCommand("SpecifyPaste", showUI: false, "Text");
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public virtual void SetSpecialPasteEx(bool bOutFormat, bool bInFormat)
		{
			BeginLogFunction("SetSpecialPasteEx", "OutFormat=" + bOutFormat + " InFormat=" + bInFormat);
			_SetSpecialPasteEx_OutFormat = bOutFormat;
			_SetSpecialPasteEx_InFormat = bInFormat;
			cmCopyWithFormat.Visible = !bOutFormat;
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public virtual WdInfo SetText(string strText, WdLocate wdLocate_0)
		{
			int num = 3;
			BeginLogFunction("SetText", "strText=" + strText + "  prt=" + wdLocate_0);
			switch (wdLocate_0)
			{
			case WdLocate.wdCurrentCursor:
				myEditControl.ExecuteCommand("InsertString", showUI: false, strText);
				break;
			case WdLocate.wdStartDocument:
				myEditControl.ExecuteCommand("MoveTo", showUI: false, "DocumentHome");
				myEditControl.ExecuteCommand("InsertString", showUI: false, strText);
				break;
			case WdLocate.wdEndDocument:
				myEditControl.ExecuteCommand("MoveTo", showUI: false, "DocumentEnd");
				myEditControl.ExecuteCommand("InsertString", showUI: false, strText);
				break;
			}
			if (myEditControl.Selection.Length != 0)
			{
				myEditControl.MoveToPosition(myEditControl.Selection.AbsEndIndex);
			}
			EndLogFunction(WdInfo.wdSuccess);
			return WdInfo.wdSuccess;
		}

		[ComVisible(true)]
		public virtual void Space1()
		{
			BeginLogFunction("Space1", null);
			ParagraphFormatCommandParameter paragraphFormatCommandParameter = new ParagraphFormatCommandParameter();
			paragraphFormatCommandParameter.Read(myEditControl.Document.CurrentStyleInfo.Paragraph);
			paragraphFormatCommandParameter.LineSpacingStyle = LineSpacingStyle.SpaceSingle;
			myEditControl.ExecuteCommand("ParagraphFormat", showUI: false, paragraphFormatCommandParameter);
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public virtual void Space15()
		{
			BeginLogFunction("Space15", null);
			ParagraphFormatCommandParameter paragraphFormatCommandParameter = new ParagraphFormatCommandParameter();
			paragraphFormatCommandParameter.Read(myEditControl.Document.CurrentStyleInfo.Paragraph);
			paragraphFormatCommandParameter.LineSpacingStyle = LineSpacingStyle.Space1pt5;
			myEditControl.ExecuteCommand("ParagraphFormat", showUI: false, paragraphFormatCommandParameter);
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public virtual void Space2()
		{
			BeginLogFunction("Space2", null);
			ParagraphFormatCommandParameter paragraphFormatCommandParameter = new ParagraphFormatCommandParameter();
			paragraphFormatCommandParameter.Read(myEditControl.Document.CurrentStyleInfo.Paragraph);
			paragraphFormatCommandParameter.LineSpacingStyle = LineSpacingStyle.SpaceDouble;
			myEditControl.ExecuteCommand("ParagraphFormat", showUI: false, paragraphFormatCommandParameter);
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public virtual void StartUndo()
		{
			BeginLogFunction("StartUndo", null);
			EndLogFunction(null);
		}

		                                                                    /// <summary>
		                                                                    ///       接口实现
		                                                                    ///       </summary>
		                                                                    /// <param name="riid">
		                                                                    /// </param>
		                                                                    /// <param name="pdwSupportedOptions">
		                                                                    /// </param>
		                                                                    /// <param name="pdwEnabledOptions">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[DCInternal]
		[ComVisible(true)]
		public int GetInterfaceSafetyOptions(ref Guid riid, ref int pdwSupportedOptions, ref int pdwEnabledOptions)
		{
			int num = 3;
			int num2 = -2147467259;
			string text = riid.ToString("B");
			pdwSupportedOptions = 3;
			switch (text)
			{
			case "{0000010A-0000-0000-C000-000000000046}":
			case "{00000109-0000-0000-C000-000000000046}":
			case "{37D84F60-42CB-11CE-8135-00AA004BB851}":
				num2 = 0;
				pdwEnabledOptions = 0;
				if (_fSafeForInitializing)
				{
					pdwEnabledOptions = 2;
				}
				break;
			case "{00020400-0000-0000-C000-000000000046}":
			case "{a6ef9860-c720-11d0-9337-00a0c90dcaa9}":
				num2 = 0;
				pdwEnabledOptions = 0;
				if (_fSafeForScripting)
				{
					pdwEnabledOptions = 1;
				}
				break;
			default:
				num2 = -2147467262;
				pdwEnabledOptions = 3;
				break;
			}
			return num2;
		}

		                                                                    /// <summary>
		                                                                    ///       接口实现
		                                                                    ///       </summary>
		                                                                    /// <param name="riid">
		                                                                    /// </param>
		                                                                    /// <param name="dwOptionSetMask">
		                                                                    /// </param>
		                                                                    /// <param name="dwEnabledOptions">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		[DCInternal]
		public int SetInterfaceSafetyOptions(ref Guid riid, int dwOptionSetMask, int dwEnabledOptions)
		{
			int num = 17;
			int result = -2147467259;
			switch (riid.ToString("B"))
			{
			case "{0000010A-0000-0000-C000-000000000046}":
			case "{00000109-0000-0000-C000-000000000046}":
			case "{37D84F60-42CB-11CE-8135-00AA004BB851}":
				if ((dwEnabledOptions & dwOptionSetMask) == 2 && _fSafeForInitializing)
				{
					result = 0;
				}
				break;
			case "{00020400-0000-0000-C000-000000000046}":
			case "{a6ef9860-c720-11d0-9337-00a0c90dcaa9}":
				if ((dwEnabledOptions & dwOptionSetMask) == 1 && _fSafeForScripting)
				{
					result = 0;
				}
				break;
			default:
				result = -2147467262;
				break;
			}
			return result;
		}

		                                                                    /// <summary>
		                                                                    ///       控件加载时的处理
		                                                                    ///       </summary>
		                                                                    /// <param name="e">
		                                                                    /// </param>
		private void OnLoadForNsoControl(EventArgs eventArgs_0)
		{
		}

		                                                                    /// <summary>
		                                                                    ///       数据过滤
		                                                                    ///       </summary>
		                                                                    /// <param name="sender">
		                                                                    /// </param>
		                                                                    /// <param name="args">
		                                                                    /// </param>
		private void MyWriterControl_FilterValue(object sender, FilterValueEventArgs e)
		{
			int num = 2;
			if (e.Value is XTextElementList)
			{
				XTextElementList xTextElementList = (XTextElementList)e.Value;
				foreach (XTextElement item in xTextElementList)
				{
					if ((item is XTextInputFieldElement || item is XTextCheckBoxElementBase) && !string.IsNullOrEmpty(item.ID))
					{
						if (item is XTextInputFieldElement)
						{
							Document.AllocElementID("field", item);
						}
						else if (item is XTextCheckBoxElement)
						{
							Document.AllocElementID("chk", item);
						}
						else if (item is XTextRadioBoxElement)
						{
							Document.AllocElementID("rdo", item);
						}
					}
				}
			}
		}

		private void SetDefaultAttribute(XTextElement element)
		{
		}

		                                                                    /// <summary>
		                                                                    ///       判断是否是内置属性名
		                                                                    ///       </summary>
		                                                                    /// <param name="name">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		private bool IsNsoInnerAttributeName(string name)
		{
			int num = 3;
			BeginLogFunction("IsNsoInnerAttributeName", "name=" + name);
			EndLogFunction((name == "NsoControlTypeName") | (name == "NsoElementTypeName"));
			return name == "NsoControlTypeName" || name == "NsoElementTypeName";
		}

		private bool IsNsoSection(XTextElement element)
		{
			int num = 16;
			BeginLogFunction("IsNsoSection", "element=" + element);
			if (element == null)
			{
				EndLogFunction("false");
				return false;
			}
			if (element is XTextInputFieldElement)
			{
				if (element.GetAttribute("NsoElementTypeName") == "Section")
				{
					EndLogFunction("true");
					return true;
				}
				foreach (XTextElement element2 in element.Elements)
				{
					if (element2 is XTextInputFieldElement)
					{
						EndLogFunction("true");
						return true;
					}
				}
			}
			EndLogFunction("false");
			return false;
		}

		private bool IsNsoRegion(XTextElement element)
		{
			int num = 18;
			BeginLogFunction("IsNsoRegion", "element=" + element);
			if (element == null)
			{
				EndLogFunction("false");
				return false;
			}
			if (element is XTextSectionElement && element.GetAttribute("NsoElementTypeName") == "Region")
			{
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		private bool IsNsoProtecArea(XTextElement element)
		{
			int num = 13;
			BeginLogFunction("IsNsoProtecArea", "element=" + element);
			if (element is XTextInputFieldElement && element.GetAttribute("NsoElementTypeName") == "ProtecArea")
			{
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		private bool IsNewControl(XTextElement element)
		{
			int num = 10;
			BeginLogFunction("IsNewControl", "element=" + element);
			if (element is XTextCheckBoxElement || element is XTextRadioBoxElement)
			{
				if (element.GetAttribute("MultiCheckboxItem") == "1")
				{
					EndLogFunction("false");
					return false;
				}
				EndLogFunction("true");
				return true;
			}
			if (element is XTextInputFieldElement && element.GetAttribute("NsoElementTypeName") == "NewControl")
			{
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		private XTextElement GetNsoNewControl(string name)
		{
			BeginLogFunction("GetNsoNewControl", "name=" + name);
			XTextElement elementById = GetElementById(name);
			if (IsNewControl(elementById))
			{
				EndLogFunction(elementById);
				return elementById;
			}
			EndLogFunction(null);
			return null;
		}

		private XTextInputFieldElement GetNsoSection(string name)
		{
			BeginLogFunction("GetNsoSection", "name=" + name);
			XTextInputFieldElement xTextInputFieldElement = GetElementById(name) as XTextInputFieldElement;
			if (IsNsoSection(xTextInputFieldElement))
			{
				EndLogFunction(xTextInputFieldElement);
				return xTextInputFieldElement;
			}
			EndLogFunction(null);
			return null;
		}

		private XTextInputFieldElement GetProtectArea(string name)
		{
			BeginLogFunction("GetProtectArea", "name=" + name);
			XTextInputFieldElement xTextInputFieldElement = GetElementById(name) as XTextInputFieldElement;
			if (IsNsoProtecArea(xTextInputFieldElement))
			{
				EndLogFunction(xTextInputFieldElement);
				return xTextInputFieldElement;
			}
			EndLogFunction(null);
			return null;
		}

		void ISupportInitialize.BeginInit()
		{
		}

		void ISupportInitialize.EndInit()
		{
		}

		                                                                    /// <summary>
		                                                                    ///       设置指定 ProtectArea的文本内容
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">ProtectArea名称</param>
		                                                                    /// <param name="sText">文本内容</param>
		                                                                    /// <returns> False：失败 True：成功</returns>
		[ComVisible(true)]
		public virtual bool SetProtectAreaText(string sName, string sText)
		{
			int num = 2;
			BeginLogFunction("SetProtectAreaText", "sName=" + sName + "  sText=" + sText);
			if (sName == null)
			{
				EndLogFunction(null);
			}
			XTextInputFieldElement protectArea = GetProtectArea(sName);
			if (protectArea == null)
			{
				EndLogFunction(false);
				return false;
			}
			protectArea.Text = sText;
			EndLogFunction("true");
			return true;
		}

		[ComVisible(true)]
		public virtual bool SetParaProtectAreaProp(string sName, string sProp, string sValue)
		{
			BeginLogFunction("SetParaProtectAreaProp", "sName=" + sName + "  sProp=" + sProp + "  sValue=" + sValue);
			AlertNotSupportedMember("SetParaProtectAreaProp");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual void SetParaProtectAreaText(string sName, string sText)
		{
			BeginLogFunction("SetParaProtectAreaText", "sName=" + sName + "  sText=" + sText);
			AlertNotSupportedMember("SetParaProtectAreaText");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public string GetProtectAreaProp(string name, string propertyName)
		{
			BeginLogFunction("GetProtectAreaProp", "name=" + name + "  propertyName" + propertyName);
			XTextElement elementById = GetElementById(name);
			if (elementById == null)
			{
				EndLogFunction("");
				return "";
			}
			EndLogFunction(elementById.GetAttribute(propertyName));
			return elementById.GetAttribute(propertyName);
		}

		[ComVisible(true)]
		public virtual bool SwitchProtectArea(bool bFlag)
		{
			int num = 9;
			BeginLogFunction("SwitchProtectArea", "bFlag=" + bFlag);
			if (bFlag)
			{
				myEditControl.ExecuteCommand("ContentProtect", showUI: false, bFlag);
			}
			else
			{
				bool isAdministrator = myEditControl.IsAdministrator;
				myEditControl.IsAdministrator = true;
				myEditControl.ExecuteCommand("ContentProtect", showUI: false, bFlag);
				myEditControl.IsAdministrator = isAdministrator;
			}
			EndLogFunction("true");
			return true;
		}

		[ComVisible(true)]
		public virtual bool SwitchParaProtectArea(bool bFlag)
		{
			BeginLogFunction("SwitchParaProtectArea", "bFlag=" + bFlag);
			AlertNotSupportedMember("SwitchParaProtectArea");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool SetColorTypeOfProtectArea(uint iRed, uint iGreen, uint iBlue)
		{
			BeginLogFunction("SetColorTypeOfProtectArea", "iRed=" + iRed + "  iGreen=" + iGreen + "  iBlue=" + iBlue);
			AlertNotSupportedMember("SetColorTypeOfProtectArea");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool InsertParaProtectArea(string sName, int nColor)
		{
			BeginLogFunction("InsertParaProtectArea", "sName=" + sName + "  nColor=" + nColor);
			AlertNotSupportedMember("InsertParaProtectArea");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		private bool IsProtectArea(XTextElement element)
		{
			int num = 6;
			BeginLogFunction("IsProtectArea", "element=" + element);
			if (element is XTextInputFieldElement && element.GetAttribute("NsoElementTypeName") == "ProtecArea")
			{
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual string InsertProtectArea(string sName)
		{
			int num = 2;
			if (myEditControl.Document.Selection.Length == 0)
			{
				return "";
			}
			BeginLogFunction("InsertProtectArea", "sName=" + sName);
			string result = "";
			XTextInputFieldElement xTextInputFieldElement = new XTextInputFieldElement();
			xTextInputFieldElement.SetAttribute("NsoElementTypeName", "ProtecArea");
			xTextInputFieldElement.ID = sName;
			xTextInputFieldElement.BackgroundText = sName;
			if (_ValueOfSetProtectAreaHighlight)
			{
				xTextInputFieldElement.EnableHighlight = EnableState.Enabled;
			}
			else
			{
				xTextInputFieldElement.EnableHighlight = EnableState.Disabled;
			}
			xTextInputFieldElement.ContentReadonly = ContentReadonlyState.True;
			xTextInputFieldElement.BorderVisible = DCVisibleState.Hidden;
			xTextInputFieldElement.UserEditable = false;
			object obj = myEditControl.ExecuteCommand("ConvertContentToContainerElement", showUI: false, xTextInputFieldElement);
			if (obj != null)
			{
				result = sName;
			}
			EndLogFunction(result);
			return result;
		}

		[ComVisible(true)]
		public virtual bool DeleteProtectArea(string sName)
		{
			int num = 15;
			BeginLogFunction("DeleteProtectArea", "sName=" + sName);
			XTextInputFieldElement xTextInputFieldElement = GetElementById(sName) as XTextInputFieldElement;
			if (xTextInputFieldElement != null)
			{
				using (myEditControl.CreateBackgroundModeSetter())
				{
					if (xTextInputFieldElement.EditorDeletePreserveContent(logUndo: true))
					{
						EndLogFunction("true");
						return true;
					}
				}
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool SelectOneProtectArea(string sName)
		{
			BeginLogFunction("SelectOneProtectArea", "sName=" + sName);
			XTextInputFieldElement xTextInputFieldElement = GetElementById(sName) as XTextInputFieldElement;
			if (xTextInputFieldElement != null)
			{
				EndLogFunction(xTextInputFieldElement.Select());
				return xTextInputFieldElement.Select();
			}
			EndLogFunction(false);
			return false;
		}

		[ComVisible(true)]
		public bool SetProtectAreaHighlight(bool bShow)
		{
			BeginLogFunction("SetProtectAreaHighlight", "bShow=" + bShow);
			_ValueOfSetProtectAreaHighlight = bShow;
			Invalidate();
			EndLogFunction("true");
			return true;
		}

		                                                                    /// <summary>
		                                                                    ///       返回ProtectArea开始位置
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">ProtectArea名称</param>
		                                                                    /// <returns>位置； -1 表示失败</returns>
		[ComVisible(true)]
		public virtual int GetProtectAreaBegin(string sName)
		{
			int num = 18;
			BeginLogFunction("GetProtectAreaBegin", "sName=" + sName);
			if (sName == null)
			{
				EndLogFunction(null);
				throw new ArgumentException("sName");
			}
			XTextInputFieldElement protectArea = GetProtectArea(sName);
			if (protectArea == null)
			{
				EndLogFunction(-1);
				return -1;
			}
			EndLogFunction(protectArea.StartElement.ViewIndex);
			return protectArea.StartElement.ViewIndex;
		}

		                                                                    /// <summary>
		                                                                    ///       返回 ProtectArea结束位置
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">ProtectArea名称</param>
		                                                                    /// <returns>位置； -1 表示失败</returns>
		[ComVisible(true)]
		public virtual int GetProtectAreaEnd(string sName)
		{
			int num = 15;
			BeginLogFunction("GetProtectAreaEnd", "sName=" + sName);
			if (sName == null)
			{
				EndLogFunction(null);
				throw new ArgumentException("sName");
			}
			XTextInputFieldElement protectArea = GetProtectArea(sName);
			if (protectArea == null)
			{
				EndLogFunction(-1);
				return -1;
			}
			EndLogFunction(protectArea.EndElement.ViewIndex);
			return protectArea.EndElement.ViewIndex;
		}

		                                                                    /// <summary>
		                                                                    ///       获取 ProtectArea区域文本
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">ProtectArea名称</param>
		                                                                    /// <returns>ProtectArea的文本</returns>
		[ComVisible(true)]
		public virtual string GetProtectAreaText(string sName)
		{
			BeginLogFunction("GetProtectAreaText", "sName=" + sName);
			if (sName == null)
			{
				EndLogFunction(null);
			}
			XTextInputFieldElement protectArea = GetProtectArea(sName);
			if (protectArea == null)
			{
				EndLogFunction("");
				return "";
			}
			EndLogFunction(protectArea.Text);
			return protectArea.Text;
		}

		[ComVisible(true)]
		public virtual int GetParaProtectAreaBegin(string sName)
		{
			AlertNotSupportedMember("GetParaProtectAreaBegin");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual int GetParaProtectAreaEnd(string sName)
		{
			AlertNotSupportedMember("GetParaProtectAreaEnd");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual string GetParaProtectAreaProp(string sName, string sProp)
		{
			AlertNotSupportedMember("GetParaProtectAreaProp");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual string GetParaProtectAreaText(string sName)
		{
			AlertNotSupportedMember("GetParaProtectAreaText");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual string GetCurrentProtectAreaName()
		{
			BeginLogFunction("GetCurrentProtectAreaName", null);
			XTextElement xTextElement = myEditControl.CurrentElement;
			while (true)
			{
				if (xTextElement != null)
				{
					if (IsProtectArea(xTextElement))
					{
						break;
					}
					xTextElement = xTextElement.Parent;
					continue;
				}
				EndLogFunction("");
				return "";
			}
			EndLogFunction(xTextElement.ID);
			return xTextElement.ID;
		}

		[ComVisible(true)]
		public bool SetProtectAreaName(string Section_name, string newValue)
		{
			BeginLogFunction("SetProtectAreaName", "Section_name=" + Section_name + "  newValue=" + newValue);
			EndLogFunction(SetSectionName(Section_name, newValue));
			return SetSectionName(Section_name, newValue);
		}

		[ComVisible(true)]
		public bool SetProtectAreaProp(string name, string propName, string Value)
		{
			BeginLogFunction("SetProtectAreaProp", "name=" + name + "  propName=" + propName + "  Value=" + Value);
			EndLogFunction(SetNewControlProp(name, propName, Value));
			return SetNewControlProp(name, propName, Value);
		}

		[ComVisible(true)]
		public virtual bool SetReserveAttrOfImage(string sName, string sReserve)
		{
			int num = 19;
			BeginLogFunction("SetReserveAttrOfImage", "sName=" + sName + "  sReserve=" + sReserve);
			XTextImageElement xTextImageElement = GetElementById(sName) as XTextImageElement;
			if (xTextImageElement != null)
			{
				xTextImageElement.SetAttribute("Reserve", sReserve);
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool SetReserveAttrOfImageObject(string sName, string sReserve)
		{
			BeginLogFunction("SetReserveAttrOfImageObject", "sName=" + sName + "  sReserve=" + sReserve);
			AlertNotSupportedMember("SetReserveAttrOfImageObject");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual string ChangeImageToOleObject(string sImageName, string sRev1)
		{
			BeginLogFunction("ChangeImageToOleObject", "sImageName=" + sImageName + "  sRev1=" + sRev1);
			AlertNotSupportedMember("ChangeImageToOleObject");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BSTR SaveImageToFile ( BSTR sName )
		                                                                    ///       功能描述：
		                                                                    ///       将制定ID的图片保存为一个外部bmp文件。
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sName	BSTR	图片ID	必需	  
		                                                                    ///       返回值：存储的外部文件路径名
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1. SaveImageToFile（”aaa”）
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public virtual string SaveImageToFile(string sName)
		{
			int num = 12;
			BeginLogFunction("SaveImageToFile", "sName=" + sName);
			XTextImageElement xTextImageElement = myEditControl.GetElementById(sName) as XTextImageElement;
			if (xTextImageElement != null && xTextImageElement.ImageValue != null)
			{
				string text = Path.GetTempFileName() + ".bmp";
				xTextImageElement.ImageValue.Save(text, ImageFormat.Bmp);
				EndLogFunction(text);
				return text;
			}
			EndLogFunction(null);
			return null;
		}

		[ComVisible(true)]
		public virtual string SaveImageToFileWithFilefilter(string sName, string sFileFilter)
		{
			BeginLogFunction("SaveImageToFileWithFilefilter", "sName=" + sName + "  sFileFilter=" + sFileFilter);
			AlertNotSupportedMember("SaveImageToFileWithFilefilter");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual string GetReserveAttrOfImage(string sName)
		{
			int num = 17;
			BeginLogFunction("GetReserveAttrOfImage", "sName=" + sName);
			XTextImageElement xTextImageElement = myEditControl.GetElementById(sName) as XTextImageElement;
			if (xTextImageElement != null)
			{
				EndLogFunction(xTextImageElement.GetAttribute("Reserve"));
				return xTextImageElement.GetAttribute("Reserve");
			}
			EndLogFunction("");
			return "";
		}

		[ComVisible(true)]
		public virtual string GetReserveAttrOfImageObject(string sName)
		{
			BeginLogFunction("GetReserveAttrOfImageObject", "sName=" + sName);
			AlertNotSupportedMember("GetReserveAttrOfImageObject");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual int GetImageLockType(string sName)
		{
			BeginLogFunction("GetImageLockType", "sName=" + sName);
			AlertNotSupportedMember("GetImageLockType");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual int GetImageScreenEndXPoint(string sName)
		{
			BeginLogFunction("GetImageScreenEndXPoint", "sName=" + sName);
			AlertNotSupportedMember("GetImageScreenEndXPoint");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual int GetImageScreenEndYPoint(string sName)
		{
			BeginLogFunction("GetImageScreenEndYPoint", "sName=" + sName);
			AlertNotSupportedMember("GetImageScreenEndYPoint");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual int GetImageScreenStartXPoint(string sName)
		{
			BeginLogFunction("GetImageScreenStartXPoint", "sName=" + sName);
			AlertNotSupportedMember("GetImageScreenStartXPoint");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual int GetImageScreenStartYPoint(string sName)
		{
			BeginLogFunction("GetImageScreenStartYPoint", "sName=" + sName);
			AlertNotSupportedMember("GetImageScreenStartYPoint");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual string GetCurrentImageName()
		{
			BeginLogFunction("GetCurrentImageName", null);
			if (myEditControl.CurrentElement is XTextImageElement)
			{
				EndLogFunction(myEditControl.CurrentElement.ID);
				return myEditControl.CurrentElement.ID;
			}
			if (myEditControl.Selection.ContentElements != null && myEditControl.Selection.ContentElements.Count == 1 && myEditControl.Selection.ContentElements[0] is XTextImageElement)
			{
				EndLogFunction(myEditControl.Selection.ContentElements[0].ID);
				return myEditControl.Selection.ContentElements[0].ID;
			}
			EndLogFunction("");
			return "";
		}

		[ComVisible(true)]
		public virtual string GetAllImagesByCurrentDoc()
		{
			int num = 4;
			BeginLogFunction("GetAllImagesByCurrentDoc", null);
			XTextElementList elementsByType = Document.GetElementsByType(typeof(XTextImageElement));
			StringBuilder stringBuilder = new StringBuilder();
			foreach (XTextImageElement item in elementsByType)
			{
				if (!string.IsNullOrEmpty(item.ID))
				{
					stringBuilder.Append(item.ID);
					stringBuilder.Append(",");
				}
			}
			EndLogFunction(stringBuilder.ToString());
			return stringBuilder.ToString();
		}

		[ComVisible(true)]
		public virtual bool ExistImage(string sName)
		{
			BeginLogFunction("ExistImage", "sName=" + sName);
			XTextElement elementById = GetElementById(sName);
			EndLogFunction((elementById != null).ToString());
			return elementById != null;
		}

		[ComVisible(true)]
		public virtual bool DeleteImage(string sName)
		{
			int num = 8;
			BeginLogFunction("DeleteImage", "sName=" + sName);
			XTextImageElement xTextImageElement = GetElementById(sName) as XTextImageElement;
			if (xTextImageElement != null)
			{
				xTextImageElement.Select();
				xTextImageElement.Deleteable = true;
				XTextContainerElement parent = xTextImageElement.Parent;
				parent.Elements.Remove(xTextImageElement);
				parent.EditorRefreshView();
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public string AddImageObject(string sURL, int nType)
		{
			int num = 18;
			BeginLogFunction("AddImageObject", "sURL=" + sURL + "  nType" + nType);
			XTextImageElement xTextImageElement = (XTextImageElement)MyWriterControl.ExecuteCommand("InsertImage", showUI: false, sURL);
			if (xTextImageElement != null)
			{
				xTextImageElement.SetAttribute("Type", nType.ToString());
				string result = xTextImageElement.ID = Guid.NewGuid().ToString();
				EndLogFunction(result);
				return result;
			}
			EndLogFunction(null);
			return null;
		}

		[ComVisible(true)]
		public bool SetImageCustomProperty(string sImageName, string sPropName, string sPropValue)
		{
			int num = 17;
			BeginLogFunction("SetImageCustomProperty", "sImageName=" + sImageName + "  sPropName=" + sPropName + "  sPropValue=" + sPropValue);
			XTextImageElement xTextImageElement = GetElementById(sImageName) as XTextImageElement;
			if (xTextImageElement != null)
			{
				xTextImageElement.SetAttribute(sPropName, sPropValue);
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public string GetImageCustomProperty(string sImageName, string sPropName)
		{
			BeginLogFunction("GetImageCustomProperty", "sImageName=" + sImageName + "  sPropName=" + sPropName);
			XTextImageElement xTextImageElement = GetElementById(sImageName) as XTextImageElement;
			if (xTextImageElement != null)
			{
				EndLogFunction(xTextImageElement.GetAttribute(sPropName));
				return xTextImageElement.GetAttribute(sPropName);
			}
			EndLogFunction("");
			return "";
		}

		[ComVisible(true)]
		public virtual string AddImage(string sPath)
		{
			BeginLogFunction("AddImage", "sPath=" + sPath);
			Image.FromFile(sPath);
			XTextImageElement xTextImageElement = new XTextImageElement();
			xTextImageElement.LoadImage(sPath, setSize: false);
			MyWriterControl.Document.AllocElementID("image", xTextImageElement);
			XTextImageElement xTextImageElement2 = (XTextImageElement)myEditControl.ExecuteCommand("InsertImage", showUI: false, xTextImageElement);
			if (xTextImageElement2 == null)
			{
				EndLogFunction("");
				return "";
			}
			EndLogFunction(xTextImageElement2.ID);
			return xTextImageElement2.ID;
		}

		[ComVisible(true)]
		public virtual string AddImageObjectEx(string sURL, int nType, float fOleWidth, float fOleHeight)
		{
			int num = 15;
			BeginLogFunction("AddImageObjectEx", "URL=" + sURL + " nType=" + nType + " fOleWidth=" + fOleWidth + " fOleHeight=" + fOleHeight);
			XTextImageElement xTextImageElement = new XTextImageElement();
			xTextImageElement.Image = new XImageValue(sURL);
			if (fOleWidth > 0f)
			{
				xTextImageElement.Width = GraphicsUnitConvert.ConvertFromCM(fOleWidth, MyWriterControl.Document.DocumentGraphicsUnit);
			}
			if (fOleHeight > 0f)
			{
				xTextImageElement.Height = GraphicsUnitConvert.ConvertFromCM(fOleHeight, MyWriterControl.Document.DocumentGraphicsUnit);
			}
			myEditControl.Document.AllocElementID("image", xTextImageElement);
			XTextImageElement xTextImageElement2 = myEditControl.ExecuteCommand("InsertImage", showUI: false, xTextImageElement) as XTextImageElement;
			string result = xTextImageElement.ID;
			if (xTextImageElement2 == null)
			{
				result = "";
			}
			EndLogFunction(result);
			return result;
		}

		                                                                    /// <summary>
		                                                                    ///       当前光标位置插入流数据方式的图片对象
		                                                                    ///       </summary>
		                                                                    /// <param name="stmFile">图片流数据</param>
		                                                                    /// <param name="nType">插入类型</param>
		                                                                    /// <param name="fOleWidth">画布宽度</param>
		                                                                    /// <param name="fOleHeight">画布的长度</param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public virtual string AddImageObjectExWithStream(object stmFile, int nType, float fOleWidth, float fOleHeight)
		{
			BeginLogFunction("AddImageObjectExWithStream", string.Concat("stmFile=", stmFile, "  nType=", nType, "  fOleWidth=", fOleWidth, "  fOleHeight=", fOleHeight));
			XTextImageElement xTextImageElement = new XTextImageElement();
			xTextImageElement.ImageData = (byte[])stmFile;
			xTextImageElement.ID = Guid.NewGuid().ToString();
			xTextImageElement.Width = fOleWidth;
			xTextImageElement.Height = fOleHeight;
			XTextImageElement xTextImageElement2 = myEditControl.ExecuteCommand("InsertImage", showUI: false, xTextImageElement) as XTextImageElement;
			string result = xTextImageElement.ID;
			if (xTextImageElement2 == null)
			{
				EndLogFunction("");
				result = "";
			}
			EndLogFunction(result);
			return result;
		}

		[ComVisible(true)]
		public virtual string AddImageObjectExWithString(string base64String, int nType, float fOleWidth, float fOleHeight)
		{
			BeginLogFunction("AddImageObjectExWithString", "base64String=" + base64String + "  nType=" + nType + "  fOleWidth=" + fOleWidth + "  fOleHeight=" + fOleHeight);
			AlertNotSupportedMember("AddImageObjectExWithString");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual string AddImageObjectWithStream(object stmFile, int nType)
		{
			BeginLogFunction("AddImageObjectWithStream", string.Concat("stmFile=", stmFile, " nType=", nType));
			XTextImageElement xTextImageElement = new XTextImageElement();
			xTextImageElement.ImageData = (byte[])stmFile;
			xTextImageElement.ID = Guid.NewGuid().ToString();
			XTextImageElement xTextImageElement2 = myEditControl.ExecuteCommand("InsertImage", showUI: false, xTextImageElement) as XTextImageElement;
			string result = xTextImageElement.ID;
			if (xTextImageElement2 == null)
			{
				EndLogFunction("");
				result = "";
			}
			EndLogFunction(result);
			return result;
		}

		[ComVisible(true)]
		public virtual string AddImageObjectWithString(string base64String, int nType)
		{
			int num = 19;
			BeginLogFunction("AddImageObjectWithString", "base64String=" + base64String + "  nType=" + nType);
			if (base64String != null && base64String != string.Empty)
			{
				byte[] parameter = Convert.FromBase64String(base64String);
				XTextImageElement xTextImageElement = myEditControl.ExecuteCommand("InsertImage", showUI: false, parameter) as XTextImageElement;
				if (xTextImageElement != null)
				{
					EndLogFunction(xTextImageElement.Name);
					return xTextImageElement.Name;
				}
				EndLogFunction(null);
				return null;
			}
			EndLogFunction(null);
			return null;
		}

		[ComVisible(true)]
		public virtual string AddImageWithStream(object stmFile)
		{
			int num = 17;
			BeginLogFunction("AddImageWithStream", "stmFile=" + stmFile);
			string result = "";
			if (stmFile != null)
			{
				XTextImageElement xTextImageElement = new XTextImageElement();
				if (stmFile is byte[])
				{
					xTextImageElement.ImageData = (byte[])stmFile;
				}
				if (stmFile is Image)
				{
					xTextImageElement.ImageValue = (Image)stmFile;
				}
				myEditControl.Document.AllocElementID("image", xTextImageElement);
				myEditControl.ExecuteCommand("InsertImage", showUI: false, xTextImageElement);
				result = xTextImageElement.ID;
			}
			EndLogFunction(result);
			return result;
		}

		[ComVisible(true)]
		public virtual string AddImageWithString(string base64String)
		{
			int num = 8;
			BeginLogFunction("AddImageWithString", "base64String=" + base64String);
			if (string.IsNullOrEmpty(base64String))
			{
				EndLogFunction(null);
				return null;
			}
			XImageValue xImageValue = new XImageValue();
			xImageValue.ImageDataBase64String = base64String;
			XTextImageElement xTextImageElement = (XTextImageElement)myEditControl.ExecuteCommand("InsertImage", showUI: false, xImageValue);
			if (xTextImageElement != null)
			{
				xTextImageElement.ID = "Image" + myEditControl.Document.AllocObjectID();
				EndLogFunction(xTextImageElement.ID);
				return xTextImageElement.ID;
			}
			EndLogFunction(null);
			return null;
		}

		                                                                    /// <summary>
		                                                                    ///       用指定路径的图片替换某个存在的图片
		                                                                    ///       函数原型：
		                                                                    ///       BSTR ReplaceImage ( BSTR sOldName,BSTR sNewUrl )
		                                                                    ///       功能描述：
		                                                                    ///       用指定路径的图片替换某个存在的图片
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sOldName	BSTR	旧图片名称	必需	
		                                                                    ///       sNewUrl	BSTR	新图片的路径	必需	“c:/temp/9.jpg”
		                                                                    ///       返回值：新图片插入文档后的名称
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1.ReplaceImage ("a",“c:/temp/9.jpg”)
		                                                                    ///       实现说明：
		                                                                    ///       支持的图形格式包含但并不限于：BMP、JPEG、PNG、GIF
		                                                                    ///       </summary>
		                                                                    /// <param name="sOldName">
		                                                                    /// </param>
		                                                                    /// <param name="sNewUrl">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public virtual string ReplaceImage(string sOldName, string sNewUrl)
		{
			int num = 4;
			BeginLogFunction("ReplaceImage", "sOldName=" + sOldName + "  sNewUrl=" + sNewUrl);
			XTextImageElement xTextImageElement = myEditControl.GetElementById(sOldName) as XTextImageElement;
			if (xTextImageElement != null)
			{
				if (File.Exists(sNewUrl))
				{
					xTextImageElement.ImageValue = Image.FromFile(sNewUrl);
					if (xTextImageElement.ID == null)
					{
						xTextImageElement.ID = Guid.NewGuid().ToString();
					}
					EndLogFunction(xTextImageElement.ID);
					return xTextImageElement.ID;
				}
				if (sNewUrl.StartsWith("http") || sNewUrl.StartsWith("ftp"))
				{
					try
					{
						WebRequest webRequest = WebRequest.Create(sNewUrl);
						webRequest.Timeout = 6000;
						WebResponse response = webRequest.GetResponse();
						response.Close();
					}
					catch
					{
						EndLogFunction(null);
						return null;
					}
					using (WebClient webClient = new WebClient())
					{
						string tempFileName = Path.GetTempFileName();
						webClient.DownloadFile(sNewUrl, tempFileName);
						xTextImageElement.ImageValue = Image.FromFile(tempFileName);
						if (xTextImageElement.ID == null)
						{
							xTextImageElement.ID = Guid.NewGuid().ToString();
						}
						EndLogFunction(xTextImageElement.ID);
						return xTextImageElement.ID;
					}
				}
				EndLogFunction(null);
				return null;
			}
			EndLogFunction(null);
			return null;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BOOL  DeleteImageObject( BSTR sName )
		                                                                    ///       功能描述：
		                                                                    ///       删除指定图片对象
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sName	BSTR	Image名称	必需	
		                                                                    ///       返回值：BOOL False 失败 True 成功
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1.DeleteImageObject (“a”)
		                                                                    ///       实现说明：无
		                                                                    ///       Date:10-11 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool DeleteImageObject(string sName)
		{
			int num = 13;
			BeginLogFunction("DeleteImageObject", "sName=" + sName);
			if (sName == null)
			{
				EndLogFunction(null);
				throw new ArgumentNullException("sName");
			}
			XTextImageElement xTextImageElement = GetElementById(sName) as XTextImageElement;
			if (xTextImageElement != null)
			{
				myEditControl.Focus();
				xTextImageElement.Select();
				myEditControl.ExecuteCommand("Delete", showUI: false, null);
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BOOL ExistImageObject ( BSTR sName )
		                                                                    ///       功能描述：
		                                                                    ///       是否存在该名称的Image对象
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sName	BSTR	Image对象名称	必需	
		                                                                    ///       返回值：BOOL  False 不存在  True 存在
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1.ExistImageObject (“a”)
		                                                                    ///       实现说明：无
		                                                                    ///       Date:10-11 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool ExistImageObject(string sName)
		{
			int num = 18;
			BeginLogFunction("ExistImageObject", "sName=" + sName);
			if (sName == null)
			{
				EndLogFunction(null);
				throw new ArgumentNullException("sName");
			}
			XTextElement elementById = GetElementById(sName);
			if (elementById != null && elementById is XTextImageElement)
			{
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BSTR GetAllImageObjectsByCurrentDoc (  )
		                                                                    ///       功能描述：
		                                                                    ///       获取文档所有的Image对象名称
		                                                                    ///       参数：  无
		                                                                    ///       返回值：文档所有的Image对象名称
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1.GetAllImageObjectsByCurrentDoc
		                                                                    ///       实现说明：无
		                                                                    ///       Date:10-11 Jy
		                                                                    ///       </summary>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public string GetAllImageObjectsByCurrentDoc()
		{
			int num = 6;
			BeginLogFunction("GetAllImageObjectsByCurrentDoc", null);
			XTextElementList elementsByType = myEditControl.Document.GetElementsByType(typeof(XTextImageElement));
			if (elementsByType != null && elementsByType.Count > 0)
			{
				StringBuilder stringBuilder = new StringBuilder();
				foreach (XTextElement item in elementsByType)
				{
					if (item is XTextImageElement)
					{
						stringBuilder.Append(item.ID);
						stringBuilder.Append(",");
					}
				}
				EndLogFunction(stringBuilder.ToString());
				return stringBuilder.ToString();
			}
			EndLogFunction(null);
			return null;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BSTR GetCurrentImageObjectName (  )
		                                                                    ///       功能描述：
		                                                                    ///       获取当前光标选中Image对象的名称
		                                                                    ///       参数：  无
		                                                                    ///       返回值：当前光标选中Image对象的名称
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1.GetCurrentImageObjectName
		                                                                    ///       实现说明：无
		                                                                    ///       Date:10-11 Jy
		                                                                    ///       </summary>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public string GetCurrentImageObjectName()
		{
			BeginLogFunction("GetCurrentImageObjectName", null);
			EndLogFunction(GetCurrentImageName());
			return GetCurrentImageName();
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BSTR ReplaceImageObject ( BSTR sOldName,BSTR sNewUrl,LONG nType )
		                                                                    ///       功能描述：
		                                                                    ///       用指定路径的Image对象对象替换某个存在的Image对象
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sOldName	BSTR	Image名称	必需	
		                                                                    ///       sNewUrl	BSTR	新 Image 对象的路径	必需	“c:/temp/9.jpg”
		                                                                    ///       nType	LONG	插入类型	必需	1 微软模式
		                                                                    ///       2 中标模式
		                                                                    ///       返回值：插入文档的新 Image对象的名称，与被替换的 Image 对象同名
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1.ReplaceImageObject ("a",“c:/temp/9.jpg”,2)
		                                                                    ///       实现说明：无
		                                                                    ///       Date:10-11 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="sOldName">
		                                                                    /// </param>
		                                                                    /// <param name="sNewUrl">
		                                                                    /// </param>
		                                                                    /// <param name="nType">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public string ReplaceImageObject(string sOldName, string sNewUrl, int nType)
		{
			int num = 6;
			BeginLogFunction("ReplaceImageObject", "sOldName=" + sOldName + "  sNewUrl=" + sNewUrl + "  nType=" + nType);
			if (sOldName == null)
			{
				EndLogFunction(null);
				throw new ArgumentNullException("sOldName");
			}
			if (File.Exists(sNewUrl))
			{
				XTextElement elementById = GetElementById(sOldName);
				if (elementById != null)
				{
					XTextImageElement xTextImageElement = new XTextImageElement();
					xTextImageElement.ID = elementById.ID;
					xTextImageElement.LoadImage(sNewUrl, setSize: false);
					elementById.Select();
					myEditControl.ExecuteCommand("Delete", showUI: false, null);
					myEditControl.ExecuteCommand("InsertImage", showUI: false, xTextImageElement);
					EndLogFunction(xTextImageElement.ID);
					return xTextImageElement.ID;
				}
				EndLogFunction(null);
				return null;
			}
			EndLogFunction(null);
			return null;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BSTR SaveImageObjectToFile ( BSTR sName )
		                                                                    ///       功能描述：
		                                                                    ///       将制定ID的图片对象保存为一个外部bmp文件。
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sName	BSTR	图片ID	必需	
		                                                                    ///       返回值：存储的外部文件路径名
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1. SaveImageObjectToFile（”aaa”）
		                                                                    ///       实现说明：
		                                                                    ///       Date:10-11 Jy  需求不明确 待修改
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public string SaveImageObjectToFile(string sName)
		{
			int num = 3;
			BeginLogFunction("SaveImageObjectToFile", "sName=" + sName);
			if (sName == null)
			{
				EndLogFunction(null);
				throw new ArgumentNullException("sName");
			}
			XTextImageElement xTextImageElement = GetElementById(sName) as XTextImageElement;
			if (xTextImageElement != null && xTextImageElement.ImageValue != null)
			{
				using (SaveFileDialog saveFileDialog = new SaveFileDialog())
				{
					saveFileDialog.Filter = "PNG图片(*.png)|*.png";
					saveFileDialog.CheckPathExists = true;
					saveFileDialog.OverwritePrompt = true;
					if (saveFileDialog.ShowDialog(this) == DialogResult.OK)
					{
						string fileName = saveFileDialog.FileName;
						xTextImageElement.ImageValue.Save(fileName, ImageFormat.Png);
						EndLogFunction(fileName);
						return fileName;
					}
				}
			}
			EndLogFunction(null);
			return null;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BSTR SetImageObjectName ( BSTR sName,BSTR sNewName )
		                                                                    ///       功能描述：
		                                                                    ///       对一个合法的Image对象重命名
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sOldName	BSTR	Image名称	必需	
		                                                                    ///       sNewName	BSTR	Image新名称	必需	
		                                                                    ///       返回值：重命名后的图片的名称
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1.SetImageObjectName ("a",“OLE”)
		                                                                    ///       实现说明：无
		                                                                    ///       Date:10-11 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">
		                                                                    /// </param>
		                                                                    /// <param name="sNewName">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public string SetImageObjectName(string sName, string sNewName)
		{
			int num = 2;
			BeginLogFunction("SetImageObjectName", "sName=" + sName + "  sNewName=" + sNewName);
			if (sName == null)
			{
				EndLogFunction(null);
				throw new ArgumentNullException("sName");
			}
			if (sNewName == null)
			{
				EndLogFunction(null);
				throw new ArgumentNullException("sNewName");
			}
			XTextElement elementById = myEditControl.Document.GetElementById(sName);
			if (elementById != null && elementById is XTextImageElement)
			{
				elementById.ID = sNewName;
				EndLogFunction(sNewName);
				return sNewName;
			}
			EndLogFunction(null);
			return null;
		}

		[ComVisible(true)]
		public virtual bool SetImageCopyProtection(string sName, bool bCopyProtect)
		{
			int num = 6;
			BeginLogFunction("SetImageCopyProtection", "sName=" + sName + "  bCopyProtect=" + bCopyProtect);
			XTextImageElement xTextImageElement = myEditControl.Document.GetElementById(sName) as XTextImageElement;
			if (xTextImageElement != null)
			{
				xTextImageElement.SetAttribute("ImageElementIsCopy", bCopyProtect.ToString());
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("true");
			return false;
		}

		[ComVisible(true)]
		public virtual bool SetImageDeleteProtection(string sName, bool bDeleteProtect)
		{
			int num = 13;
			BeginLogFunction("SetImageDeleteProtection", "sName=" + sName + "  bDeleteProtect" + bDeleteProtect);
			XTextImageElement xTextImageElement = GetElementById(sName) as XTextImageElement;
			if (xTextImageElement != null)
			{
				ContentProtectType contentProtectType = bDeleteProtect ? ContentProtectType.Content : ContentProtectType.None;
				if (xTextImageElement.RuntimeStyle.ProtectType != contentProtectType)
				{
					xTextImageElement.Style.ProtectType = contentProtectType;
					myEditControl.CommandControler.InvalidateCommandState();
					myEditControl.Document.OnDocumentContentChanged();
					EndLogFunction("true");
					return true;
				}
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool SetImageLockType(string sName, int nType)
		{
			BeginLogFunction("SetImageLockType", "sName=" + sName + "  nType=" + nType);
			AlertNotSupportedMember("SetImageLockType");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual string SetImageName(string sName, string sNewName)
		{
			BeginLogFunction("SetImageName", "sName=" + sName + "  sNewName=" + sNewName);
			XTextImageElement xTextImageElement = GetElementById(sName) as XTextImageElement;
			if (xTextImageElement != null)
			{
				xTextImageElement.ID = sNewName;
				EndLogFunction(xTextImageElement.ID);
				return xTextImageElement.ID;
			}
			EndLogFunction("");
			return "";
		}

		[ComVisible(true)]
		public virtual bool SetImageObjectDeleteProtection(string sName, bool bDeleteProtect)
		{
			BeginLogFunction("SetImageObjectDeleteProtection", "sName=" + sName + "  bDeleteProtect=" + bDeleteProtect);
			AlertNotSupportedMember("SetImageObjectDeleteProtection");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool SetImageObjectLayoutSize(string sImageName, float fOleWidth, float fOleHeight)
		{
			BeginLogFunction("SetImageObjectLayoutSize", "sImageName=" + sImageName + "  fOleWidth=" + fOleWidth + "  fOleHeight=" + fOleHeight);
			AlertNotSupportedMember("SetImageObjectLayoutSize");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool SetImagePositionSizeProtect(string sName, bool bPos, bool bSize)
		{
			int num = 4;
			BeginLogFunction("SetImagePositionSizeProtect", "sName=" + sName + "  bPos=" + bPos + "  bSize=" + bSize);
			XTextImageElement xTextImageElement = myEditControl.GetElementById(sName) as XTextImageElement;
			if (xTextImageElement != null)
			{
				if (bSize)
				{
					xTextImageElement.ContentReadonly = ContentReadonlyState.True;
				}
				else
				{
					xTextImageElement.ContentReadonly = ContentReadonlyState.False;
				}
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool SetImageThrough(string sName)
		{
			BeginLogFunction("SetImageThrough", "sName=" + sName);
			AlertNotSupportedMember("SetImageThrough");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool SetImageWaterMark(string strPath, int lScale, bool bWashOut)
		{
			int num = 13;
			BeginLogFunction("SetImageWaterMark", "strPath=" + strPath + "  lScale=" + lScale + "  bWashOut=" + bWashOut);
			if (!string.IsNullOrEmpty(strPath) && File.Exists(strPath))
			{
				XTextImageElement xTextImageElement = new XTextImageElement();
				xTextImageElement.ImageValue = Image.FromFile(strPath);
				myEditControl.Document.PageSettings = new XPageSettings();
				myEditControl.Document.PageSettings.Watermark = new WatermarkInfo();
				myEditControl.Document.PageSettings.Watermark.Type = WatermarkType.Image;
				myEditControl.Document.PageSettings.Watermark.Image = xTextImageElement.Image;
				myEditControl.RefreshDocument();
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public bool SetDateTimeBoxValue(string sName, string sValue)
		{
			int num = 17;
			BeginLogFunction("SetDateTimeBoxValue", "sName=" + sName + "  sValue=" + sValue);
			XTextElement elementById = GetElementById(sName);
			if (elementById != null && elementById is XTextInputFieldElement)
			{
				XTextInputFieldElement xTextInputFieldElement = (XTextInputFieldElement)elementById;
				int num2 = sValue.IndexOf("Date=", StringComparison.CurrentCultureIgnoreCase);
				int num3 = sValue.IndexOf("Time=", StringComparison.CurrentCultureIgnoreCase);
				if (num2 >= 0 && num3 > 0)
				{
					string str = sValue.Substring(num2 + 5, num3 - num2 - 5);
					string str2 = sValue.Substring(num3 + 5);
					xTextInputFieldElement.EditorTextExt = DateTime.Parse(str + " " + str2).ToString("yyyy-MM-dd HH:mm:ss");
					EndLogFunction("true");
					return true;
				}
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual string GetDateTimeBoxOutRangeInfo(string strName)
		{
			int num = 13;
			BeginLogFunction("GetDateTimeBoxOutRangeInfo", "strName=" + strName);
			XTextInputFieldElement xTextInputFieldElement = GetElementById(strName) as XTextInputFieldElement;
			if (xTextInputFieldElement != null)
			{
				string customMessage = xTextInputFieldElement.ValidateStyle.CustomMessage;
				if (customMessage == null || customMessage == string.Empty)
				{
					xTextInputFieldElement.ValidateStyle.CustomMessage = "超出范围";
				}
				EndLogFunction(xTextInputFieldElement.ValidateStyle.CustomMessage);
				return xTextInputFieldElement.ValidateStyle.CustomMessage;
			}
			EndLogFunction("");
			return "";
		}

		[ComVisible(true)]
		public virtual string GetDateTimeBoxValue(string sName)
		{
			BeginLogFunction("GetDateTimeBoxValue", "sName=" + sName);
			XTextInputFieldElement xTextInputFieldElement = GetElementById(sName) as XTextInputFieldElement;
			if (xTextInputFieldElement != null)
			{
				EndLogFunction(xTextInputFieldElement.Text);
				return xTextInputFieldElement.Text;
			}
			EndLogFunction("");
			return "";
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       LONG GetDateTimeFormat(BSTR sName)
		                                                                    ///       功能描述：
		                                                                    ///       获取指定名称日期框的默认显示格式
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sName	BSTR	DateTimeBox的名称	必须	
		                                                                    ///       返回值： 
		                                                                    ///       0			YYYY-MM-DD HH:MM				
		                                                                    ///       1			YYYY-MM-DD HH				
		                                                                    ///       2			YYYY-MM-DD					
		                                                                    ///       3			MM-DD						
		                                                                    ///       4			HH:mm						
		                                                                    ///       	5			YYYY年M月D日HH时MM分		
		                                                                    ///       	6			YYYY年M月D日HH时			
		                                                                    ///       	7			YYYY年M月D日				
		                                                                    ///       	8			M月D日						
		                                                                    ///       	9			HH时MM分						
		                                                                    ///       	10			YYYY/M/D	
		                                                                    ///       11			YYYY-MM-DD 星期
		                                                                    ///       12			YYYY-MM-DD 星期 HH:MM
		                                                                    ///       13       	MM-DD 星期
		                                                                    ///       14			YYYY年M月D日 星期 HH时MM分
		                                                                    ///       15			YYYY年M月D日 星期 HH时
		                                                                    ///       16			YYYY年M月D日 星期
		                                                                    ///       17			M月D日 星期
		                                                                    ///       18			YYYY/M/D 星期
		                                                                    ///       19  			YYYY-MM-DD (星期) HH:MM:SS			
		                                                                    ///       -1			获取失败
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNsoControl1.GetDateTimeFormat ("date1")
		                                                                    ///       实现说明：
		                                                                    ///       当调用接口SetDateTimeFormatEx设置过扩展格式码，后调用该接口返回-1
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public virtual int GetDateTimeFormat(string sName)
		{
			BeginLogFunction("GetDateTimeFormat", "sName=" + sName);
			XTextInputFieldElement xTextInputFieldElement = GetElementById(sName) as XTextInputFieldElement;
			if (xTextInputFieldElement != null && xTextInputFieldElement.DisplayFormat != null)
			{
				string format = xTextInputFieldElement.DisplayFormat.Format;
				foreach (int key in NsoDateTimeFormats.Keys)
				{
					if (NsoDateTimeFormats[key] == format)
					{
						EndLogFunction(key);
						return key;
					}
				}
			}
			EndLogFunction(-1);
			return -1;
		}

		[ComVisible(true)]
		public virtual string GetDateTimeFormatEx(string sName)
		{
			BeginLogFunction("GetDateTimeFormatEx", "sName=" + sName);
			XTextInputFieldElement xTextInputFieldElement = GetElementById(sName) as XTextInputFieldElement;
			if (xTextInputFieldElement != null && xTextInputFieldElement.DisplayFormat != null)
			{
				string format = xTextInputFieldElement.DisplayFormat.Format;
				EndLogFunction(format);
				return format;
			}
			EndLogFunction("");
			return "";
		}

		[ComVisible(true)]
		public virtual bool SetDateTimeBoxOutRangeInfo(string strName, string strInfo)
		{
			BeginLogFunction("SetDateTimeBoxOutRangeInfo", "strName=" + strName + "  strInfo=" + strInfo);
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BOOL SetDateTimeFormat(BSTR sName, LONG lType)
		                                                                    ///       功能描述：
		                                                                    ///       设置指定指定名称日期框的默认显示格式
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sName	BSTR	DateTimeBox的名称	必须	
		                                                                    ///       lType	LONG		必须	0	YYYY-MM-DD HH:MM	
		                                                                    ///       1	YYYY-MM-DD HH	
		                                                                    ///       2	YYYY-MM-DD		
		                                                                    ///       3	MM-DD			
		                                                                    ///       4	HH:mm		
		                                                                    ///       5	YYYY年M月D日HH时MM分
		                                                                    ///       6	YYYY年M月D日HH时
		                                                                    ///       7	YYYY年M月D日	
		                                                                    ///       8	M月D日			
		                                                                    ///       9	HH时MM分			
		                                                                    ///       10	YYYY/M/D	
		                                                                    ///       11	YYYY-MM-DD 星期
		                                                                    ///       12	YYYY-MM-DD 星期 HH:MM
		                                                                    ///       13  MM-DD 星期
		                                                                    ///       14  YYYY年M月D日 星期 HH时MM分
		                                                                    ///       15	YYYY年M月D日 星期 HH时
		                                                                    ///       16	YYYY年M月D日 星期
		                                                                    ///       17	M月D日 星期
		                                                                    ///       18	YYYY/M/D 星期
		                                                                    ///       19  YYYY-MM-DD (星期) HH:MM:SS
		                                                                    ///       返回值： 
		                                                                    ///       TRUE 成功| FALSE 失败, 
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNsoControl1. SetDateTimeFormat ("date1", 10)
		                                                                    ///       实现说明：
		                                                                    ///       无
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">
		                                                                    /// </param>
		                                                                    /// <param name="lType">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public virtual bool SetDateTimeFormat(string sName, int lType)
		{
			int num = 19;
			BeginLogFunction("SetDateTimeFormat", "sName=" + sName + "  lType=" + lType);
			XTextInputFieldElement xTextInputFieldElement = GetElementById(sName) as XTextInputFieldElement;
			if (xTextInputFieldElement != null && NsoDateTimeFormats.ContainsKey(lType))
			{
				if (xTextInputFieldElement.DisplayFormat == null)
				{
					xTextInputFieldElement.DisplayFormat = new ValueFormater();
				}
				xTextInputFieldElement.DisplayFormat.Style = ValueFormatStyle.DateTime;
				xTextInputFieldElement.DisplayFormat.Format = NsoDateTimeFormats[lType];
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool SetDateTimeFormatEx(string sName, string sFormat)
		{
			int num = 18;
			BeginLogFunction("SetDateTimeFormatEx", "sName=" + sName + "  sFormat=" + sFormat);
			XTextInputFieldElement xTextInputFieldElement = GetElementById(sName) as XTextInputFieldElement;
			if (xTextInputFieldElement != null)
			{
				if (xTextInputFieldElement.DisplayFormat == null)
				{
					xTextInputFieldElement.DisplayFormat = new ValueFormater();
				}
				xTextInputFieldElement.DisplayFormat.Style = ValueFormatStyle.DateTime;
				xTextInputFieldElement.DisplayFormat.Format = sFormat;
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public void CancelSelectOneArea(string string_0, int int_0)
		{
			BeginLogFunction("CancelSelectOneArea", "a=" + string_0 + "  b=" + int_0);
			myEditControl.Document.CurrentContentElement.SetSelection(myEditControl.Selection.AbsStartIndex, 0);
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public int GetCurrentCursorPage()
		{
			BeginLogFunction("GetCurrentCursorPage", null);
			if (myEditControl.CurrentPage == null)
			{
				EndLogFunction(0);
				return 0;
			}
			EndLogFunction(MyWriterControl.CurrentPage.PageIndex + 1);
			return MyWriterControl.CurrentPage.PageIndex + 1;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       Void SelectOneArea (LONG aBeginPage, LONG aBeginRow, LONG aEndPage, LONG aEndRow)
		                                                                    ///       功能描述：
		                                                                    ///       反亮选中指定的区域，便于用户确定打印的范围
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	  取值
		                                                                    ///       aBeginPage	    LONG	开始页码   必需	
		                                                                    ///       aBeginRow	    LONG	开始行	   必需	
		                                                                    ///       aEndPage	    LONG    结束页码   必需	
		                                                                    ///       aEndRow	        LONG    结束行	   必需	
		                                                                    ///       返回值：
		                                                                    ///       无
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1. SelectOneArea (1， 1， 2， 10)
		                                                                    ///       实现说明：
		                                                                    ///       无
		                                                                    ///       Date:10-8 Jy  
		                                                                    ///       修改日期：10-9 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="aBeginPage">
		                                                                    /// </param>
		                                                                    /// <param name="aBeginRow">
		                                                                    /// </param>
		                                                                    /// <param name="aEndPage">
		                                                                    /// </param>
		                                                                    /// <param name="aEndRow">
		                                                                    /// </param>
		[ComVisible(true)]
		public void SelectOneArea(int aBeginPage, int aBeginRow, int aEndPage, int aEndRow)
		{
			BeginLogFunction("SelectOneArea", "aBeginPage=" + aBeginPage + "  aBeginRow=" + aBeginRow + "  aEndPage=" + aEndPage + "  aEndRow=" + aEndRow);
			myEditControl.Document.Options.ViewOptions.SelectionHighlight = SelectionHighlightStyle.Invert;
			XTextLineList allLines = myEditControl.Document.Body.GetAllLines();
			int num = 0;
			int num2 = 0;
			if (aBeginPage > 0)
			{
				aBeginPage--;
			}
			if (aEndPage > 0)
			{
				aEndPage--;
			}
			foreach (XTextLine item in allLines)
			{
				if (item.OwnerPage.PageIndex == aBeginPage && item.IndexInPage == aBeginRow)
				{
					num = item.FirstElement.ViewIndex;
					break;
				}
			}
			foreach (XTextLine item2 in allLines)
			{
				if (item2.OwnerPage.PageIndex == aEndPage && item2.IndexInPage == aEndRow)
				{
					num2 = item2.LastElement.ViewIndex + 1;
					break;
				}
			}
			myEditControl.Document.Content.method_47(num, num2 - num);
			EndLogFunction(null);
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       Void SelectOneArea2 (LONG nBeginPos, LONG nEndPos)
		                                                                    ///       功能描述：
		                                                                    ///       根据字符位置反亮选中指定的区域
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       nBeginPos	LONG	开始位置	必需	非0
		                                                                    ///       nEndPos	LONG	开始位置	必需	非0
		                                                                    ///       返回值：
		                                                                    ///       无
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1. SelectOneArea2 (2， 10)
		                                                                    ///       实现说明：
		                                                                    ///       无
		                                                                    ///       Date:10-8 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="nBeginPos">
		                                                                    /// </param>
		                                                                    /// <param name="nEndPos">
		                                                                    /// </param>
		[ComVisible(true)]
		public void SelectOneArea2(int nBeginPos, int nEndPos)
		{
			BeginLogFunction("SelectOneArea2(BeignPos=" + nBeginPos + "  EndPos=" + nEndPos + ")");
			myEditControl.Document.Options.ViewOptions.SelectionHighlight = SelectionHighlightStyle.Invert;
			myEditControl.Document.Content.method_47(nBeginPos, nEndPos - nBeginPos);
			EndLogFunction(null);
		}

		                                                                    /// <summary>
		                                                                    ///       获得选择区域的开始序号
		                                                                    ///       </summary>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public int GetSelectionRangeStar()
		{
			BeginLogFunction("GetSelectionRangeStar");
			EndLogFunction(MyWriterControl.Selection.AbsStartIndex);
			return MyWriterControl.Selection.AbsStartIndex;
		}

		                                                                    /// <summary>
		                                                                    ///       获得选择区域结尾序号
		                                                                    ///       </summary>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public int GetSelectionRangeEnd()
		{
			BeginLogFunction("GetSelectionRangeStar");
			EndLogFunction(MyWriterControl.Selection.AbsEndIndex);
			return MyWriterControl.Selection.AbsEndIndex;
		}

		                                                                    /// <summary>
		                                                                    ///       设置插入点到指定位置
		                                                                    ///       </summary>
		                                                                    /// <param name="position">指定的位置</param>
		[ComVisible(true)]
		public void JumpToOnePostion(int position)
		{
			BeginLogFunction("JumpToOnePostion", "position = " + position);
			myEditControl.Focus();
			myEditControl.ExecuteCommand("MoveToPosition", showUI: false, position);
			EndLogFunction(null);
		}

		                                                                    /// <summary>
		                                                                    ///       光标跳到前一页文本的最后
		                                                                    ///       </summary>
		[ComVisible(true)]
		public void JumpToPreviousPage()
		{
			BeginLogFunction("JumpToPreviousPage");
			myEditControl.ExecuteCommand("MovePageUp", showUI: false, null);
			myEditControl.Focus();
			EndLogFunction(null);
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BOOL JumpToFileEnd()
		                                                                    ///       功能描述：
		                                                                    ///       光标跳转到文件末尾
		                                                                    ///       参数：
		                                                                    ///       	      无
		                                                                    ///       返回值：
		                                                                    ///       FALSE 表示失败
		                                                                    ///       TRUE  表示成功
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1. JumpToFileEnd ()
		                                                                    ///       实现说明：
		                                                                    ///       无
		                                                                    ///       Date:10-8 Jy
		                                                                    ///       </summary>
		[ComVisible(true)]
		public bool JumpToFileEnd()
		{
			BeginLogFunction("JumpToFileEnd");
			myEditControl.Document.Body.Focus();
			myEditControl.MoveTo(MoveTarget.DocumentEnd);
			myEditControl.Focus();
			EndLogFunction("true");
			return true;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       void JumpToFirstPage ( void )
		                                                                    ///       功能描述：
		                                                                    ///       	光标跳到文档的第一页页首。
		                                                                    ///       参数：无
		                                                                    ///       返回值：无
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1.JumpToFirstPage()
		                                                                    ///       实现说明：
		                                                                    ///       如果已经在首页，光标也会跳转到页首。
		                                                                    ///       Date:10-8 Jy
		                                                                    ///       </summary>
		[ComVisible(true)]
		public void JumpToFirstPage()
		{
			BeginLogFunction("JumpToFirstPage");
			myEditControl.ExecuteCommand("MoveTo", showUI: false, MoveTarget.DocumentHome);
			myEditControl.Focus();
			EndLogFunction(null);
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       void JumpToLastPage ( void )
		                                                                    ///       功能描述：
		                                                                    ///       光标跳到文档的最后一页页首。
		                                                                    ///       参数：无
		                                                                    ///       返回值：无
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1.JumpToLastPage()
		                                                                    ///       实现说明：无
		                                                                    ///       Date:10-8 Jy
		                                                                    ///       </summary>
		[ComVisible(true)]
		public void JumpToLastPage()
		{
			BeginLogFunction("JumpToLastPage");
			myEditControl.ExecuteCommand("MoveToPage", showUI: false, myEditControl.Document.Pages.Count);
			myEditControl.Focus();
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public void JumpToStartOfPage()
		{
			BeginLogFunction("JumpToStartOfPage");
			myEditControl.ExecuteCommand("MoveTo", showUI: false, MoveTarget.PageHome);
			myEditControl.Focus();
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public void JumpToEndOfPage()
		{
			BeginLogFunction("JumpToEndOfPage");
			myEditControl.ExecuteCommand("MoveTo", showUI: false, MoveTarget.PageEnd);
			myEditControl.Focus();
			EndLogFunction(null);
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       void JumpToPage ( short PageIndex )
		                                                                    ///       功能描述：
		                                                                    ///       光标跳到指定的页面页首。
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       PageIndex	short	指定的页面	必须	
		                                                                    ///       返回值：无
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1.JumpToPage(3)
		                                                                    ///       实现说明：
		                                                                    ///       参数有效性没有做判断，最大页数可以通过pageCount属性来获得；
		                                                                    ///       Date:10-8 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="PageIndex">
		                                                                    /// </param>
		[ComVisible(true)]
		public void JumpToPage(short PageIndex)
		{
			BeginLogFunction("JumpToPage", "PageIndex = " + PageIndex);
			myEditControl.ExecuteCommand("MoveToPage", showUI: false, Convert.ToInt32(PageIndex));
			EndLogFunction(null);
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       void JumpToNextPage ( void )
		                                                                    ///       功能描述：
		                                                                    ///       光标跳到当前页面的下一页所有文本的最前。
		                                                                    ///       参数：无
		                                                                    ///       返回值：无
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1.JumpToNextPage()
		                                                                    ///       实现说明：无
		                                                                    ///       Date:10-8 Jy
		                                                                    ///       </summary>
		[ComVisible(true)]
		public void JumpToNextPage()
		{
			BeginLogFunction("JumpToNextPage");
			myEditControl.ExecuteCommand("MovePageDown", showUI: false, null);
			EndLogFunction(null);
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BOOL JumpToOneSearchPos(BSTR sText,LONG lPos)
		                                                                    ///       功能描述：
		                                                                    ///       搜索给定的文本，并且高亮选中指定位置的文本
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sText	BSTR	待搜索文本	必须	
		                                                                    ///       lPos	LONG	跳转的文本索引	必须	从1到搜索到文本总条目数目
		                                                                    ///       返回值：
		                                                                    ///       BOOL  TRUE – 成功
		                                                                    ///       FALSE － 失败
		                                                                    ///       代码示例：（假设文档中有三处王)
		                                                                    ///       AxNsoControl1. JumpToOneSearchPos (“王”,2)
		                                                                    ///       Date:10-11 Jy  待修改
		                                                                    ///       </summary>
		                                                                    /// <param name="sText">
		                                                                    /// </param>
		                                                                    /// <param name="lpos">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool JumpToOneSearchPos(string sText, int lpos)
		{
			int num = 2;
			BeginLogFunction("JumpToOneSearchPos", "sText=" + sText + "  lpos=" + lpos);
			if (sText == null)
			{
				throw new ArgumentNullException("sText");
			}
			SearchReplaceCommandArgs searchReplaceCommandArgs = new SearchReplaceCommandArgs();
			searchReplaceCommandArgs.EnableReplaceString = false;
			searchReplaceCommandArgs.IgnoreCase = false;
			searchReplaceCommandArgs.SearchString = sText;
			int num2 = (int)myEditControl.ExecuteCommand("SearchReplace", showUI: false, searchReplaceCommandArgs);
			if (num2 > 0)
			{
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       BOOL CursorJumpOutOfOneRegion(BSTR strName,BOOL bBack)
		                                                                    ///              功能描述：
		                                                                    ///       光标跳转到某一个区域的前面或者后面
		                                                                    ///              参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       strName	BSTR	区域名	必须	
		                                                                    ///       bBack	BOOL	前面或者后面	必须	true – 区域的后面
		                                                                    ///       false – 区域的前面
		                                                                    ///              返回值：
		                                                                    ///       True   成功
		                                                                    ///       False  失败
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1.CursorJumpOutOfOneRegion (“区域1”,true)
		                                                                    ///                实现说明：
		                                                                    ///       调用AxNsoControl1.CursorJumpOutOfOneRegion (“区域1”,true)，光标处于区域1的下面一行开始处，调用AxNsoControl1.CursorJumpOutOfOneRegion (“区域1”,false)，光标处于区域1的上面一行开始处
		                                                                    ///       </summary>
		                                                                    /// <param name="strName">
		                                                                    /// </param>
		                                                                    /// <param name="bEnd">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public virtual bool CursorJumpOutOfOneRegion(string strName, bool bEnd)
		{
			int num = 7;
			BeginLogFunction("CursorJumpOutOfOneRegion", "strName=" + strName + "  bEnd=" + bEnd);
			XTextSectionElement xTextSectionElement = myEditControl.GetElementById(strName) as XTextSectionElement;
			float num2 = 0f;
			if (xTextSectionElement != null)
			{
				num2 = ((!bEnd) ? xTextSectionElement.Elements.FirstElement.AbsLeft : (xTextSectionElement.Elements.FirstElement.AbsLeft + xTextSectionElement.Elements.FirstElement.Width));
			}
			EndLogFunction(((bool)myEditControl.ExecuteCommand("MoveToPosition", showUI: false, num2)).ToString());
			return (bool)myEditControl.ExecuteCommand("MoveToPosition", showUI: false, num2);
		}

		[ComVisible(true)]
		public virtual bool CursorJumpOutOfOneTable(string sTableName, int nMark)
		{
			BeginLogFunction("CursorJumpOutOfOneTable", "sTableName=" + sTableName + "  nMark=" + nMark);
			AlertNotSupportedMember("CursorJumpOutOfOneTable");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool CursorJumpToEndOfParagraph()
		{
			BeginLogFunction("CursorJumpToEndOfParagraph");
			myEditControl.ExecuteCommand("MoveTo", showUI: false, "ParagraphEnd");
			EndLogFunction("true");
			return true;
		}

		[ComVisible(true)]
		public virtual bool CursorJumpToStartOfParagraph()
		{
			BeginLogFunction("CursorJumpToStartOfParagraph");
			myEditControl.ExecuteCommand("MoveTo", showUI: false, "ParagraphHome");
			EndLogFunction("true");
			return true;
		}

		[ComVisible(true)]
		public virtual void JumpToFooter()
		{
			BeginLogFunction("JumpToFooter");
			myEditControl.Document.Footer.Focus();
			myEditControl.MoveToPosition(0);
			myEditControl.Focus();
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public virtual bool JumpToFooterByPage(int lPage)
		{
			BeginLogFunction("JumpToFooterByPage", "lPage=" + lPage);
			AlertNotSupportedMember("JumpToFooterByPage");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual void JumpToHeader()
		{
			BeginLogFunction("JumpToHeader");
			if (HasFileOpened() != "-1" && pnlMainContainer.Visible)
			{
				myEditControl.Document.Header.Focus();
				myEditControl.MoveToPosition(0);
				myEditControl.Focus();
			}
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public virtual bool JumpToHeaderByPage(int lPage)
		{
			BeginLogFunction("JumpToHeaderByPage", "lPage=" + lPage);
			AlertNotSupportedMember("JumpToHeaderByPage");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual void JumpToMainbody()
		{
			BeginLogFunction("JumpToMainbody");
			AlertNotSupportedMember("JumpToMainbody");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual void JumpToOnePostil(string sContent, string sTime)
		{
			BeginLogFunction("JumpToOnePostil", "sContent=" + sContent + "  sTime=" + sTime);
			AlertNotSupportedMember("JumpToOnePostil");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool JumpToSpecificLineOfPage(int lPage, int lLine)
		{
			BeginLogFunction("JumpToSpecificLineOfPage", "lPage=" + lPage + "  lLine=" + lLine);
			AlertNotSupportedMember("JumpToSpecificLineOfPage");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		private void StartNsoEvents()
		{
			myEditControl.BeforeExecuteCommand += myEditControl_BeforeExecuteCommand;
			myEditControl.AfterExecuteCommand += myEditControl_AfterExecuteCommand;
			myEditControl.EventMouseDownExt += myEditControl_EventMouseDownExt;
			myEditControl.EventMouseUpExt += myEditControl_EventMouseUpExt;
			myEditControl.KeyDown += myEditControl_KeyDown;
			myEditControl.EventTableAddNewRowWhenPressTabKey += myEditControl_EventTableAddNewRowWhenPressTabKey;
			myEditControl.DocumentContentChanged += myEditControl_DocumentContentChanged;
			myEditControl.AfterLoadDocumentDom += myEditControl_AfterLoadDocumentDom;
			ElementEventTemplate fieldEventTemplate = GetFieldEventTemplate();
			MyWriterControl.GlobalEventTemplate_Field = fieldEventTemplate;
			MyWriterControl.GlobalEventTemplate_CheckBox = fieldEventTemplate;
			MyWriterControl.GlobalEventTemplate_Image = fieldEventTemplate;
			MyWriterControl.GlobalEventTemplates[typeof(XTextSectionElement)] = fieldEventTemplate;
		}

		private void myEditControl_AfterLoadDocumentDom(object sender, WriterEventArgs e)
		{
			XTextElementList elementsByType = Document.GetElementsByType(typeof(XTextInputFieldElement));
			if (elementsByType != null && elementsByType.Count > 0)
			{
				foreach (XTextInputFieldElement item in elementsByType)
				{
					if (IsNewControl(item))
					{
						item.EnableHighlight = EnableState.Enabled;
					}
				}
			}
			Document.Options.ViewOptions.FieldHoverBackColor = Color.CornflowerBlue;
		}

		private void myEditControl_KeyDown(object sender, KeyEventArgs e)
		{
			if (EnableRaiseOnNsoKeyPressedEvent)
			{
				if (e.Alt)
				{
					RaiseOnNsoKeyPressedEvent(this, new _INsoControlEvents_NsoKeyPressedEventEvent(TransNsoControlKeyCode(e.KeyCode), (sbyte)e.KeyCode, 0, 4, bCancel: false));
				}
				else if (e.Control)
				{
					RaiseOnNsoKeyPressedEvent(this, new _INsoControlEvents_NsoKeyPressedEventEvent(TransNsoControlKeyCode(e.KeyCode), (sbyte)e.KeyCode, 0, 2, bCancel: false));
				}
				else if (e.Shift)
				{
					RaiseOnNsoKeyPressedEvent(this, new _INsoControlEvents_NsoKeyPressedEventEvent(TransNsoControlKeyCode(e.KeyCode), (sbyte)e.KeyCode, 0, 1, bCancel: false));
				}
				else
				{
					RaiseOnNsoKeyPressedEvent(this, new _INsoControlEvents_NsoKeyPressedEventEvent(TransNsoControlKeyCode(e.KeyCode), (sbyte)e.KeyCode, 0, 0, bCancel: false));
				}
			}
			if (EnableRaiseOnNsoKeyPressedEvent2)
			{
				if (e.Alt)
				{
					RaiseOnNsoKeyPressedEvent2(this, new _INsoControlEvents_NsoKeyPressedEvent2Event(TransNsoControlKeyCode(e.KeyCode), (short)e.KeyCode, 0, 4, bCancel: false));
				}
				else if (e.Control)
				{
					RaiseOnNsoKeyPressedEvent2(this, new _INsoControlEvents_NsoKeyPressedEvent2Event(TransNsoControlKeyCode(e.KeyCode), (short)e.KeyCode, 0, 2, bCancel: false));
				}
				else if (e.Shift)
				{
					RaiseOnNsoKeyPressedEvent2(this, new _INsoControlEvents_NsoKeyPressedEvent2Event(TransNsoControlKeyCode(e.KeyCode), (short)e.KeyCode, 0, 1, bCancel: false));
				}
				else
				{
					RaiseOnNsoKeyPressedEvent2(this, new _INsoControlEvents_NsoKeyPressedEvent2Event(TransNsoControlKeyCode(e.KeyCode), (short)e.KeyCode, 0, 0, bCancel: false));
				}
			}
		}

		private short TransNsoControlKeyCode(Keys keyCode)
		{
			return (short)(keyCode + 447);
		}

		private void myEditControl_DocumentContentChanged(object sender, WriterEventArgs e)
		{
			InnerRaiseOnNsoFileModifyChanged();
		}

		private void myEditControl_EventTableAddNewRowWhenPressTabKey(object sender, WriterEventArgs e)
		{
			if (EnableRaiseOnNsoTableAddNewRowWhenPressTabKey)
			{
				RaiseOnNsoTableAddNewRowWhenPressTabKey(this, new _INsoControlEvents_NsoTableAddNewRowWhenPressTabKeyEvent(e.Element.ID));
			}
		}

		private ElementEventTemplate GetFieldEventTemplate()
		{
			ElementEventTemplate elementEventTemplate = new ElementEventTemplate();
			elementEventTemplate.GotFocus += eet_GotFocus;
			elementEventTemplate.MouseClick += eet_MouseClick;
			elementEventTemplate.LostFocus += eet_LostFocus;
			elementEventTemplate.MouseMove += eet_MouseMove;
			elementEventTemplate.MouseDblClick += eet_MouseDblClick;
			elementEventTemplate.MouseEnter += eet_MouseEnter;
			elementEventTemplate.MouseLeave += eet_MouseLeave;
			elementEventTemplate.ContentChanged += eet_ContentChanged;
			elementEventTemplate.Validated += eet_Validated;
			elementEventTemplate.BeforeDropDown += eet_BeforeDropDown;
			return elementEventTemplate;
		}

		private void eet_BeforeDropDown(object sender, ElementCancelEventArgs e)
		{
			int num = 16;
			if (!IsNewControl(e.Element))
			{
				return;
			}
			if (!string.IsNullOrEmpty(e.Element.GetAttribute("SetUCControl")) || !string.IsNullOrEmpty(e.Element.GetAttribute("FormatConvertClassWord")))
			{
				e.Cancel = true;
				e.CancelBubble = true;
				return;
			}
			e.CancelBubble = true;
			if (EnableRaiseOnNsoNewControlDropDown)
			{
				INsoCallback[] callbacks = GetCallbacks(e.Element.ID, CallbackEvent.All);
				INsoCallback[] array = callbacks;
				foreach (INsoCallback nsoCallback in array)
				{
					nsoCallback.NotifyNsoNewControlBeforeDropDown(e.Element.ID, null);
				}
				RaiseOnNsoNewControlBeforeDropDown(this, new _INsoControlEvents_NsoNewControlBeforeDropDownEvent(e.Element.ID));
			}
		}

		private void eet_Validated(object sender, ElementEventArgs e)
		{
			if (e.Element is XTextInputFieldElement)
			{
				e.CancelBubble = true;
				XTextInputFieldElement xTextInputFieldElement = (XTextInputFieldElement)e.Element;
				if (xTextInputFieldElement.LastValidateResult == null)
				{
					xTextInputFieldElement.BackgroundTextColor = Color.Transparent;
					xTextInputFieldElement.TextColor = Color.Transparent;
				}
				else
				{
					xTextInputFieldElement.BackgroundTextColor = Color.Red;
					xTextInputFieldElement.TextColor = Color.Red;
				}
			}
		}

		private void eet_ContentChanged(object sender, ContentChangedEventArgs e)
		{
			if (e.LoadingDocument)
			{
				return;
			}
			if (e.Element is XTextInputFieldElement)
			{
				if (IsNsoSection(e.Element))
				{
					e.CancelBubble = true;
					if (EnableRaiseOnNsoSectionChanged)
					{
						RaiseOnNsoSectionChanged(this, new _INsoControlEvents_NsoSectionChangedEvent(e.Element.ID));
					}
				}
				else
				{
					if (!IsNewControl(e.Element))
					{
						return;
					}
					e.CancelBubble = true;
					if (EnableRaiseOnNsoNewControlChanged)
					{
						INsoCallback[] callbacks = GetCallbacks(e.Element.ID, CallbackEvent.All);
						INsoCallback[] array = callbacks;
						foreach (INsoCallback nsoCallback in array)
						{
							nsoCallback.NotifyNsoNewControlChanged(e.Element.ID, null);
						}
						RaiseOnNsoNewControlChanged(this, new _INsoControlEvents_NsoNewControlChangedEvent(e.Element.ID));
					}
				}
			}
			else if (e.Element is XTextCheckBoxElementBase)
			{
				if (!IsNewControl(e.Element))
				{
					return;
				}
				e.CancelBubble = true;
				if (EnableRaiseOnNsoNewControlCheckedChanged)
				{
					INsoCallback[] callbacks = GetCallbacks(e.Element.ID, CallbackEvent.All);
					INsoCallback[] array = callbacks;
					foreach (INsoCallback nsoCallback2 in array)
					{
						nsoCallback2.NotifyNsoNewControlCheckedChanged(e.Element.ID, null);
					}
					RaiseOnNsoNewControlCheckedChanged(this, new _INsoControlEvents_NsoNewControlCheckedChangedEvent(e.Element.ID));
				}
			}
			else
			{
				if (!(e.Element is XTextSectionElement) || !IsNsoRegion(e.Element))
				{
					return;
				}
				e.CancelBubble = true;
				if (EnableRaiseOnNsoRegionChanged)
				{
					INsoCallback[] callbacks = GetCallbacks(e.Element.ID, CallbackEvent.All);
					INsoCallback[] array = callbacks;
					foreach (INsoCallback nsoCallback2 in array)
					{
						nsoCallback2.NotifyNsoRegionChanged(e.Element.ID, null);
					}
					RaiseOnNsoRegionChanged(this, new _INsoControlEvents_NsoRegionChangedEvent(e.Element.ID));
				}
			}
		}

		private void eet_MouseLeave(object sender, ElementEventArgs e)
		{
			if (e.Element is XTextInputFieldElement)
			{
				if (IsNsoSection(e.Element))
				{
					e.CancelBubble = true;
					if (EnableRaiseOnNsoSectionCursorLeft)
					{
						RaiseOnNsoSectionCursorLeft(this, new _INsoControlEvents_NsoSectionCursorLeftEvent(e.Element.ID));
					}
				}
				else if (IsNewControl(e.Element))
				{
					e.CancelBubble = true;
					if (EnableRaiseOnNsoNewControlCursorLeft)
					{
						RaiseOnNsoNewControlCursorLeft(this, new _INsoControlEvents_NsoNewControlCursorLeftEvent(e.Element.ID));
					}
				}
			}
			else if (e.Element is XTextCheckBoxElementBase && IsNewControl(e.Element))
			{
				e.CancelBubble = true;
				if (EnableRaiseOnNsoNewControlCursorLeft)
				{
					RaiseOnNsoNewControlCursorLeft(this, new _INsoControlEvents_NsoNewControlCursorLeftEvent(e.Element.ID));
				}
			}
		}

		private void eet_MouseEnter(object sender, ElementEventArgs e)
		{
			if (e.Element is XTextInputFieldElement)
			{
				if (IsNsoSection(e.Element))
				{
					e.CancelBubble = true;
					if (EnableRaiseOnNsoSectionCursorEnter)
					{
						RaiseOnNsoSectionCursorEnter(this, new _INsoControlEvents_NsoSectionCursorEnterEvent(e.Element.ID));
					}
				}
				else if (IsNewControl(e.Element))
				{
					e.CancelBubble = true;
					if (EnableRaiseOnNsoNewControlCursorEnter)
					{
						RaiseOnNsoNewControlCursorEnter(this, new _INsoControlEvents_NsoNewControlCursorEnterEvent(e.Element.ID));
					}
				}
			}
			else if (e.Element is XTextCheckBoxElementBase && IsNewControl(e.Element))
			{
				e.CancelBubble = true;
				if (EnableRaiseOnNsoNewControlCursorEnter)
				{
					RaiseOnNsoNewControlCursorEnter(this, new _INsoControlEvents_NsoNewControlCursorEnterEvent(e.Element.ID));
				}
			}
		}

		private void eet_MouseDblClick(object sender, ElementMouseEventArgs e)
		{
			if (e.Element is XTextImageElement)
			{
				e.CancelBubble = true;
				if (EnableRaiseOnNsoImageDBClick)
				{
					RaiseOnNsoImageClick(this, new _INsoControlEvents_NsoImageClickEvent(e.Element.ID));
				}
			}
			else if (IsNewControl(e.Element))
			{
				e.CancelBubble = true;
				if (EnableRaiseOnNsoNewControlDBClick)
				{
					RaiseOnNsoNewControlDBClick(this, new _INsoControlEvents_NsoNewControlDBClickEvent(e.Element.ID));
				}
			}
			else if (IsNsoSection(e.Element))
			{
				e.CancelBubble = true;
				if (EnableRaiseOnNsoSectionDBClick)
				{
					RaiseOnNsoSectionDBClick(this, new _INsoControlEvents_NsoSectionDBClickEvent(e.Element.ID));
				}
			}
			else if (IsNsoRegion(e.Element))
			{
				e.CancelBubble = true;
				if (EnableRaiseOnNsoRegionDBClick)
				{
					RaiseOnNsoRegionDBClick(this, new _INsoControlEvents_NsoRegionDBClickEvent(e.Element.ID));
				}
			}
		}

		private void eet_MouseMove(object sender, ElementMouseEventArgs e)
		{
			int num = 12;
			if (!ShowDesignInfoToolTip)
			{
				return;
			}
			StringBuilder stringBuilder = new StringBuilder();
			if (e.Element is XTextCheckBoxElementBase)
			{
				e.CancelBubble = true;
				XTextCheckBoxElementBase xTextCheckBoxElementBase = (XTextCheckBoxElementBase)e.Element;
				if (!string.IsNullOrEmpty(xTextCheckBoxElementBase.ToolTip))
				{
					stringBuilder.AppendLine(xTextCheckBoxElementBase.ToolTip);
				}
				stringBuilder.AppendLine("ID:" + xTextCheckBoxElementBase.ID);
				stringBuilder.AppendLine("Name:" + xTextCheckBoxElementBase.Name);
				stringBuilder.AppendLine("GroupName:" + xTextCheckBoxElementBase.GroupName);
				XAttributeList attributes = xTextCheckBoxElementBase.Attributes;
				if (attributes != null)
				{
					if (attributes.ContainsByName("ID"))
					{
						stringBuilder.AppendLine("ID属性:" + attributes.GetValue("ID"));
					}
					if (attributes.ContainsByName("ClickID"))
					{
						stringBuilder.AppendLine("ClickID属性:" + attributes.GetValue("ClickID"));
					}
				}
			}
			else if (e.Element is XTextInputFieldElement)
			{
				e.CancelBubble = true;
				XTextInputFieldElement xTextInputFieldElement = (XTextInputFieldElement)e.Element;
				if (!string.IsNullOrEmpty(xTextInputFieldElement.ToolTip))
				{
					stringBuilder.AppendLine(xTextInputFieldElement.ToolTip);
				}
				stringBuilder.AppendLine("ID:" + xTextInputFieldElement.ID);
				stringBuilder.AppendLine("Name:" + xTextInputFieldElement.Name);
				XAttributeList attributes = xTextInputFieldElement.Attributes;
				if (attributes != null)
				{
					if (attributes.ContainsByName("ID"))
					{
						stringBuilder.AppendLine("元素ID:" + attributes.GetValue("ID"));
					}
					if (attributes.ContainsByName("ClickID"))
					{
						stringBuilder.AppendLine("ClickID属性:" + attributes.GetValue("ClickID"));
					}
				}
			}
			MyWriterControl.ToolTips.method_8(e.Element, stringBuilder.ToString());
		}

		private void eet_LostFocus(object sender, ElementEventArgs e)
		{
			if (IsNsoSection(e.Element))
			{
				e.CancelBubble = true;
				if (!_NeedSection)
				{
					return;
				}
				if (EnableRaiseOnNsoSectionLostFocus)
				{
					INsoCallback[] callbacks = GetCallbacks(e.Element.ID, CallbackEvent.All);
					INsoCallback[] array = callbacks;
					foreach (INsoCallback nsoCallback in array)
					{
						nsoCallback.NotifyNsoSectionLostFocus(e.Element.ID, null);
					}
					RaiseOnNsoSectionLostFocus(this, new _INsoControlEvents_NsoSectionLostFocusEvent(e.Element.ID));
					e.CancelBubble = true;
				}
				if (EnableRaiseOnNsoSectionCursorLeft)
				{
					INsoCallback[] callbacks = GetCallbacks(e.Element.ID, CallbackEvent.All);
					INsoCallback[] array = callbacks;
					foreach (INsoCallback nsoCallback in array)
					{
						nsoCallback.NotifyNsoSectionCursorLeft(e.Element.ID, null);
					}
					RaiseOnNsoSectionCursorLeft(this, new _INsoControlEvents_NsoSectionCursorLeftEvent(e.Element.ID));
					e.CancelBubble = true;
				}
			}
			else
			{
				if (!IsNewControl(e.Element))
				{
					return;
				}
				e.CancelBubble = true;
				if (!_NeedNewControl)
				{
					return;
				}
				if (e.Element is XTextInputFieldElement)
				{
					if (EnableRaiseOnNsoNewControlLostFocus)
					{
						INsoCallback[] callbacks = GetCallbacks(e.Element.ID, CallbackEvent.All);
						INsoCallback[] array = callbacks;
						foreach (INsoCallback nsoCallback in array)
						{
							nsoCallback.NotifyNsoNewControlLostFocus(e.Element.ID, null);
						}
						RaiseOnNsoNewControlLostFocus(this, new _INsoControlEvents_NsoNewControlLostFocusEvent(e.Element.ID));
						e.CancelBubble = true;
					}
					if (EnableRaiseOnNsoNewControlCursorLeft)
					{
						INsoCallback[] callbacks = GetCallbacks(e.Element.ID, CallbackEvent.All);
						INsoCallback[] array = callbacks;
						foreach (INsoCallback nsoCallback in array)
						{
							nsoCallback.NotifyNsoNewControlCursorLeft(e.Element.ID, null);
						}
						RaiseOnNsoNewControlCursorLeft(this, new _INsoControlEvents_NsoNewControlCursorLeftEvent(e.Element.ID));
						e.CancelBubble = true;
					}
				}
				else if (e.Element is XTextCheckBoxElementBase)
				{
				}
			}
		}

		private void eet_MouseClick(object sender, ElementMouseEventArgs e)
		{
			int num = 11;
			if (IsNsoSection(e.Element))
			{
				XTextInputFieldElement xTextInputFieldElement = (XTextInputFieldElement)e.Element;
				string attribute = xTextInputFieldElement.GetAttribute("OleSectionProgID");
				if (!string.IsNullOrEmpty(attribute))
				{
					Type typeFromProgID = Type.GetTypeFromProgID(attribute);
					if (typeFromProgID != null)
					{
						object obj = Activator.CreateInstance(typeFromProgID);
						if (obj != null)
						{
						}
					}
				}
				e.CancelBubble = true;
				if (_NeedSection && EnableRaiseOnNsoSectionClick)
				{
					RaiseOnNsoSectionClick(this, new _INsoControlEvents_NsoSectionClickEvent(e.Element.ID));
					e.CancelBubble = true;
				}
			}
			else if (e.Element is XTextInputFieldElementBase || e.Element is XTextCheckBoxElementBase)
			{
				e.CancelBubble = true;
				if (_NeedNewControl && IsNewControl(e.Element) && EnableRaiseOnNsoNewControlClick)
				{
					RaiseOnNsoNewControlClick(this, new _INsoControlEvents_NsoNewControlClickEvent(e.Element.ID));
				}
			}
			else if (e.Element is XTextImageElement)
			{
				e.CancelBubble = true;
				if (EnableRaiseOnNsoImageClick)
				{
					RaiseOnNsoImageClick(this, new _INsoControlEvents_NsoImageClickEvent(e.Element.ID));
				}
			}
		}

		private void eet_GotFocus(object sender, ElementEventArgs e)
		{
			if (IsNsoSection(e.Element))
			{
				e.CancelBubble = true;
				if (!_NeedSection)
				{
					return;
				}
				if (EnableRaiseOnNsoSectionGainFocus)
				{
					INsoCallback[] callbacks = GetCallbacks(e.Element.ID, CallbackEvent.GainFocus);
					INsoCallback[] array = callbacks;
					foreach (INsoCallback nsoCallback in array)
					{
						nsoCallback.NotifyNsoNewControlGainFocus(e.Element.ID, null);
					}
					RaiseOnNsoSectionGainFocus(this, new _INsoControlEvents_NsoSectionGainFocusEvent(e.Element.ID));
					e.CancelBubble = true;
				}
				if (EnableRaiseOnNsoSectionCursorEnter)
				{
					INsoCallback[] callbacks = GetCallbacks(e.Element.ID, CallbackEvent.All);
					INsoCallback[] array = callbacks;
					foreach (INsoCallback nsoCallback in array)
					{
						nsoCallback.NotifyNsoNewControlCursorEnter(e.Element.ID, null);
					}
					RaiseOnNsoSectionCursorEnter(this, new _INsoControlEvents_NsoSectionCursorEnterEvent(e.Element.ID));
				}
			}
			else if (IsNewControl(e.Element))
			{
				e.CancelBubble = true;
				if (EnableRaiseOnNsoNewControlGainFocus)
				{
					INsoCallback[] callbacks = GetCallbacks(e.Element.ID, CallbackEvent.GainFocus);
					INsoCallback[] array = callbacks;
					foreach (INsoCallback nsoCallback in array)
					{
						nsoCallback.NotifyNsoNewControlGainFocus(e.Element.ID, null);
					}
					RaiseOnNsoNewControlGainFocus(this, new _INsoControlEvents_NsoNewControlGainFocusEvent(e.Element.ID));
					e.CancelBubble = true;
				}
				if (EnableRaiseOnNsoNewControlCursorEnter)
				{
					INsoCallback[] callbacks = GetCallbacks(e.Element.ID, CallbackEvent.All);
					INsoCallback[] array = callbacks;
					foreach (INsoCallback nsoCallback in array)
					{
						nsoCallback.NotifyNsoNewControlCursorEnter(e.Element.ID, null);
					}
					RaiseOnNsoNewControlCursorEnter(this, new _INsoControlEvents_NsoNewControlCursorEnterEvent(e.Element.ID));
					e.CancelBubble = true;
				}
			}
			else
			{
				if (!IsNsoRegion(e.Element))
				{
					return;
				}
				e.CancelBubble = true;
				if (EnableRaiseOnNsoRegionGainFocus)
				{
					INsoCallback[] callbacks = GetCallbacks(e.Element.ID, CallbackEvent.GainFocus);
					INsoCallback[] array = callbacks;
					foreach (INsoCallback nsoCallback in array)
					{
						nsoCallback.NotifyNsoRegionGainFocus(e.Element.ID, null);
					}
					RaiseOnNsoRegionGainFocus(this, new _INsoControlEvents_NsoRegionGainFocusEvent(e.Element.ID));
					e.CancelBubble = true;
				}
			}
		}

		private void myEditControl_EventMouseUpExt(object sender, WriterMouseEventArgs e)
		{
			if (EnableRaiseOnNsoRButtonUp && e.Button == MouseButtons.Right)
			{
				RaiseOnNsoRButtonUp(this, new _INsoControlEvents_NsoRButtonUpEvent(e.X, e.Y));
			}
		}

		private void myEditControl_KeyPress(object sender, KeyPressEventArgs e)
		{
			if (EnableRaiseOnNsoKeyPressedEvent)
			{
				RaiseOnNsoKeyPressedEvent(this, new _INsoControlEvents_NsoKeyPressedEventEvent(0, (sbyte)e.KeyChar, 0, 0, bCancel: false));
			}
			if (EnableRaiseOnNsoKeyPressedEvent2)
			{
				RaiseOnNsoKeyPressedEvent2(this, new _INsoControlEvents_NsoKeyPressedEvent2Event(0, (short)e.KeyChar, 0, 0, bCancel: false));
			}
		}

		private void myEditControl_EventMouseDownExt(object sender, WriterMouseEventArgs e)
		{
			if (e.Button == MouseButtons.Left && EnableRaiseOnNsoLButtonDown)
			{
				RaiseOnNsoLButtonDown(this, new _INsoControlEvents_NsoLButtonDownEvent(e.X, e.Y));
			}
		}

		private void myEditControl_AfterExecuteCommand(object sender, WriterCommandEventArgs e)
		{
			int num = 14;
			if (e.Name == "FileOpen" || e.Name == "FileOpenString" || e.Name == "FileOpenUrl")
			{
				if (EnableRaiseOnNsoFileOpenCompleted)
				{
					RaiseOnNsoFileOpenCompleted(this, new _INsoControlEvents_NsoFileOpenCompletedEvent(e.Document.FileName, null));
				}
			}
			else if (e.Name == "FileSave" || e.Name == "FileSaveAs")
			{
				if (EnableRaiseOnNsoFileSavedCompleted)
				{
					RaiseOnNsoFileSavedCompleted(this, new _INsoControlEvents_NsoFileSavedCompletedEvent(e.Document.FileName));
				}
			}
			else if (e.Name == "Table_InsertTable")
			{
				XTextTableElement xTextTableElement = e.Result as XTextTableElement;
				if (xTextTableElement != null)
				{
					_AllTables.Add(xTextTableElement);
				}
			}
		}

		private void myEditControl_BeforeExecuteCommand(object sender, WriterCommandEventArgs e)
		{
			int num = 11;
			if (e.Name == "Paste" || e.Name == "SpecifyPaste")
			{
				IDataObject sourceDataObjectForPaste = myEditControl.GetSourceDataObjectForPaste(prompt: true);
				if (sourceDataObjectForPaste == null)
				{
					e.Cancel = true;
					return;
				}
				if (!_Value_SetCanCopyFromActiveX && !WriterUtils.smethod_9(sourceDataObjectForPaste))
				{
					e.Cancel = true;
					return;
				}
				if (_Max_SetLimitNumOfPasteCharacters > 0 && sourceDataObjectForPaste != null)
				{
					string text = null;
					if (sourceDataObjectForPaste.GetDataPresent(DataFormats.Text))
					{
						text = Convert.ToString(sourceDataObjectForPaste.GetData(DataFormats.Text));
					}
					else if (sourceDataObjectForPaste.GetDataPresent(DataFormats.UnicodeText))
					{
						text = Convert.ToString(sourceDataObjectForPaste.GetData(DataFormats.UnicodeText));
					}
					bool flag = true;
					if (!string.IsNullOrEmpty(text) && _Max_SetLimitNumOfPasteCharacters > 0 && text.Length > _Max_SetLimitNumOfPasteCharacters)
					{
						flag = false;
					}
					if (!flag)
					{
						if (string.IsNullOrEmpty(_Msg_SetLimitNumOfPasteCharacters))
						{
							myEditControl.AppHost.UITools.ShowMessageBox(this, "超过允许复制到最大字数.");
						}
						else
						{
							myEditControl.AppHost.UITools.ShowMessageBox(this, _Msg_SetLimitNumOfPasteCharacters);
						}
						e.Cancel = true;
						return;
					}
				}
				if (!_SetSpecialPasteEx_InFormat || !_SetSpecialPasteEx_OutFormat)
				{
					bool flag2 = false;
					bool flag3 = WriterUtils.smethod_9(sourceDataObjectForPaste);
					if (!_SetSpecialPasteEx_InFormat && flag3)
					{
						flag2 = true;
					}
					if (!_SetSpecialPasteEx_OutFormat && !flag3)
					{
						flag2 = true;
					}
					if (flag2)
					{
						myEditControl.ExecuteCommand("PasteAsText", showUI: true, null);
						e.Cancel = true;
					}
				}
			}
			else if (e.Name == "FilePrint" || e.Name == "FilePrintCurrentPage" || e.Name == "FilePrintSelection" || e.Name == "FilePrintWithManualDuplex")
			{
				if (EnableRaiseOnNsoBeforeFilePrinted)
				{
					RaiseOnNsoBeforeFilePrinted(this, new _INsoControlEvents_NsoBeforeFilePrintedEvent(e.Document.FileName));
				}
				if (EnableRaiseOnNsoBeforeFilePrintedEx)
				{
					_INsoControlEvents_NsoBeforeFilePrintedExEvent iNsoControlEvents_NsoBeforeFilePrintedExEvent = new _INsoControlEvents_NsoBeforeFilePrintedExEvent(bCancel: false);
					RaiseOnNsoBeforeFilePrintedEx(this, iNsoControlEvents_NsoBeforeFilePrintedExEvent);
					if (iNsoControlEvents_NsoBeforeFilePrintedExEvent.bCancel)
					{
						e.Cancel = true;
					}
				}
			}
			else if (e.Name == "FileSave" || e.Name == "FileSaveAs")
			{
				if (EnableRaiseOnNsoBeforeFileSaved)
				{
					_INsoControlEvents_NsoBeforeFileSavedEvent iNsoControlEvents_NsoBeforeFileSavedEvent = new _INsoControlEvents_NsoBeforeFileSavedEvent(e.Document.FileName, bCancel: false);
					RaiseOnNsoBeforeFileSaved(this, iNsoControlEvents_NsoBeforeFileSavedEvent);
					if (iNsoControlEvents_NsoBeforeFileSavedEvent.bCancel)
					{
						e.Cancel = true;
					}
				}
			}
			else if (e.Name == "Table_InsertRowDown" || e.Name == "Table_InsertRowUp" || e.Name == "Table_DeleteRow" || e.Name == "Table_InsertColumnLeft" || e.Name == "Table_InsertColumnRight" || e.Name == "Table_DeleteColumn")
			{
				if (e.RaiseFromUI)
				{
					XTextTableElement xTextTableElement = (XTextTableElement)myEditControl.GetCurrentElement(typeof(XTextTableElement));
					if (xTextTableElement != null && _ListForSetTableStyleProtected.Contains(xTextTableElement))
					{
						e.Enabled = false;
						e.Cancel = true;
						AlertTableCellErrorMsgWhenProtected();
					}
				}
			}
			else
			{
				if (!(e.Name == "Copy") || e.Document.Selection.ContentElements.Count != 1)
				{
					return;
				}
				XTextImageElement xTextImageElement = e.Document.Selection.ContentElements[0] as XTextImageElement;
				if (xTextImageElement != null)
				{
					string attribute = xTextImageElement.GetAttribute("ImageElementIsCopy");
					if (!string.IsNullOrEmpty(attribute) && bool.Parse(attribute))
					{
						Clipboard.Clear();
						e.Cancel = true;
					}
				}
			}
		}

		                                                                    /// <summary>
		                                                                    ///       删除掉所有的事件
		                                                                    ///       </summary>
		[ComVisible(true)]
		public void RemoveAllListener()
		{
			BeginLogFunction("RemoveAllListener");
			RemoveGlobalDocumentListener();
			EndLogFunction(null);
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       RemoveKeyListener()
		                                                                    ///       功能描述：
		                                                                    ///       移除键盘监听器
		                                                                    ///       参数：
		                                                                    ///       返回值：
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. RemoveKeyListener()
		                                                                    ///       实现说明：
		                                                                    ///       无
		                                                                    ///       Date:10-10 Jy
		                                                                    ///       </summary>
		[ComVisible(true)]
		public void RemoveKeyListener()
		{
			BeginLogFunction("RemoveKeyListener", null);
			EnableRaiseOnNsoKeyPressedEvent = false;
			EnableRaiseOnNsoKeyPressedEvent2 = false;
			EndLogFunction(null);
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       RemoveMouseListener ()
		                                                                    ///       功能描述：
		                                                                    ///       移除鼠标监听器
		                                                                    ///       参数：
		                                                                    ///       无
		                                                                    ///       返回值：
		                                                                    ///       无
		                                                                    ///       Date:10-10 Jy
		                                                                    ///       </summary>
		[ComVisible(true)]
		public void RemoveMouseListener()
		{
			BeginLogFunction("RemoveMouseListener", null);
			EnableRaiseOnNsoImageClick = false;
			EnableRaiseOnNsoImageDBClick = false;
			EnableRaiseOnNsoNewControlClick = false;
			EnableRaiseOnNsoNewControlDBClick = false;
			EnableRaiseOnNsoOLEClick = false;
			EnableRaiseOnNsoRegionDBClick = false;
			EnableRaiseOnNsoSectionClick = false;
			EnableRaiseOnNsoSectionDBClick = false;
			EndLogFunction(null);
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       RemoveGlobalDocumentListener()
		                                                                    ///       功能描述：
		                                                                    ///       关闭全局监听器
		                                                                    ///       参数：
		                                                                    ///       返回值：
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. RemoveGlobalDocumentListener ()
		                                                                    ///       实现说明：
		                                                                    ///       无
		                                                                    ///       Date:10-10 Jy
		                                                                    ///       </summary>
		[ComVisible(true)]
		public void RemoveGlobalDocumentListener()
		{
			BeginLogFunction("RemoveGlobalDocumentListener", null);
			EnableRaiseOnNsoAuthorityStatus = false;
			EnableRaiseOnNsoBeforeFilePrinted = false;
			EnableRaiseOnNsoBeforeFilePrintedEx = false;
			EnableRaiseOnNsoBeforeFileSaved = false;
			EnableRaiseOnNsoDragAndDropCompleted = false;
			EnableRaiseOnNsoFileClosingEvent = false;
			EnableRaiseOnNsoFileModifyChanged = false;
			EnableRaiseOnNsoFileOpenCompleted = false;
			EnableRaiseOnNsoFileReOpenedWhenCrash = false;
			EnableRaiseOnNsoFileSavedCompleted = false;
			EnableRaiseOnNsoImageClick = false;
			EnableRaiseOnNsoImageDBClick = false;
			EnableRaiseOnNsoIntellectiveEvent = false;
			EnableRaiseOnNsoKeyPressedEvent = false;
			EnableRaiseOnNsoKeyPressedEvent2 = false;
			EnableRaiseOnNsoLButtonDown = false;
			EnableRaiseOnNsoNetDogStatus = false;
			EnableRaiseOnNsoNewControlBeforeDropDown = false;
			EnableRaiseOnNsoNewControlChanged = false;
			EnableRaiseOnNsoNewControlCheckedChanged = false;
			EnableRaiseOnNsoNewControlClick = false;
			EnableRaiseOnNsoNewControlCursorEnter = false;
			EnableRaiseOnNsoNewControlCursorLeft = false;
			EnableRaiseOnNsoNewControlDBClick = false;
			EnableRaiseOnNsoNewControlDropDown = false;
			EnableRaiseOnNsoNewControlGainFocus = false;
			EnableRaiseOnNsoNewControlInsertOrDelEvent = false;
			EnableRaiseOnNsoNewControlLostFocus = false;
			EnableRaiseOnNsoOLEClick = false;
			EnableRaiseOnNsoPreviewExitEvent = false;
			EnableRaiseOnNsoRadioButtonCheckChanged = false;
			EnableRaiseOnNsoRButtonUp = false;
			EnableRaiseOnNsoRegionDBClick = false;
			EnableRaiseOnNsoRegionGainFocus = false;
			EnableRaiseOnNsoRegionLostFocus = false;
			EnableRaiseOnNsoSectionChanged = false;
			EnableRaiseOnNsoSectionClick = false;
			EnableRaiseOnNsoSectionCursorEnter = false;
			EnableRaiseOnNsoSectionCursorLeft = false;
			EnableRaiseOnNsoSectionDBClick = false;
			EnableRaiseOnNsoSectionGainFocus = false;
			EnableRaiseOnNsoSectionInsertOrDelEvent = false;
			EnableRaiseOnNsoSectionLostFocus = false;
			EnableRaiseOnNsoSelectionChanged = false;
			EnableRaiseOnNsoTableAddNewRowWhenPressTabKey = false;
			EnableRaiseOnNsoToolbarAddinEvent = false;
			EnableRaiseOnNsoUserMenuItemEvent = false;
			EnableRaiseOnNsoUserToolbarEvent = false;
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public virtual void RemoveFileListener()
		{
			BeginLogFunction("RemoveFileListener", null);
			EnableRaiseOnNsoFileClosingEvent = false;
			EnableRaiseOnNsoFileModifyChanged = false;
			EnableRaiseOnNsoFileOpenCompleted = false;
			EnableRaiseOnNsoFileReOpenedWhenCrash = false;
			EnableRaiseOnNsoFileSavedCompleted = false;
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public void AddGlobalDocumentListener()
		{
			BeginLogFunction("AddGlobalDocumentListener", null);
			EnableRaiseOnNsoAuthorityStatus = true;
			EnableRaiseOnNsoBeforeFilePrinted = true;
			EnableRaiseOnNsoBeforeFilePrintedEx = true;
			EnableRaiseOnNsoBeforeFileSaved = true;
			EnableRaiseOnNsoDragAndDropCompleted = true;
			EnableRaiseOnNsoFileClosingEvent = true;
			EnableRaiseOnNsoFileModifyChanged = true;
			EnableRaiseOnNsoFileOpenCompleted = true;
			EnableRaiseOnNsoFileReOpenedWhenCrash = true;
			EnableRaiseOnNsoFileSavedCompleted = true;
			EnableRaiseOnNsoImageClick = true;
			EnableRaiseOnNsoImageDBClick = true;
			EnableRaiseOnNsoIntellectiveEvent = true;
			EnableRaiseOnNsoKeyPressedEvent = true;
			EnableRaiseOnNsoKeyPressedEvent2 = true;
			EnableRaiseOnNsoLButtonDown = true;
			EnableRaiseOnNsoNetDogStatus = true;
			EnableRaiseOnNsoNewControlBeforeDropDown = true;
			EnableRaiseOnNsoNewControlChanged = true;
			EnableRaiseOnNsoNewControlCheckedChanged = true;
			EnableRaiseOnNsoNewControlClick = true;
			EnableRaiseOnNsoNewControlCursorEnter = true;
			EnableRaiseOnNsoNewControlCursorLeft = true;
			EnableRaiseOnNsoNewControlDBClick = true;
			EnableRaiseOnNsoNewControlDropDown = true;
			EnableRaiseOnNsoNewControlGainFocus = true;
			EnableRaiseOnNsoNewControlInsertOrDelEvent = true;
			EnableRaiseOnNsoNewControlLostFocus = true;
			EnableRaiseOnNsoOLEClick = true;
			EnableRaiseOnNsoPreviewExitEvent = true;
			EnableRaiseOnNsoRadioButtonCheckChanged = true;
			EnableRaiseOnNsoRButtonUp = true;
			EnableRaiseOnNsoRegionDBClick = true;
			EnableRaiseOnNsoRegionGainFocus = true;
			EnableRaiseOnNsoRegionLostFocus = true;
			EnableRaiseOnNsoSectionChanged = true;
			EnableRaiseOnNsoSectionClick = true;
			EnableRaiseOnNsoSectionCursorEnter = true;
			EnableRaiseOnNsoSectionCursorLeft = true;
			EnableRaiseOnNsoSectionDBClick = true;
			EnableRaiseOnNsoSectionGainFocus = true;
			EnableRaiseOnNsoSectionInsertOrDelEvent = true;
			EnableRaiseOnNsoSectionLostFocus = true;
			EnableRaiseOnNsoSelectionChanged = true;
			EnableRaiseOnNsoTableAddNewRowWhenPressTabKey = true;
			EnableRaiseOnNsoToolbarAddinEvent = true;
			EnableRaiseOnNsoUserMenuItemEvent = true;
			EnableRaiseOnNsoUserToolbarEvent = true;
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public void AddFileListener()
		{
			BeginLogFunction("AddFileListener", null);
			EnableRaiseOnNsoBeforeFilePrinted = true;
			EnableRaiseOnNsoBeforeFilePrintedEx = true;
			EnableRaiseOnNsoBeforeFileSaved = true;
			EnableRaiseOnNsoFileClosingEvent = true;
			EnableRaiseOnNsoFileModifyChanged = true;
			EnableRaiseOnNsoFileOpenCompleted = true;
			EnableRaiseOnNsoFileReOpenedWhenCrash = true;
			EnableRaiseOnNsoFileSavedCompleted = true;
			EndLogFunction(null);
		}

		protected virtual void RaiseOnNsoAuthorityStatus(object sender, _INsoControlEvents_NsoAuthorityStatusEvent _INsoControlEvents_NsoAuthorityStatusEvent_0)
		{
		}

		protected virtual void RaiseOnNsoBeforeFilePrinted(object sender, _INsoControlEvents_NsoBeforeFilePrintedEvent _INsoControlEvents_NsoBeforeFilePrintedEvent_0)
		{
		}

		protected virtual void RaiseOnNsoBeforeFilePrintedEx(object sender, _INsoControlEvents_NsoBeforeFilePrintedExEvent _INsoControlEvents_NsoBeforeFilePrintedExEvent_0)
		{
		}

		protected virtual void RaiseOnNsoBeforeFileSaved(object sender, _INsoControlEvents_NsoBeforeFileSavedEvent _INsoControlEvents_NsoBeforeFileSavedEvent_0)
		{
		}

		protected virtual void RaiseOnNsoDragAndDropCompleted(object sender, _INsoControlEvents_NsoDragAndDropCompletedEvent _INsoControlEvents_NsoDragAndDropCompletedEvent_0)
		{
		}

		protected virtual void RaiseOnNsoFileClosingEvent()
		{
		}

		private void InnerRaiseOnNsoFileModifyChanged()
		{
			if (EnableRaiseOnNsoFileModifyChanged)
			{
				RaiseOnNsoFileModifyChanged(this, new _INsoControlEvents_NsoFileModifyChangedEvent(myEditControl.Modified));
			}
		}

		protected virtual void RaiseOnNsoFileModifyChanged(object sender, _INsoControlEvents_NsoFileModifyChangedEvent _INsoControlEvents_NsoFileModifyChangedEvent_0)
		{
		}

		protected virtual void RaiseOnNsoFileOpenCompleted(object sender, _INsoControlEvents_NsoFileOpenCompletedEvent _INsoControlEvents_NsoFileOpenCompletedEvent_0)
		{
		}

		protected virtual void RaiseOnNsoFileReOpenedWhenCrash(object sender, _INsoControlEvents_NsoFileReOpenedWhenCrashEvent _INsoControlEvents_NsoFileReOpenedWhenCrashEvent_0)
		{
		}

		protected virtual void RaiseOnNsoFileSavedCompleted(object sender, _INsoControlEvents_NsoFileSavedCompletedEvent _INsoControlEvents_NsoFileSavedCompletedEvent_0)
		{
		}

		protected virtual void RaiseOnNsoImageClick(object sender, _INsoControlEvents_NsoImageClickEvent _INsoControlEvents_NsoImageClickEvent_0)
		{
		}

		protected virtual void RaiseOnNsoImageDBClick(object sender, _INsoControlEvents_NsoImageDBClickEvent _INsoControlEvents_NsoImageDBClickEvent_0)
		{
		}

		protected virtual void RaiseOnNsoIntellectiveEvent(object sender, _INsoControlEvents_NsoIntellectiveEventEvent _INsoControlEvents_NsoIntellectiveEventEvent_0)
		{
		}

		protected virtual void RaiseOnNsoKeyPressedEvent(object sender, _INsoControlEvents_NsoKeyPressedEventEvent _INsoControlEvents_NsoKeyPressedEventEvent_0)
		{
		}

		protected virtual void RaiseOnNsoKeyPressedEvent2(object sender, _INsoControlEvents_NsoKeyPressedEvent2Event _INsoControlEvents_NsoKeyPressedEvent2Event_0)
		{
		}

		protected virtual void RaiseOnNsoLButtonDown(object sender, _INsoControlEvents_NsoLButtonDownEvent _INsoControlEvents_NsoLButtonDownEvent_0)
		{
		}

		protected virtual void RaiseOnNsoNetDogStatus(object sender, _INsoControlEvents_NsoNetDogStatusEvent _INsoControlEvents_NsoNetDogStatusEvent_0)
		{
		}

		protected virtual void RaiseOnNsoNewControlBeforeDropDown(object sender, _INsoControlEvents_NsoNewControlBeforeDropDownEvent _INsoControlEvents_NsoNewControlBeforeDropDownEvent_0)
		{
		}

		protected virtual void RaiseOnNsoNewControlChanged(object sender, _INsoControlEvents_NsoNewControlChangedEvent _INsoControlEvents_NsoNewControlChangedEvent_0)
		{
		}

		protected virtual void RaiseOnNsoNewControlCheckedChanged(object sender, _INsoControlEvents_NsoNewControlCheckedChangedEvent _INsoControlEvents_NsoNewControlCheckedChangedEvent_0)
		{
		}

		protected virtual void RaiseOnNsoNewControlClick(object sender, _INsoControlEvents_NsoNewControlClickEvent _INsoControlEvents_NsoNewControlClickEvent_0)
		{
		}

		protected virtual void RaiseOnNsoNewControlCursorEnter(object sender, _INsoControlEvents_NsoNewControlCursorEnterEvent _INsoControlEvents_NsoNewControlCursorEnterEvent_0)
		{
		}

		protected virtual void RaiseOnNsoNewControlCursorLeft(object sender, _INsoControlEvents_NsoNewControlCursorLeftEvent _INsoControlEvents_NsoNewControlCursorLeftEvent_0)
		{
		}

		protected virtual void RaiseOnNsoNewControlDBClick(object sender, _INsoControlEvents_NsoNewControlDBClickEvent _INsoControlEvents_NsoNewControlDBClickEvent_0)
		{
		}

		protected virtual void RaiseOnNsoNewControlDropDown(object sender, _INsoControlEvents_NsoNewControlDropDownEvent _INsoControlEvents_NsoNewControlDropDownEvent_0)
		{
		}

		protected virtual void RaiseOnNsoNewControlGainFocus(object sender, _INsoControlEvents_NsoNewControlGainFocusEvent _INsoControlEvents_NsoNewControlGainFocusEvent_0)
		{
		}

		protected virtual void RaiseOnNsoNewControlInsertOrDelEvent(object sender, _INsoControlEvents_NsoNewControlInsertOrDelEventEvent _INsoControlEvents_NsoNewControlInsertOrDelEventEvent_0)
		{
		}

		protected virtual void RaiseOnNsoNewControlLostFocus(object sender, _INsoControlEvents_NsoNewControlLostFocusEvent _INsoControlEvents_NsoNewControlLostFocusEvent_0)
		{
		}

		protected virtual void RaiseOnNsoOLEClick(object sender, _INsoControlEvents_NsoOLEClickEvent _INsoControlEvents_NsoOLEClickEvent_0)
		{
		}

		protected virtual void RaiseOnNsoPreviewExitEvent(object sender, EventArgs e)
		{
		}

		protected virtual void RaiseOnNsoRadioButtonCheckChanged(object sender, _INsoControlEvents_NsoRadioButtonCheckChangedEvent _INsoControlEvents_NsoRadioButtonCheckChangedEvent_0)
		{
		}

		protected virtual void RaiseOnNsoRButtonUp(object sender, _INsoControlEvents_NsoRButtonUpEvent _INsoControlEvents_NsoRButtonUpEvent_0)
		{
		}

		protected virtual void RaiseOnNsoRegionDBClick(object sender, _INsoControlEvents_NsoRegionDBClickEvent _INsoControlEvents_NsoRegionDBClickEvent_0)
		{
		}

		protected virtual void RaiseOnNsoRegionGainFocus(object sender, _INsoControlEvents_NsoRegionGainFocusEvent _INsoControlEvents_NsoRegionGainFocusEvent_0)
		{
		}

		protected virtual void RaiseOnNsoRegionLostFocus(object sender, _INsoControlEvents_NsoRegionLostFocusEvent _INsoControlEvents_NsoRegionLostFocusEvent_0)
		{
		}

		protected virtual void RaiseOnNsoRegionChanged(object sender, _INsoControlEvents_NsoRegionChangedEvent _INsoControlEvents_NsoRegionChangedEvent_0)
		{
		}

		protected virtual void RaiseOnNsoSectionChanged(object sender, _INsoControlEvents_NsoSectionChangedEvent _INsoControlEvents_NsoSectionChangedEvent_0)
		{
		}

		protected virtual void RaiseOnNsoSectionClick(object sender, _INsoControlEvents_NsoSectionClickEvent _INsoControlEvents_NsoSectionClickEvent_0)
		{
		}

		protected virtual void RaiseOnNsoSectionCursorEnter(object sender, _INsoControlEvents_NsoSectionCursorEnterEvent _INsoControlEvents_NsoSectionCursorEnterEvent_0)
		{
		}

		protected virtual void RaiseOnNsoSectionCursorLeft(object sender, _INsoControlEvents_NsoSectionCursorLeftEvent _INsoControlEvents_NsoSectionCursorLeftEvent_0)
		{
		}

		protected virtual void RaiseOnNsoSectionDBClick(object sender, _INsoControlEvents_NsoSectionDBClickEvent _INsoControlEvents_NsoSectionDBClickEvent_0)
		{
		}

		protected virtual void RaiseOnNsoSectionGainFocus(object sender, _INsoControlEvents_NsoSectionGainFocusEvent _INsoControlEvents_NsoSectionGainFocusEvent_0)
		{
		}

		protected virtual void RaiseOnNsoSectionInsertOrDelEvent(object sender, _INsoControlEvents_NsoSectionInsertOrDelEventEvent _INsoControlEvents_NsoSectionInsertOrDelEventEvent_0)
		{
		}

		protected virtual void RaiseOnNsoSectionLostFocus(object sender, _INsoControlEvents_NsoSectionLostFocusEvent _INsoControlEvents_NsoSectionLostFocusEvent_0)
		{
		}

		protected virtual void RaiseOnNsoSelectionChanged()
		{
		}

		protected virtual void RaiseOnNsoTableAddNewRowWhenPressTabKey(object sender, _INsoControlEvents_NsoTableAddNewRowWhenPressTabKeyEvent _INsoControlEvents_NsoTableAddNewRowWhenPressTabKeyEvent_0)
		{
		}

		protected virtual void RaiseOnNsoToolbarAddinEvent(object sender, _INsoControlEvents_NsoToolbarAddinEventEvent _INsoControlEvents_NsoToolbarAddinEventEvent_0)
		{
		}

		protected virtual void RaiseOnNsoUserMenuItemEvent(object sender, _INsoControlEvents_NsoUserMenuItemEventEvent _INsoControlEvents_NsoUserMenuItemEventEvent_0)
		{
		}

		protected virtual void RaiseOnNsoUserToolbarEvent(object sender, _INsoControlEvents_NsoUserToolbarEventEvent _INsoControlEvents_NsoUserToolbarEventEvent_0)
		{
		}

		                                                                    /// <summary>
		                                                                    ///       设置审阅视图模式
		                                                                    ///       </summary>
		                                                                    /// <param name="Flag">模式</param>
		[ComVisible(true)]
		public void ShowRecension(WdRecesionState Flag)
		{
			int num = 10;
			BeginLogFunction("ShowRecension", "Flag=" + Flag);
			switch (Flag)
			{
			case WdRecesionState.wdStart:
				MyWriterControl.ExecuteCommand("ComplexViewMode", showUI: false, null);
				if (tabFunction.TabPages.Contains(tpTrack))
				{
					tabFunction.SelectedTab = tpTrack;
				}
				RefreshTrackList();
				break;
			case WdRecesionState.wdFinal:
				lstTrack.Items.Clear();
				MyWriterControl.ExecuteCommand("CleanViewMode", showUI: false, null);
				break;
			}
			UpdatePanel1Collapsed();
			EndLogFunction(null);
		}

		private void RefreshTrackList()
		{
			if (myEditControl.DocumentOptions.SecurityOptions.ShowLogicDeletedContent || myEditControl.DocumentOptions.SecurityOptions.ShowPermissionMark)
			{
				lstTrack.Refresh();
				if (_TrackListController == null)
				{
					_TrackListController = new TrackListBoxControler(lstTrack, myEditControl);
					_TrackListController.Start();
				}
				_TrackListController.Refresh();
			}
			UpdatePanel1Collapsed();
		}

		private void UpdatePanel1Collapsed()
		{
			bool flag = lstTrack.Items.Count > 0 || tvwNavigate.Nodes.Count > 0;
			mySplitContainer.Panel1Collapsed = !flag;
			if (flag)
			{
				if (lstTrack.Items.Count == 0)
				{
					if (tabFunction.TabPages.Contains(tpTrack))
					{
						tabFunction.TabPages.Remove(tpTrack);
					}
				}
				else if (!tabFunction.TabPages.Contains(tpTrack))
				{
					tabFunction.TabPages.Add(tpTrack);
				}
				if (tvwNavigate.Nodes.Count == 0)
				{
					if (tabFunction.TabPages.Contains(tpNavigate))
					{
						tabFunction.TabPages.Remove(tpNavigate);
					}
				}
				else if (!tabFunction.TabPages.Contains(tpNavigate))
				{
					tabFunction.TabPages.Add(tpNavigate);
				}
			}
			if (tabFunction.TabPages.Count == 2 && tabFunction.TabPages.IndexOf(tpTrack) == 1)
			{
				tabFunction.TabPages.Remove(tpTrack);
				tabFunction.TabPages.Add(tpTrack);
			}
		}

		                                                                    /// <summary>
		                                                                    ///       设置审阅模式
		                                                                    ///       </summary>
		                                                                    /// <param name="Flag">是否为审阅模式</param>
		[ComVisible(true)]
		public void SwitchRecension(bool Flag)
		{
			BeginLogFunction("SwitchRecension", "Flag=" + Flag);
			MyWriterControl.DocumentOptions.SecurityOptions.EnablePermission = Flag;
			MyWriterControl.DocumentOptions.SecurityOptions.EnableLogicDelete = Flag;
			EndLogFunction(null);
		}

		[ComVisible(false)]
		public void SwitchRecension()
		{
			BeginLogFunction("SwitchRecension", null);
			SwitchRecension(!MyWriterControl.DocumentOptions.SecurityOptions.EnablePermission);
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public bool SetRecensionInfo(string strUserCode, string strUserName, string strMemo, int nMarkStyle, string strMarkColor)
		{
			int num = 17;
			BeginLogFunction("SetRecensionInfo", "strUserCode=" + strUserCode + "  strUserName=" + strUserName + "  strMemo=strMemo" + strMemo + "  nMarkStyle=" + nMarkStyle + "  strMarkColor=" + strMarkColor);
			UserLoginInfo userLoginInfo = new UserLoginInfo();
			userLoginInfo.ID = strUserCode;
			userLoginInfo.Name = strUserName;
			userLoginInfo.Description = strMemo;
			switch (nMarkStyle)
			{
			case 2:
				userLoginInfo.PermissionLevel = 1;
				myEditControl.DocumentOptions.SecurityOptions.TrackVisibleLevel1.DeleteLineColorString = strMarkColor;
				myEditControl.DocumentOptions.SecurityOptions.TrackVisibleLevel1.UnderLineColorString = strMarkColor;
				break;
			case 1:
				userLoginInfo.PermissionLevel = 0;
				myEditControl.DocumentOptions.SecurityOptions.TrackVisibleLevel0.DeleteLineColorString = strMarkColor;
				myEditControl.DocumentOptions.SecurityOptions.TrackVisibleLevel0.UnderLineColorString = strMarkColor;
				break;
			case 3:
				userLoginInfo.PermissionLevel = 2;
				myEditControl.DocumentOptions.SecurityOptions.TrackVisibleLevel2.DeleteLineColorString = strMarkColor;
				myEditControl.DocumentOptions.SecurityOptions.TrackVisibleLevel2.UnderLineColorString = strMarkColor;
				break;
			}
			myEditControl.DocumentOptions.SecurityOptions.AutoEnablePermissionWhenUserLogin = false;
			myEditControl.UserLoginByUserLoginInfo(userLoginInfo, updateUI: true);
			EndLogFunction("true");
			return true;
		}

		[ComVisible(true)]
		public string GetRecensionInfoByRequiment(string sAuthors, string sIDs, int sChangeTypes, DateTime sTimeStart, DateTime sTimeEnd)
		{
			int num = 17;
			BeginLogFunction("GetRecensionInfoByRequiment", string.Concat("sAuthors=", sAuthors, "  sIDs=", sIDs, "  sChangeTypes=", sChangeTypes, "  sTimeStart=", sTimeStart, "  sTimeEnd=", sTimeEnd));
			new IDList(sAuthors, ';');
			new IDList(sIDs, ';');
			string text = sChangeTypes.ToString("00000");
			StringWriter stringWriter = new StringWriter();
			XmlTextWriter xmlTextWriter = new XmlTextWriter(stringWriter);
			xmlTextWriter.Formatting = Formatting.Indented;
			xmlTextWriter.Indentation = 1;
			xmlTextWriter.IndentChar = ' ';
			xmlTextWriter.WriteStartDocument();
			xmlTextWriter.WriteStartElement("Root");
			UserTrackInfoList userTrackInfoList = new UserTrackInfoList();
			userTrackInfoList.Document = Document;
			Document.Options.BehaviorOptions.FillCommentToUserTrackList = true;
			userTrackInfoList.Refresh();
			IDList iDList = new IDList(sAuthors, ';');
			foreach (UserTrackInfo item in userTrackInfoList)
			{
				if (iDList.Count == 0 || iDList.Contains(item.UserName))
				{
					if (item.InfoType == UserTrackType.Comment && text[2] == '0')
					{
						continue;
					}
					if (item.InfoType != UserTrackType.Delete)
					{
					}
					if (text[0] != '1')
					{
					}
					if (text[1] != '1')
					{
					}
					if (text[3] == '1')
					{
					}
				}
				xmlTextWriter.WriteStartElement("Redline");
				xmlTextWriter.WriteAttributeString("author", item.UserName);
				xmlTextWriter.WriteAttributeString("workid", item.UserID);
				if (item.InfoType == UserTrackType.Create || item.InfoType == UserTrackType.Delete)
				{
					xmlTextWriter.WriteAttributeString("changetype", "插入的内容");
				}
				else if (item.InfoType == UserTrackType.Comment)
				{
					xmlTextWriter.WriteAttributeString("changetype", "批注");
				}
				xmlTextWriter.WriteAttributeString("remark", "无备注");
				xmlTextWriter.WriteAttributeString("time", item.SaveTime.ToString("yyyy-MM-dd HH:mm"));
				if (item.InfoType == UserTrackType.Comment)
				{
					xmlTextWriter.WriteAttributeString("content", item.CommentText);
				}
				else
				{
					xmlTextWriter.WriteAttributeString("content", item.Text);
				}
				xmlTextWriter.WriteAttributeString("linestyle", "1");
				Color color = Color.Black;
				TrackVisibleConfig trackVisibleConfig = WriterControl.DocumentOptions.SecurityOptions.GetTrackVisibleConfig(item.PermissionLevel);
				if (trackVisibleConfig != null && trackVisibleConfig.Enabled)
				{
					color = ((item.InfoType == UserTrackType.Delete) ? trackVisibleConfig.DeleteLineColor : ((item.InfoType != 0) ? trackVisibleConfig.UnderLineColor : trackVisibleConfig.UnderLineColor));
				}
				xmlTextWriter.WriteAttributeString("color", (color.R * 65536 + color.G * 256 + color.B).ToString());
				xmlTextWriter.WriteEndElement();
			}
			xmlTextWriter.WriteEndElement();
			xmlTextWriter.WriteEndDocument();
			xmlTextWriter.Close();
			EndLogFunction(stringWriter.ToString());
			return stringWriter.ToString();
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///        BOOL GetRecensionCount（）
		                                                                    ///       功能描述：
		                                                                    ///       获取文档修订信息的数目
		                                                                    ///       参数：
		                                                                    ///       返回值：
		                                                                    ///       LONG
		                                                                    ///       -1：失败
		                                                                    ///       0： 该文档没有被修订过
		                                                                    ///       〉0： 表示该文档被多人修订过
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. GetRecensionCount ()
		                                                                    ///       实现说明：
		                                                                    ///       一份文档可能被多人多次修订过，返回值就是该数目
		                                                                    ///       Date:10-8 Jy
		                                                                    ///       </summary>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public int GetRecensionCount()
		{
			BeginLogFunction("GetRecensionCount", null);
			EndLogFunction(myEditControl.Document.UserHistories.Count);
			return myEditControl.Document.UserHistories.Count;
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       BOOL AcceptRecension（）
		                                                                    ///       功能描述：
		                                                                    ///       接受全部修订
		                                                                    ///       参数：
		                                                                    ///       无
		                                                                    ///       返回值：
		                                                                    ///       无
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. AcceptRecension ()
		                                                                    ///       实现说明：
		                                                                    ///       Date:10-8 Jy
		                                                                    ///       </summary>
		[ComVisible(true)]
		public void AcceptRecension()
		{
			BeginLogFunction("AcceptRecension", null);
			myEditControl.ExecuteCommand("CommitUserTrace", showUI: true, null);
			EndLogFunction(null);
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       BOOL RejectRecension（）
		                                                                    ///       功能描述：
		                                                                    ///       拒绝全部修订
		                                                                    ///       参数：
		                                                                    ///       无
		                                                                    ///       返回值：
		                                                                    ///       无
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. RejectRecension ()
		                                                                    ///       实现说明：
		                                                                    ///       Date:10-8 Jy
		                                                                    ///       </summary>
		[ComVisible(true)]
		public void RejectRecension()
		{
			BeginLogFunction("RejectRecension", null);
			myEditControl.ExecuteCommand("RejectUserTrace", showUI: true, null);
			EndLogFunction(null);
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       BOOL GetTrackRevisions（）
		                                                                    ///       功能描述：
		                                                                    ///       获取开启关闭修订状态
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值				
		                                                                    ///       返回值：
		                                                                    ///       False：关闭
		                                                                    ///       True：开启
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. GetTrackRevisions ()
		                                                                    ///       实现说明：
		                                                                    ///       无
		                                                                    ///       Date:10-8 Jy
		                                                                    ///       </summary>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool GetTrackRevisions()
		{
			BeginLogFunction("GetTrackRevisions", null);
			EndLogFunction(myEditControl.Document.Options.SecurityOptions.EnablePermission);
			return myEditControl.Document.Options.SecurityOptions.EnablePermission;
		}

		[ComVisible(true)]
		public virtual bool FilterRecensionInfo(string sAuthors, string sIDs, int lChangeType, DateTime timeStart, DateTime timeEnd)
		{
			AlertNotSupportedMember("FilterRecensionInfo");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual int GetRecensionState()
		{
			AlertNotSupportedMember("GetRecensionState");
			throw new NotSupportedException();
		}

		                                                                    /// <summary>
		                                                                    ///       插入WinForm.NET控件
		                                                                    ///       </summary>
		                                                                    /// <param name="name">元素名称</param>
		                                                                    /// <param name="controlType">控件类型，必须从System.Windows.Forms.Control派生的，而且具有无参数的构造函数.</param>
		                                                                    /// <param name="pixelWidth">控件的像素宽度</param>
		                                                                    /// <param name="pixelHeight">控件的像素高度</param>
		                                                                    /// <returns>操作是否成功</returns>
		public bool InsertWinFormControl(string name, Type controlType, int pixelWidth, int pixelHeight)
		{
			int num = 1;
			if (controlType == null)
			{
				throw new ArgumentNullException("controlType");
			}
			if (!typeof(Control).IsAssignableFrom(controlType))
			{
				throw new ArgumentException(controlType.FullName + " 不是从 System.Windows.Forms.Control 派生的。");
			}
			if (controlType.GetConstructor(new Type[0]) == null)
			{
				throw new ArgumentException(controlType.FullName + "没有空参数的构造函数.");
			}
			BeginLogFunction("InsertWinFormControl", "name=" + name + " controlType=" + controlType.FullName);
			XTextControlHostElement xTextControlHostElement = new XTextControlHostElement();
			xTextControlHostElement.TypeFullName = ControlHelper.GetControlFullTypeName(controlType);
			xTextControlHostElement.ControlType = HostedControlType.Control;
			xTextControlHostElement.Width = Document.PixelToDocumentUnit(pixelWidth);
			xTextControlHostElement.Height = Document.PixelToDocumentUnit(pixelHeight);
			xTextControlHostElement.ID = name;
			xTextControlHostElement.DelayLoadControl = true;
			object obj = MyWriterControl.ExecuteCommand("InsertControlHost", showUI: false, xTextControlHostElement);
			bool flag = obj == xTextControlHostElement;
			EndLogFunction(flag);
			return flag;
		}

		[ComVisible(true)]
		public virtual bool SetRadioButtonCodeAndValue(string sName, string sCode, string sValue)
		{
			int num = 10;
			BeginLogFunction("SetRadioButtonCodeAndValue", "sName=" + sName + "  sCode=" + sCode + "  sValue=" + sValue);
			XTextElement elementById = GetElementById(sName);
			if (elementById is XTextCheckBoxElementBase)
			{
				XTextCheckBoxElementBase xTextCheckBoxElementBase = elementById as XTextCheckBoxElementBase;
				xTextCheckBoxElementBase.Caption = sCode;
				xTextCheckBoxElementBase.Value = sValue;
				xTextCheckBoxElementBase.EditorRefreshView();
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool SetRadioButtonFormat(string strName, int nBeginCharCount, int nEndCharCount, int nItemCountPerLine, int nTabStopAlignment)
		{
			BeginLogFunction("SetRadioButtonFormat", "strName=" + strName + "  nBeginCharCount=" + nBeginCharCount + "  nEndCharCount=" + nEndCharCount + "  nItemCountPerLine=" + nItemCountPerLine + "  nTabStopAlignment=" + nTabStopAlignment);
			AlertNotSupportedMember("SetRadioButtonFormat");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool SetRadioButtonItemCheckPos(string strName, string strPos)
		{
			BeginLogFunction("SetRadioButtonItemCheckPos", "strName=" + strName + "  strPos=" + strPos);
			AlertNotSupportedMember("SetRadioButtonItemCheckPos");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual string[] GetMultiCheckboxCodeWithArray(string strName)
		{
			BeginLogFunction("GetMultiCheckboxCodeWithArray", "strName=" + strName);
			List<string> list = new List<string>();
			XTextInputFieldElement xTextInputFieldElement = GetElementById(strName) as XTextInputFieldElement;
			if (xTextInputFieldElement != null && GetNewControlType(xTextInputFieldElement) == NsoNewControlType.MultiCheckbox)
			{
				foreach (XTextElement element in xTextInputFieldElement.Elements)
				{
					if (element is XTextCheckBoxElementBase)
					{
						list.Add(((XTextCheckBoxElementBase)element).Caption);
					}
				}
			}
			EndLogFunction(list.ToArray());
			return list.ToArray();
		}

		[ComVisible(true)]
		public virtual string[] GetMultiCheckboxValueWithArray(string strName)
		{
			BeginLogFunction("GetMultiCheckboxValueWithArray", "strName=" + strName);
			List<string> list = new List<string>();
			XTextInputFieldElement xTextInputFieldElement = GetElementById(strName) as XTextInputFieldElement;
			if (xTextInputFieldElement != null && GetNewControlType(xTextInputFieldElement) == NsoNewControlType.MultiCheckbox)
			{
				foreach (XTextElement element in xTextInputFieldElement.Elements)
				{
					if (element is XTextCheckBoxElementBase)
					{
						list.Add(((XTextCheckBoxElementBase)element).CheckedValue);
					}
				}
			}
			EndLogFunction(list.ToArray());
			return list.ToArray();
		}

		                                                                    /// <summary>
		                                                                    ///       获取指定名称MultiCheckbox当前选中项的Value字符串
		                                                                    ///       </summary>
		                                                                    /// <param name="strName">
		                                                                    /// </param>
		                                                                    /// <returns>指定名称MultiCheckbox当前选中项的Value字符串</returns>
		                                                                    /// <remarks>
		                                                                    ///       如果该多选按钮有多项选中，则返回以英文逗号隔开的字符串，如“value1,value2,value3,”，如果只选中一项，返回如“value1,”
		                                                                    ///       </remarks>
		[ComVisible(true)]
		public virtual string GetMultiCheckboxSelectItemValue(string strName)
		{
			int num = 18;
			BeginLogFunction("GetMultiCheckboxSelectItemValue", "strName=" + strName);
			XTextInputFieldElement xTextInputFieldElement = GetElementById(strName) as XTextInputFieldElement;
			StringBuilder stringBuilder = new StringBuilder();
			if (xTextInputFieldElement != null && GetNewControlType(xTextInputFieldElement) == NsoNewControlType.MultiCheckbox)
			{
				foreach (XTextElement element in xTextInputFieldElement.Elements)
				{
					if (element is XTextCheckBoxElement)
					{
						XTextCheckBoxElement xTextCheckBoxElement = (XTextCheckBoxElement)element;
						if (xTextCheckBoxElement.Checked)
						{
							stringBuilder.Append(xTextCheckBoxElement.CheckedValue);
							stringBuilder.Append(",");
						}
					}
				}
			}
			string result = stringBuilder.ToString();
			EndLogFunction(result);
			return result;
		}

		                                                                    /// <summary>
		                                                                    ///       获取指定名称MultiCheckbox当前选中项的Code字符串
		                                                                    ///       </summary>
		                                                                    /// <param name="strName">
		                                                                    /// </param>
		                                                                    /// <returns>指定名称MultiCheckbox当前选中项的Code字符串</returns>
		                                                                    /// <remarks>
		                                                                    ///       如果该多选按钮有多项选中，则返回以英文逗号隔开的字符串，如“code1,code2,code3,”，如果只选中一项，返回如“code,”
		                                                                    ///       </remarks>
		[ComVisible(true)]
		public virtual string GetMultiCheckboxSelectItemCode(string strName)
		{
			int num = 7;
			BeginLogFunction("GetMultiCheckboxSelectItemCode", "strName=" + strName);
			XTextInputFieldElement xTextInputFieldElement = GetElementById(strName) as XTextInputFieldElement;
			StringBuilder stringBuilder = new StringBuilder();
			if (xTextInputFieldElement != null && GetNewControlType(xTextInputFieldElement) == NsoNewControlType.MultiCheckbox)
			{
				foreach (XTextElement element in xTextInputFieldElement.Elements)
				{
					if (element is XTextCheckBoxElement)
					{
						XTextCheckBoxElement xTextCheckBoxElement = (XTextCheckBoxElement)element;
						if (xTextCheckBoxElement.Checked)
						{
							stringBuilder.Append(xTextCheckBoxElement.Caption);
							stringBuilder.Append(",");
						}
					}
				}
			}
			string result = stringBuilder.ToString();
			EndLogFunction(result);
			return result;
		}

		private ListItemCollection GetListItems(XTextInputFieldElement field, bool autoCreate)
		{
			if (field == null)
			{
				return null;
			}
			if (field.FieldSettings == null)
			{
				if (!autoCreate)
				{
					return null;
				}
				field.FieldSettings = new InputFieldSettings();
			}
			if (field.FieldSettings.ListSource == null)
			{
				if (!autoCreate)
				{
					return null;
				}
				field.FieldSettings.ListSource = new ListSourceInfo();
			}
			if (field.FieldSettings.ListSource.Items == null)
			{
				if (!autoCreate)
				{
					return null;
				}
				field.FieldSettings.ListSource.Items = new ListItemCollection();
			}
			return field.FieldSettings.ListSource.Items;
		}

		[ComVisible(true)]
		public virtual string GetMultiBoxMutexString(string strName, int iType)
		{
			int num = 6;
			BeginLogFunction("GetMultiBoxMutexString", "strName=" + strName + "  iType=" + iType);
			XTextInputFieldElement xTextInputFieldElement = GetElementById(strName) as XTextInputFieldElement;
			if (xTextInputFieldElement != null)
			{
				if (xTextInputFieldElement.FieldSettings == null)
				{
					EndLogFunction("");
					return "";
				}
				StringBuilder stringBuilder = new StringBuilder();
				string text = null;
				foreach (ListItem item in xTextInputFieldElement.FieldSettings.ListSource.Items)
				{
					if (text == null)
					{
						text = item.Group;
						stringBuilder.Append(item.Text);
					}
					else if (text == item.Group)
					{
						stringBuilder.Append("#");
						stringBuilder.Append(item.Text);
					}
					else
					{
						stringBuilder.Append("|");
						text = item.Group;
						stringBuilder.Append(item.Text);
					}
				}
				EndLogFunction(stringBuilder.ToString());
				return stringBuilder.ToString();
			}
			EndLogFunction("");
			return "";
		}

		                                                                    /// <summary>
		                                                                    ///       获得当前控件的名称
		                                                                    ///       </summary>
		                                                                    /// <returns>名称</returns>
		[ComVisible(true)]
		public string GetCurrentControlName()
		{
			BeginLogFunction("GetCurrentControlName", null);
			EndLogFunction(GetCurrentNewControlName());
			return GetCurrentNewControlName();
		}

		                                                                    /// <summary>
		                                                                    ///       获得当前控件的名称
		                                                                    ///       </summary>
		                                                                    /// <returns>名称</returns>
		[ComVisible(true)]
		public string GetCurrentNewControlName()
		{
			BeginLogFunction("GetCurrentNewControlName", null);
			XTextElement currentNewControl = GetCurrentNewControl();
			if (currentNewControl == null)
			{
				EndLogFunction(null);
				return "";
			}
			string iD = currentNewControl.ID;
			if (string.IsNullOrEmpty(iD))
			{
				EndLogFunction(null);
				return "";
			}
			EndLogFunction(currentNewControl.ID);
			return currentNewControl.ID;
		}

		private XTextElement GetCurrentNewControl()
		{
			if (HasFileOpened() == "-1")
			{
				return null;
			}
			if (MyWriterControl.Selection.Length == 0)
			{
				XTextElement xTextElement = MyWriterControl.CurrentElement;
				while (xTextElement != null)
				{
					if (!IsNewControl(xTextElement))
					{
						xTextElement = xTextElement.Parent;
						continue;
					}
					return xTextElement;
				}
			}
			else
			{
				foreach (XTextElement contentElement in MyWriterControl.Selection.ContentElements)
				{
					for (XTextElement xTextElement2 = contentElement; xTextElement2 != null; xTextElement2 = xTextElement2.Parent)
					{
						if (xTextElement2 is XTextCheckBoxElementBase || xTextElement2 is XTextInputFieldElementBase)
						{
							if (!IsNewControl(xTextElement2))
							{
								break;
							}
							return xTextElement2;
						}
					}
				}
			}
			return null;
		}

		                                                                    /// <summary>
		                                                                    ///       在当前位置插入新控件
		                                                                    ///       </summary>
		                                                                    /// <param name="name">控件名称</param>
		                                                                    /// <param name="text">控件文本</param>
		                                                                    /// <param name="ctrlType">控件类型</param>
		                                                                    /// <returns>新控件的名称</returns>
		[ComVisible(true)]
		public string InsertNewControlAtCurrentCursor(string name, string text, int ctrlType)
		{
			int num = 17;
			BeginLogFunction("InsertNewControlAtCurrentCursor", "name=" + name + " text=" + text + " ctrlType=" + ctrlType);
			XTextElement xTextElement = myEditControl.CurrentElement;
			while (xTextElement != null)
			{
				if (!IsNewControl(xTextElement))
				{
					if (IsNsoSection(xTextElement))
					{
						break;
					}
					xTextElement = xTextElement.Parent;
					continue;
				}
				return "";
			}
			string result = null;
			if (string.IsNullOrEmpty(name))
			{
				name = DateTime.Now.ToString("yyyyMMddHHmmss");
			}
			XTextElement xTextElement2 = CreateNewControl(name, text, (NsoNewControlType)ctrlType);
			if (xTextElement2 != null)
			{
				if (string.IsNullOrEmpty(name))
				{
					Document.AllocElementID("newctl", xTextElement2);
					name = xTextElement2.ID;
				}
				SetDefaultAttribute(xTextElement2);
				if (xTextElement2 is XTextInputFieldElement)
				{
					myEditControl.ExecuteCommand("InsertInputField", showUI: false, xTextElement2);
					result = xTextElement2.ID;
				}
				else if (xTextElement2 is XTextCheckBoxElement)
				{
					myEditControl.ExecuteCommand("InsertCheckBox", showUI: false, xTextElement2);
					result = xTextElement2.ID;
				}
				else if (xTextElement2 is XTextRadioBoxElement)
				{
					myEditControl.ExecuteCommand("InsertRadioBox", showUI: false, xTextElement2);
					result = xTextElement2.ID;
				}
			}
			if (xTextElement2 is XTextInputFieldElement)
			{
				XTextInputFieldElement xTextInputFieldElement = (XTextInputFieldElement)xTextElement2;
				int num2 = myEditControl.Document.Content.IndexOf(xTextInputFieldElement.EndElement);
				if (num2 >= 0)
				{
					myEditControl.MoveToPosition(num2 + 1);
				}
			}
			else
			{
				int num2 = myEditControl.Document.Content.IndexOf(xTextElement2);
				if (num2 >= 0)
				{
					myEditControl.MoveToPosition(num2 + 1);
				}
			}
			EndLogFunction(result);
			return result;
		}

		private NsoNewControlType GetNewControlType(XTextElement element)
		{
			int num = 6;
			switch (element.GetAttribute("NsoControlTypeName"))
			{
			case "CheckBox":
				return NsoNewControlType.Checkbox;
			case "Combox":
				return NsoNewControlType.Combox;
			case "DateTimeBox":
				return NsoNewControlType.DateTimeBox;
			case "ListBox":
				return NsoNewControlType.ListBox;
			case "MultiCheckbox":
				return NsoNewControlType.MultiCheckbox;
			case "MultiComBox":
				return NsoNewControlType.MultiCombox;
			case "MultiListBox":
				return NsoNewControlType.MultiListBox;
			case "NumberBox":
				return NsoNewControlType.NumberBox;
			case "RadioButton":
				return NsoNewControlType.RadioButton;
			case "TextBox":
				return NsoNewControlType.TextBox;
			default:
				return NsoNewControlType.TextBox;
			}
		}

		internal static XTextElement CreateNewControl(string name, string text, NsoNewControlType ctrlType)
		{
			int num = 11;
			XTextElement xTextElement = null;
			switch (ctrlType)
			{
			default:
				return null;
			case NsoNewControlType.Combox:
			{
				XTextInputFieldElement xTextInputFieldElement = new XTextInputFieldElement();
				xTextInputFieldElement.SetAttribute("NsoElementTypeName", "NewControl");
				xTextInputFieldElement.SetAttribute("NsoControlTypeName", "Combox");
				xTextInputFieldElement.SetAttribute("Type", Convert.ToInt32(ctrlType).ToString());
				xTextInputFieldElement.ID = name;
				xTextInputFieldElement.BackgroundText = "XX";
				xTextInputFieldElement.UserEditable = true;
				xTextInputFieldElement.StartBorderText = "[";
				xTextInputFieldElement.EndBorderText = "]";
				xTextInputFieldElement.EditorActiveMode = (ValueEditorActiveMode.F2 | ValueEditorActiveMode.MouseDblClick | ValueEditorActiveMode.MouseClick);
				xTextInputFieldElement.AcceptChildElementTypes2 = ElementType.Text;
				xTextInputFieldElement.EnableHighlight = _DefaultNewControlHighlight;
				if (!string.IsNullOrEmpty(text))
				{
					xTextInputFieldElement.SetInnerTextFast(text);
				}
				xTextInputFieldElement.FieldSettings = new InputFieldSettings();
				xTextInputFieldElement.FieldSettings.EditStyle = InputFieldEditStyle.DropdownList;
				xTextElement = xTextInputFieldElement;
				break;
			}
			case NsoNewControlType.ListBox:
			{
				XTextInputFieldElement xTextInputFieldElement = new XTextInputFieldElement();
				xTextInputFieldElement.SetAttribute("NsoElementTypeName", "NewControl");
				xTextInputFieldElement.SetAttribute("NsoControlTypeName", "ListBox");
				xTextInputFieldElement.SetAttribute("Type", Convert.ToInt32(ctrlType).ToString());
				xTextInputFieldElement.ID = name;
				xTextInputFieldElement.BackgroundText = "XX";
				xTextInputFieldElement.UserEditable = true;
				xTextInputFieldElement.StartBorderText = "[";
				xTextInputFieldElement.EndBorderText = "]";
				xTextInputFieldElement.EditorActiveMode = (ValueEditorActiveMode.F2 | ValueEditorActiveMode.MouseDblClick | ValueEditorActiveMode.MouseClick);
				xTextInputFieldElement.AcceptChildElementTypes2 = ElementType.Text;
				xTextInputFieldElement.EnableHighlight = _DefaultNewControlHighlight;
				if (!string.IsNullOrEmpty(text))
				{
					xTextInputFieldElement.SetInnerTextFast(text);
				}
				xTextInputFieldElement.FieldSettings = new InputFieldSettings();
				xTextInputFieldElement.FieldSettings.EditStyle = InputFieldEditStyle.DropdownList;
				xTextElement = xTextInputFieldElement;
				break;
			}
			case NsoNewControlType.TextBox:
			{
				XTextInputFieldElement xTextInputFieldElement = new XTextInputFieldElement();
				xTextInputFieldElement.SetAttribute("NsoElementTypeName", "NewControl");
				xTextInputFieldElement.SetAttribute("NsoControlTypeName", "TextBox");
				xTextInputFieldElement.SetAttribute("Type", Convert.ToInt32(ctrlType).ToString());
				xTextInputFieldElement.ID = name;
				xTextInputFieldElement.BackgroundText = "XXXX";
				xTextInputFieldElement.UserEditable = true;
				xTextInputFieldElement.StartBorderText = "[";
				xTextInputFieldElement.EndBorderText = "]";
				xTextInputFieldElement.EditorActiveMode = ValueEditorActiveMode.MouseClick;
				xTextInputFieldElement.AcceptChildElementTypes2 = ElementType.All;
				xTextInputFieldElement.EnableHighlight = _DefaultNewControlHighlight;
				if (!string.IsNullOrEmpty(text))
				{
					xTextInputFieldElement.SetInnerTextFast(text);
				}
				xTextElement = xTextInputFieldElement;
				break;
			}
			case NsoNewControlType.Checkbox:
			{
				XTextCheckBoxElementBase xTextCheckBoxElementBase = new XTextCheckBoxElement();
				xTextCheckBoxElementBase.SetAttribute("Type", Convert.ToInt32(ctrlType).ToString());
				xTextCheckBoxElementBase.ID = name;
				xTextCheckBoxElementBase.Deleteable = true;
				xTextCheckBoxElementBase.Caption = text;
				xTextElement = xTextCheckBoxElementBase;
				break;
			}
			case NsoNewControlType.NumberBox:
			{
				XTextInputFieldElement xTextInputFieldElement = new XTextInputFieldElement();
				xTextInputFieldElement.SetAttribute("NsoElementTypeName", "NewControl");
				xTextInputFieldElement.SetAttribute("NsoControlTypeName", "NumberBox");
				xTextInputFieldElement.SetAttribute("Type", Convert.ToInt32(ctrlType).ToString());
				xTextInputFieldElement.FieldSettings = new InputFieldSettings();
				xTextInputFieldElement.FieldSettings.EditStyle = InputFieldEditStyle.Numeric;
				xTextInputFieldElement.ID = name;
				xTextInputFieldElement.UserEditable = true;
				xTextInputFieldElement.BackgroundText = "XX";
				xTextInputFieldElement.StartBorderText = "[";
				xTextInputFieldElement.EndBorderText = "]";
				xTextInputFieldElement.EditorActiveMode = (ValueEditorActiveMode.F2 | ValueEditorActiveMode.MouseDblClick | ValueEditorActiveMode.MouseClick);
				xTextInputFieldElement.AcceptChildElementTypes2 = ElementType.Text;
				xTextInputFieldElement.EnableHighlight = _DefaultNewControlHighlight;
				if (!string.IsNullOrEmpty(text))
				{
					xTextInputFieldElement.SetInnerTextFast(text);
				}
				xTextInputFieldElement.ValidateStyle = new ValueValidateStyle();
				xTextInputFieldElement.ValidateStyle.ValueType = ValueTypeStyle.Numeric;
				xTextInputFieldElement.ValidateStyle.CustomMessage = "请在控件中输入数值。";
				xTextElement = xTextInputFieldElement;
				break;
			}
			case NsoNewControlType.MultiListBox:
			{
				XTextInputFieldElement xTextInputFieldElement = new XTextInputFieldElement();
				xTextInputFieldElement.SetAttribute("NsoElementTypeName", "NewControl");
				xTextInputFieldElement.SetAttribute("NsoControlTypeName", "MultiListBox");
				xTextInputFieldElement.SetAttribute("Type", Convert.ToInt32(ctrlType).ToString());
				xTextInputFieldElement.ID = name;
				xTextInputFieldElement.UserEditable = true;
				xTextInputFieldElement.BackgroundText = "XX";
				xTextInputFieldElement.StartBorderText = "[";
				xTextInputFieldElement.EndBorderText = "]";
				xTextInputFieldElement.EditorActiveMode = (ValueEditorActiveMode.F2 | ValueEditorActiveMode.MouseDblClick | ValueEditorActiveMode.MouseClick);
				if (!string.IsNullOrEmpty(text))
				{
					xTextInputFieldElement.SetInnerTextFast(text);
				}
				xTextInputFieldElement.AcceptChildElementTypes2 = ElementType.Text;
				xTextInputFieldElement.FieldSettings = new InputFieldSettings();
				xTextInputFieldElement.FieldSettings.EditStyle = InputFieldEditStyle.DropdownList;
				xTextInputFieldElement.FieldSettings.MultiSelect = true;
				xTextInputFieldElement.EnableHighlight = _DefaultNewControlHighlight;
				xTextElement = xTextInputFieldElement;
				break;
			}
			case NsoNewControlType.MultiCombox:
			{
				XTextInputFieldElement xTextInputFieldElement = new XTextInputFieldElement();
				xTextInputFieldElement.SetAttribute("NsoElementTypeName", "NewControl");
				xTextInputFieldElement.SetAttribute("NsoControlTypeName", "MultiComBox");
				xTextInputFieldElement.SetAttribute("Type", Convert.ToInt32(ctrlType).ToString());
				xTextInputFieldElement.ID = name;
				xTextInputFieldElement.BackgroundText = "XX";
				xTextInputFieldElement.StartBorderText = "[";
				xTextInputFieldElement.EndBorderText = "]";
				xTextInputFieldElement.UserEditable = true;
				xTextInputFieldElement.EditorActiveMode = (ValueEditorActiveMode.F2 | ValueEditorActiveMode.MouseDblClick | ValueEditorActiveMode.MouseClick);
				if (!string.IsNullOrEmpty(text))
				{
					xTextInputFieldElement.SetInnerTextFast(text);
				}
				xTextInputFieldElement.AcceptChildElementTypes2 = ElementType.Text;
				xTextInputFieldElement.FieldSettings = new InputFieldSettings();
				xTextInputFieldElement.FieldSettings.EditStyle = InputFieldEditStyle.DropdownList;
				xTextInputFieldElement.FieldSettings.MultiSelect = true;
				xTextInputFieldElement.EnableHighlight = _DefaultNewControlHighlight;
				xTextElement = xTextInputFieldElement;
				break;
			}
			case NsoNewControlType.DateTimeBox:
			{
				XTextInputFieldElement xTextInputFieldElement = new XTextInputFieldElement();
				xTextInputFieldElement.SetAttribute("NsoElementTypeName", "NewControl");
				xTextInputFieldElement.SetAttribute("NsoControlTypeName", "DateTimeBox");
				xTextInputFieldElement.SetAttribute("Type", Convert.ToInt32(ctrlType).ToString());
				xTextInputFieldElement.ID = name;
				xTextInputFieldElement.UserEditable = true;
				xTextInputFieldElement.StartBorderText = "[";
				xTextInputFieldElement.EndBorderText = "]";
				xTextInputFieldElement.EditorActiveMode = (ValueEditorActiveMode.F2 | ValueEditorActiveMode.MouseDblClick | ValueEditorActiveMode.MouseClick);
				if (!string.IsNullOrEmpty(text))
				{
					xTextInputFieldElement.SetInnerTextFast(text);
				}
				xTextInputFieldElement.AcceptChildElementTypes2 = ElementType.Text;
				xTextInputFieldElement.DisplayFormat = new ValueFormater();
				xTextInputFieldElement.DisplayFormat.Style = ValueFormatStyle.DateTime;
				xTextInputFieldElement.DisplayFormat.Format = "yyyy-MM-dd HH:mm";
				xTextInputFieldElement.BackgroundText = "yyyy-MM-dd HH:mm";
				xTextInputFieldElement.FieldSettings = new InputFieldSettings();
				xTextInputFieldElement.FieldSettings.EditStyle = InputFieldEditStyle.DateTime;
				xTextInputFieldElement.EnableHighlight = _DefaultNewControlHighlight;
				xTextElement = xTextInputFieldElement;
				break;
			}
			case NsoNewControlType.RadioButton:
			{
				XTextRadioBoxElement xTextRadioBoxElement = new XTextRadioBoxElement();
				xTextRadioBoxElement.SetAttribute("Type", Convert.ToInt32(ctrlType).ToString());
				xTextRadioBoxElement.ID = name;
				xTextRadioBoxElement.Caption = text;
				xTextRadioBoxElement.Deleteable = true;
				xTextElement = xTextRadioBoxElement;
				break;
			}
			case NsoNewControlType.MultiCheckbox:
			{
				XTextInputFieldElement xTextInputFieldElement = new XTextInputFieldElement();
				xTextInputFieldElement.SetAttribute("NsoElementTypeName", "NewControl");
				xTextInputFieldElement.SetAttribute("NsoControlTypeName", "MultiCheckbox");
				xTextInputFieldElement.SetAttribute("Type", Convert.ToInt32(ctrlType).ToString());
				xTextInputFieldElement.ID = name;
				xTextInputFieldElement.BackgroundText = "XX";
				xTextInputFieldElement.StartBorderText = "[";
				xTextInputFieldElement.EndBorderText = "]";
				xTextInputFieldElement.UserEditable = true;
				xTextInputFieldElement.EditorActiveMode = (ValueEditorActiveMode.F2 | ValueEditorActiveMode.MouseDblClick | ValueEditorActiveMode.MouseClick);
				if (!string.IsNullOrEmpty(text))
				{
					xTextInputFieldElement.SetInnerTextFast(text);
				}
				xTextInputFieldElement.AcceptChildElementTypes2 = ElementType.Text;
				xTextInputFieldElement.EnableHighlight = _DefaultNewControlHighlight;
				xTextElement = xTextInputFieldElement;
				break;
			}
			}
			return xTextElement;
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       void DeleteNewControl(BSTR sName)
		                                                                    ///       功能描述：
		                                                                    ///       删除一个NewControl
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sName	BSTR　	NewContro名称	 必需	
		                                                                    ///       返回值：
		                                                                    ///       无
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. DeleteNewControl (“sct”)
		                                                                    ///       实现说明：
		                                                                    ///       无
		                                                                    ///       Date:10-9 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool DeleteNewControl(string sName)
		{
			int num = 4;
			BeginLogFunction("DeleteNewControl", "sName=" + sName);
			XTextElement nsoNewControl = GetNsoNewControl(sName);
			if (nsoNewControl != null)
			{
				nsoNewControl.Focus();
				if (nsoNewControl is XTextInputFieldElement)
				{
					XTextInputFieldElement xTextInputFieldElement = (XTextInputFieldElement)nsoNewControl;
					xTextInputFieldElement.Deleteable = true;
					bool flag = false;
					using (myEditControl.CreateBackgroundModeSetter())
					{
						flag = xTextInputFieldElement.EditorDelete(logUndo: false);
					}
					EndLogFunction(flag);
					return flag;
				}
				if (nsoNewControl is XTextCheckBoxElementBase)
				{
					XTextCheckBoxElementBase xTextCheckBoxElementBase = (XTextCheckBoxElementBase)nsoNewControl;
					xTextCheckBoxElementBase.Deleteable = true;
				}
				object obj = null;
				using (myEditControl.CreateBackgroundModeSetter())
				{
					obj = myEditControl.ExecuteCommand("Delete", showUI: false, null);
				}
				if (obj is bool)
				{
					EndLogFunction(obj);
					return (bool)obj;
				}
				EndLogFunction("false");
				return false;
			}
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       LONG GetNewControlBegin (BSTR sName)
		                                                                    ///       功能描述：
		                                                                    ///       返回NewControl 开始位置
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sName	BSTR　	newcontrol名称	 必需	
		                                                                    ///       返回值：
		                                                                    ///       LONG, 位置； -1 表示失败
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. GetNewControlBegin(“ea”)
		                                                                    ///       实现说明：
		                                                                    ///       无
		                                                                    ///       Date:10-9 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public int GetNewControlBegin(string sName)
		{
			BeginLogFunction("GetNewControlBegin", "sName=" + sName);
			XTextElement nsoNewControl = GetNsoNewControl(sName);
			if (nsoNewControl == null)
			{
				EndLogFunction(-1);
				return -1;
			}
			if (nsoNewControl is XTextInputFieldElement)
			{
				XTextInputFieldElement xTextInputFieldElement = (XTextInputFieldElement)nsoNewControl;
				EndLogFunction(xTextInputFieldElement.StartElement.ViewIndex);
				return xTextInputFieldElement.StartElement.ViewIndex;
			}
			EndLogFunction(nsoNewControl.ViewIndex);
			return nsoNewControl.ViewIndex;
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       LONG GetNewControlEnd (BSTR sName)
		                                                                    ///       功能描述：
		                                                                    ///       返回 Newcontrol结束位置
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sName	BSTR　	newcontrol名称	 必需	
		                                                                    ///       返回值：
		                                                                    ///       LONG, 位置； -1 表示失败
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. GetNewControlEnd（“ea”）
		                                                                    ///       实现说明：
		                                                                    ///       无
		                                                                    ///       Date:10-9 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public int GetNewControlEnd(string sName)
		{
			BeginLogFunction("GetNewControlEnd", "sName=" + sName);
			XTextElement nsoNewControl = GetNsoNewControl(sName);
			if (nsoNewControl == null)
			{
				EndLogFunction(-1);
				return -1;
			}
			if (nsoNewControl is XTextInputFieldElement)
			{
				EndLogFunction(((XTextInputFieldElement)nsoNewControl).EndElement.ViewIndex);
				return ((XTextInputFieldElement)nsoNewControl).EndElement.ViewIndex;
			}
			XTextCheckBoxElementBase xTextCheckBoxElementBase = (XTextCheckBoxElementBase)nsoNewControl;
			EndLogFunction(xTextCheckBoxElementBase.ViewIndex);
			return xTextCheckBoxElementBase.ViewIndex;
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       BSTR GetControlBySelectArea ()
		                                                                    ///       功能描述：
		                                                                    ///       获得选中区域中NewControl名称列表
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       返回值：
		                                                                    ///       BSTR, 获得选中区域中 NewControl名称列表，, 空则表示选中区域中无Section. 多个Section采用逗号分隔，依此排列
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. GetControlBySelectArea ()
		                                                                    ///       实现说明：
		                                                                    ///       无
		                                                                    ///       Date:10-9 Jy
		                                                                    ///       </summary>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public string GetControlBySelectArea()
		{
			int num = 2;
			BeginLogFunction("GetControlBySelectArea", null);
			XTextElementList xTextElementList = new XTextElementList();
			if (myEditControl.Document.Selection.ContentElements.Count > 0)
			{
				foreach (XTextElement contentElement in myEditControl.Document.Selection.ContentElements)
				{
					for (XTextElement xTextElement = contentElement; xTextElement != null; xTextElement = xTextElement.Parent)
					{
						if (IsNewControl(xTextElement))
						{
							if (!xTextElementList.Contains(xTextElement))
							{
								xTextElementList.Add(xTextElement);
							}
							break;
						}
					}
				}
			}
			else
			{
				XTextElement xTextElement = myEditControl.CurrentElement;
				while (xTextElement != null)
				{
					if (!IsNewControl(xTextElement))
					{
						xTextElement = xTextElement.Parent;
						continue;
					}
					xTextElementList.Add(xTextElement);
					break;
				}
			}
			StringBuilder stringBuilder = new StringBuilder();
			foreach (XTextElement item in xTextElementList)
			{
				stringBuilder.Append(item.ID);
				stringBuilder.Append(",");
			}
			EndLogFunction(stringBuilder.ToString());
			return stringBuilder.ToString();
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       BSTR GetControlByPasteContent ()
		                                                                    ///       功能描述：
		                                                                    ///       获得系统剪贴板内容中Control名称列表
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       返回值：
		                                                                    ///       BSTR, 空则表示内容中无Control，多个Control采用逗号分隔，依此排列
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. GetControlByPasteContent ()
		                                                                    ///       说明：
		                                                                    ///       该接口必须和CopySelectArea配合使用，先调用CopySelectArea,并且返回的是不包含在section内的新式控件
		                                                                    ///       实现说明：
		                                                                    ///       该接口支持跨进程.在A控件窗口中调用CopySelectArea后，可以在B控件
		                                                                    ///       窗口获取名称列表
		                                                                    ///       Date:10-9 Jy
		                                                                    ///       </summary>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public string GetControlByPasteContent()
		{
			int num = 5;
			BeginLogFunction("GetControlByPasteContent", null);
			XTextElementList elementsByType = myEditControl.CreateDocumentFromClipboard().GetElementsByType(typeof(XTextInputFieldElement));
			if (elementsByType.Count > 0)
			{
				StringBuilder stringBuilder = new StringBuilder();
				foreach (XTextElement item in elementsByType)
				{
					if (stringBuilder.Length > 0)
					{
						stringBuilder.Append(",");
					}
					if (!IsNsoSection(item))
					{
						stringBuilder.Append(item.ID);
					}
				}
				EndLogFunction(stringBuilder.ToString());
				return stringBuilder.ToString();
			}
			EndLogFunction(null);
			return "";
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BOOL  SetAllNewControlFloadBorderColor (LONG  lRGBColor)
		                                                                    ///       功能描述：设置 光标点入NewControl后，出来的选择框的颜色。
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       lRGBColor	LONG	RGB 颜色值	必须	
		                                                                    ///       返回值： 
		                                                                    ///       TRUE 成功| FALSE 失败
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNsoControl1. SetAllNewControlFloadBorderColor (RGB(255,0,0))
		                                                                    ///       实现说明：
		                                                                    ///       设置 光标点入NewControl后，出来的选择框的颜色。
		                                                                    ///       只能对所有的NewControl进行统一颜色设置，不能对某一个NewControl单独设置。
		                                                                    ///       Date:10-12 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="lRGBColor">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool SetAllNewControlFloadBorderColor(int lRGBColor)
		{
			BeginLogFunction("SetAllNewControlFloadBorderColor", "lRGBColor=" + lRGBColor);
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       BOOL SetNewCtrlDropDownBtnVisible (BOOL bVisible)
		                                                                    ///       功能描述：
		                                                                    ///       设置下拉框数据元下拉小三角按钮是否显示
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       bVisible	BOOL	是否显示	 必需	
		                                                                    ///       返回值：
		                                                                    ///       BOOL  False：失败   True：成功
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. SetNewCtrlDropDownBtnVisible (false)
		                                                                    ///       实现说明：
		                                                                    ///       红色圈住的部分
		                                                                    ///       Date:10-12 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="bVisible">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool SetNewCtrlDropDownBtnVisible(bool bVisible)
		{
			BeginLogFunction("SetNewCtrlDropDownBtnVisible", "bVisible=" + bVisible);
			myEditControl.DocumentOptions.ViewOptions.ShowFormButton = bVisible;
			myEditControl.RefreshDocument();
			EndLogFunction("true");
			return true;
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       BOOL SetColorTypeOfNewCtrl (UINT iRed,UINT iGreen,UINT iBlue )
		                                                                    ///       功能描述：
		                                                                    ///       设置所有数据元的背景色类型 如：红色，蓝色（通过RGB值设置）
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       iRed	UINT	RGB值中的R值	必须	0－255之间的整数
		                                                                    ///       iGreen	UINT	RGB值中的G值	必须	0－255之间的整数
		                                                                    ///       iBlue	UINT	RGB值中的B值	必须	0－255之间的整数
		                                                                    ///       返回值：
		                                                                    ///       BOOL TRUE － 设置成功，FALSE － 设置失败
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. SetColorTypeOfNewCtrl (0,0,255) 设置数据元背景色为蓝色
		                                                                    ///       实现说明：
		                                                                    ///       无
		                                                                    ///       Date:10-12 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="iRed">
		                                                                    /// </param>
		                                                                    /// <param name="iGreen">
		                                                                    /// </param>
		                                                                    /// <param name="iBlue">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool SetColorTypeOfNewCtrl(int iRed, int iGreen, int iBlue)
		{
			BeginLogFunction("SetColorTypeOfNewCtrl", "iRed=" + iRed + "  iGreen=" + iGreen + "  iBlue=" + iBlue);
			Color backgroundTextColor = Color.FromArgb(iRed, iGreen, iBlue);
			myEditControl.Document.Options.ViewOptions.BackgroundTextColor = backgroundTextColor;
			myEditControl.Invalidate();
			EndLogFunction("true");
			return true;
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       BOOL SetAllNewCtrlBGColor2 (BOOL bShowNewCtrlBGColor,BOOL bShowNewCtrlStubBGColor)
		                                                                    ///       功能描述：
		                                                                    ///       设置文档的所有数据元的背景色显示类型
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       bShowNewCtrlBGColor	Bool	是否一直显示	必须	True 
		                                                                    ///       False 
		                                                                    ///       bShowNewCtrlStubBGColor	Bool		必须	True
		                                                                    ///       False
		                                                                    ///       返回值：
		                                                                    ///       BOOL TRUE － 设置成功，FALSE － 设置失败
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. SetAllNewCtrlBGColor2 (false,true)
		                                                                    ///       实现说明：
		                                                                    ///       如果bShowNewCtrlBGColor为true，那么bShowNewCtrlStubBGColor为true或者false数据元背景色都是一直显示，如果bShowNewCtrlBGColor为false，bShowNewCtrlStubBGColor为true则只显示含有占位符的数据元背景色，如果bShowNewCtrlBGColor为false，bShowNewCtrlBGColor为false则不显示背景色
		                                                                    ///       Date:10-12 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="bShowNewCtrlBGColor">
		                                                                    /// </param>
		                                                                    /// <param name="bShowNewCtrlStubBGColor">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool SetAllNewCtrlBGColor2(bool bShowNewCtrlBGColor, bool bShowNewCtrlStubBGColor)
		{
			BeginLogFunction("SetAllNewCtrlBGColor2", "bShowNewCtrlBGColor=" + bShowNewCtrlBGColor + "  bShowNewCtrlStubBGColor=" + bShowNewCtrlStubBGColor);
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       Void SetNewControlHighlight (BOOL bFlag)
		                                                                    ///       功能描述：
		                                                                    ///       开启或者关闭新式控件的移入高亮显示
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       bFlag	Bool	是否开启标示	必须	True：开启
		                                                                    ///       False：关闭
		                                                                    ///       返回值：
		                                                                    ///       无
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. SetNewControlHighlight (True)
		                                                                    ///       实现说明：
		                                                                    ///       无
		                                                                    ///       Date:10-12 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="bFlag">
		                                                                    /// </param>
		[ComVisible(true)]
		public void SetNewControlHighlight(bool bFlag)
		{
		}

		                                                                    /// <summary>
		                                                                    ///        函数说明：
		                                                                    ///        BOOL SetNewCtrlHelpTipBtnVisible (BOOL bVisible)
		                                                                    ///        功能描述：
		                                                                    ///        设置数据元标题提示按钮是否显示
		                                                                    ///        参数：
		                                                                    ///        名称	类型	说明	可选	取值
		                                                                    ///        bVisible	BOOL	是否显示	 必需	
		                                                                    ///        返回值：
		                                                                    ///        BOOL  False：失败   True：成功
		                                                                    ///        代码示例：
		                                                                    ///        AxNsoControl1. SetNewCtrlHelpTipBtnVisible (false)
		                                                                    ///        Date:10-12 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="bVisible">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool SetNewCtrlHelpTipBtnVisible(bool bVisible)
		{
			BeginLogFunction("SetNewCtrlHelpTipBtnVisible", "bVisible=" + bVisible);
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       BOOL SetNewCtrlUnderLineBrowser (BOOL bBrowser)
		                                                                    ///       功能描述：
		                                                                    ///       设置是否进入数据元下划线浏览模式
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       bBrowser	BOOL	是否下划线浏览	必需	
		                                                                    ///       返回值：
		                                                                    ///       False：失败  
		                                                                    ///       True：成功
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. SetNewCtrlUnderLineBrowser( true )
		                                                                    ///       实现说明：
		                                                                    ///       客户可以先调用SetNewCtrlUnderLineColorProp，SetNewCtrlUnderLineTypeProp，SetNewCtrlUnderLineBrowser三个接口来对数据元进行相应的属性设置，然后调用SetNewCtrlUnderLineBrowser接口来设置是否进入下划线浏览模式。例如，设置数据元1为红色双下划线，数据元2为蓝色三下划线，然后进入下划线浏览模式
		                                                                    ///       AxNsoControl1. SetNewCtrlUnderLineColorProp (“数据元1”,RGB(255,0,0))
		                                                                    ///       AxNsoControl1. SetNewCtrlUnderLineColorProp (“数据元2”,RGB(0,0,255))
		                                                                    ///       AxNsoControl1. SetNewCtrlUnderLineTypeProp (“数据元1”,2)
		                                                                    ///       AxNsoControl1. SetNewCtrlUnderLineTypeProp (“数据元2”,3)
		                                                                    ///       AxNsoControl1. SetNewCtrlUnderLineVisibleProp (”数据元1”,true)
		                                                                    ///       AxNsoControl1. SetNewCtrlUnderLineVisibleProp (”数据元2”,true)
		                                                                    ///       AxNsoControl1. SetNewCtrlUnderLineBrowser( true )
		                                                                    ///       这时如果希望数据元二不显示下划线，可以调用接口
		                                                                    ///       AxNsoControl1. SetNewCtrlUnderLineVisibleProp (”数据元2”,false)
		                                                                    ///       客户需要注意在首次对数据元进行属性设置时，必须对颜色，线型及是否下划线显示属性都进行设置，进入下划线浏览模式才会有效果，客户可以根据自己的逻辑结合四个接口来实现
		                                                                    ///       Date:10-12 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="bBrowser">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool SetNewCtrlUnderLineBrowser(bool bBrowser)
		{
			BeginLogFunction("SetNewCtrlUnderLineBrowser", "bBrowser=" + bBrowser);
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public string GetAllNewControlsBySectionName(string SectionId)
		{
			int num = 15;
			BeginLogFunction("GetAllNewControlsBySectionName", "SectionId=" + SectionId);
			StringBuilder stringBuilder;
			if (!string.IsNullOrEmpty(SectionId))
			{
				XTextInputFieldElement nsoSection = GetNsoSection(SectionId);
				if (nsoSection != null)
				{
					stringBuilder = new StringBuilder();
					foreach (XTextElement allElement in nsoSection.GetAllElements())
					{
						if (IsNewControl(allElement))
						{
							stringBuilder.Append(allElement.ID);
							stringBuilder.Append(",");
						}
					}
					EndLogFunction(stringBuilder.ToString());
					return stringBuilder.ToString();
				}
				EndLogFunction("");
				return "";
			}
			stringBuilder = new StringBuilder();
			foreach (XTextElement allElement2 in myEditControl.Document.GetAllElements())
			{
				if (IsNewControl(allElement2))
				{
					stringBuilder.Append(allElement2.ID);
					stringBuilder.Append(",");
				}
			}
			EndLogFunction(stringBuilder.ToString());
			return stringBuilder.ToString();
		}

		                                                                    /// <summary>
		                                                                    ///        获得指定名称的控件的类型
		                                                                    ///        </summary>
		                                                                    /// <param name="name">控件的名称</param>
		                                                                    /// <returns>控件的类型</returns>
		                                                                    /// <remarks>
		                                                                    ///        控件类型名称有
		                                                                    ///        SECTION – Section
		                                                                    ///         TEXTBOX – 新式控件的文本框
		                                                                    ///         PROTECTAREA – 保护区域
		                                                                    ///         LISTBOX – 新式控件的ListBox
		                                                                    ///         COMBOBOX – 新式控件的ComboBox
		                                                                    ///         NUMBERBOX – 新式控件的NumberBox
		                                                                    ///         CHECKBOX – 新式控件的CheckBox
		                                                                    ///         MULTILISTBOX – 新式控件的MultiListBox
		                                                                    ///         MULTICOMBOX – 新式控件的MultiComBox
		                                                                    ///       DATETIMEBOX – 新式控件的DateTimeBox
		                                                                    ///       RADIOBUTTON – 新式控件的RadioButton
		                                                                    ///        </remarks>
		[ComVisible(true)]
		public string GetTypeByStructName(string name)
		{
			int num = 18;
			BeginLogFunction("GetTypeByStructName", "name=" + name);
			XTextElement elementById = GetElementById(name);
			if (elementById == null)
			{
				EndLogFunction("");
				return "";
			}
			if (elementById is XTextCheckBoxElement)
			{
				EndLogFunction("CHECKBOX");
				return "CHECKBOX";
			}
			if (elementById is XTextRadioBoxElement)
			{
				EndLogFunction("RADIOBUTTON");
				return "RADIOBUTTON";
			}
			if (elementById is XTextInputFieldElement)
			{
				switch (elementById.GetAttribute("NsoElementTypeName"))
				{
				case "ProtecArea":
					EndLogFunction("PROTECTAREA");
					return "PROTECTAREA";
				case "Section":
					EndLogFunction("SECTION");
					return "SECTION";
				case "NewControl":
					switch (elementById.GetAttribute("NsoControlTypeName"))
					{
					case "Combox":
						EndLogFunction("COMBOBOX");
						return "COMBOBOX";
					case "DateTimeBox":
						EndLogFunction("DATETIMEBOX");
						return "DATETIMEBOX";
					case "ListBox":
						EndLogFunction("LISTBOX");
						return "LISTBOX";
					case "MultiComBox":
						EndLogFunction("MULTICOMBOX");
						return "MULTICOMBOX";
					case "MultiListBox":
						EndLogFunction("MULTILISTBOX");
						return "MULTILISTBOX";
					case "NumberBox":
						EndLogFunction("NUMBERBOX");
						return "NUMBERBOX";
					case "TextBox":
						EndLogFunction("TEXTBOX");
						return "TEXTBOX";
					case "MultiCheckbox":
						EndLogFunction("MULTICHECKBOX");
						return "MULTICHECKBOX";
					default:
						EndLogFunction("TEXTBOX");
						return "TEXTBOX";
					}
				}
			}
			EndLogFunction("");
			return "";
		}

		                                                                    /// <summary>
		                                                                    ///       选中指定名称的控件内容
		                                                                    ///       </summary>
		                                                                    /// <param name="name">控件名称</param>
		                                                                    /// <returns>操作是否成功</returns>
		[ComVisible(true)]
		public bool SelectOneNewCtrl(string name)
		{
			int num = 1;
			BeginLogFunction("SelectOneNewCtrl", "name=" + name.ToString());
			XTextElement nsoNewControl = GetNsoNewControl(name);
			if (nsoNewControl != null)
			{
				ElementEventTemplate globalEventTemplate_Field = MyWriterControl.GlobalEventTemplate_Field;
				MyWriterControl.GlobalEventTemplate_Field = null;
				try
				{
					if (nsoNewControl is XTextInputFieldElement)
					{
						XTextInputFieldElement xTextInputFieldElement = (XTextInputFieldElement)nsoNewControl;
						XTextDocumentContentElement documentContentElement = xTextInputFieldElement.DocumentContentElement;
						documentContentElement.SetSelection(xTextInputFieldElement.StartElement.ViewIndex, xTextInputFieldElement.EndElement.ViewIndex - xTextInputFieldElement.StartElement.ViewIndex + 1);
					}
					else
					{
						nsoNewControl.Select();
					}
				}
				finally
				{
					MyWriterControl.GlobalEventTemplate_Field = globalEventTemplate_Field;
				}
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public string GetSelectNewControl()
		{
			int num = 2;
			BeginLogFunction("GetSelectNewControl", null);
			XTextElementList xTextElementList = new XTextElementList();
			if (MyWriterControl.Selection.Length == 0)
			{
				xTextElementList.Add(MyWriterControl.CurrentElement);
			}
			else
			{
				xTextElementList.AddRange(MyWriterControl.Selection.ContentElements);
			}
			XTextElementList xTextElementList2 = new XTextElementList();
			foreach (XTextElement item in xTextElementList)
			{
				for (XTextElement xTextElement = item; xTextElement != null; xTextElement = xTextElement.Parent)
				{
					if (xTextElement is XTextCheckBoxElementBase)
					{
						if (!xTextElementList2.Contains(xTextElement))
						{
							xTextElementList2.Add(xTextElement);
						}
					}
					else if (xTextElement is XTextInputFieldElement)
					{
						if (IsNsoSection(xTextElement))
						{
							break;
						}
						if (!xTextElementList2.Contains(xTextElement))
						{
							xTextElementList2.Add(xTextElement);
						}
					}
					if (xTextElement.Parent is XTextDocumentContentElement)
					{
						break;
					}
				}
			}
			StringBuilder stringBuilder = new StringBuilder();
			foreach (XTextElement item2 in xTextElementList2)
			{
				if (item2 is XTextCheckBoxElementBase || item2 is XTextInputFieldElement)
				{
					stringBuilder.Append(item2.ID);
					stringBuilder.Append(",");
				}
			}
			EndLogFunction(stringBuilder.ToString());
			return stringBuilder.ToString();
		}

		[ComVisible(true)]
		public bool SetCheckboxStatus(string name, bool bChecked)
		{
			int num = 14;
			BeginLogFunction("SetCheckboxStatus", "name=" + name + "bChecked=" + bChecked);
			XTextElement elementById = GetElementById(name);
			if (elementById != null && elementById is XTextCheckBoxElementBase)
			{
				XTextCheckBoxElementBase xTextCheckBoxElementBase = (XTextCheckBoxElementBase)elementById;
				xTextCheckBoxElementBase.EditorChecked = bChecked;
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public bool SetRadioButtonCodeAndValueByArray(string sName, object lstCode, object lstValue)
		{
			int num = 9;
			BeginLogFunction("SetRadioButtonCodeAndValueByArray", string.Concat("sName=", sName, " lstCode=", lstCode, " lstValue=", lstValue));
			XTextElementList elementsByName = MyWriterControl.Document.GetElementsByName(sName);
			IList list = lstCode as IList;
			IList list2 = lstValue as IList;
			int num2 = 0;
			foreach (XTextElement item in elementsByName)
			{
				if (item is XTextCheckBoxElementBase)
				{
					XTextCheckBoxElementBase xTextCheckBoxElementBase = (XTextCheckBoxElementBase)item;
					xTextCheckBoxElementBase.Caption = Convert.ToString(list[num2]);
					xTextCheckBoxElementBase.Value = Convert.ToString(list2[num2]);
					num2++;
				}
			}
			if (num2 > 0)
			{
				myEditControl.RefreshDocument();
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public string GetNewControlProp(string name, string propertyName)
		{
			BeginLogFunction("GetNewControlProp", "name=" + name + " propertyName=" + propertyName);
			string text = "";
			XTextElement nsoNewControl = GetNsoNewControl(name);
			if (nsoNewControl != null)
			{
				text = nsoNewControl.GetAttribute(propertyName);
			}
			if (text == null)
			{
				text = "";
			}
			EndLogFunction(text);
			return text;
		}

		[ComVisible(true)]
		public bool SetNewControlProp(string name, string propName, string Value)
		{
			BeginLogFunction("SetNewControlProp", "name=" + name + "  " + propName + ">" + Value);
			bool flag = false;
			XTextElement elementById = GetElementById(name);
			if (elementById != null)
			{
				elementById.SetAttribute(propName, Value);
				UpdateByNsoAttribute(elementById, propName);
				flag = true;
			}
			else
			{
				XTextElementList elementsByName = myEditControl.Document.GetElementsByName(name);
				foreach (XTextElement item in elementsByName)
				{
					if (item is XTextCheckBoxElement)
					{
						item.SetAttribute(propName, Value);
						UpdateByNsoAttribute(item, propName);
						flag = true;
					}
				}
			}
			myEditControl.RefreshDocument();
			EndLogFunction(flag);
			return flag;
		}

		[ComVisible(true)]
		public bool SetNewControlText(string sName, string sText)
		{
			BeginLogFunction("SetNewControlText", "sName=" + sName + " sText=" + sText);
			bool flag = false;
			XTextElement nsoNewControl = GetNsoNewControl(sName);
			if (nsoNewControl != null)
			{
				if (nsoNewControl is XTextInputFieldElement)
				{
					XTextInputFieldElement xTextInputFieldElement = (XTextInputFieldElement)nsoNewControl;
					if (_SupportSuperscript == 0)
					{
						xTextInputFieldElement.EditorTextExt = sText;
					}
					else
					{
						SetNewFieldControlText(xTextInputFieldElement, sText);
					}
					xTextInputFieldElement.InnerValue = null;
				}
				else if (nsoNewControl is XTextCheckBoxElementBase)
				{
					XTextCheckBoxElementBase xTextCheckBoxElementBase = (XTextCheckBoxElementBase)nsoNewControl;
					xTextCheckBoxElementBase.Caption = sText;
					xTextCheckBoxElementBase.EditorRefreshView();
				}
				flag = true;
			}
			EndLogFunction(flag);
			return flag;
		}

		private void SetNewFieldControlText(XTextInputFieldElement field, string sText)
		{
			int num = 19;
			if (sText != null && sText.Length > 0 && sText.Contains("<tree><Content_Text>") && sText.Contains("</Content_Text></tree>"))
			{
				XmlDocument xmlDocument = new XmlDocument();
				xmlDocument.LoadXml(sText);
				XmlNodeList childNodes = xmlDocument.ChildNodes[1].ChildNodes[0].ChildNodes;
				if (childNodes != null && childNodes.Count > 0)
				{
					field.Elements.Clear();
					foreach (XmlNode item in childNodes)
					{
						char[] array = item.InnerText.ToCharArray();
						if (array != null && array.Length > 0)
						{
							char[] array2 = array;
							foreach (char c in array2)
							{
								XTextCharElement xTextCharElement = new XTextCharElement();
								xTextCharElement.OwnerDocument = myEditControl.Document;
								xTextCharElement.Text = "";
								if (field.Style == null)
								{
									xTextCharElement.Style = new DocumentContentStyle();
								}
								else
								{
									xTextCharElement.Style = field.Style;
								}
								xTextCharElement.Style.Subscript = false;
								xTextCharElement.Style.Superscript = false;
								xTextCharElement.Text = c.ToString();
								if (item.Name == "NormalText")
								{
									xTextCharElement.Style = new DocumentContentStyle();
									xTextCharElement.Style.Subscript = false;
									xTextCharElement.Style.Superscript = false;
								}
								else if (item.Name == "SubScript")
								{
									xTextCharElement.Style = new DocumentContentStyle();
									xTextCharElement.Style.Subscript = true;
									xTextCharElement.Style.Superscript = false;
								}
								else if (item.Name == "SuperScript")
								{
									xTextCharElement.Style = new DocumentContentStyle();
									xTextCharElement.Style.Subscript = false;
									xTextCharElement.Style.Superscript = true;
								}
								field.Elements.Add(xTextCharElement);
							}
						}
					}
					field.EditorRefreshView();
				}
			}
			else
			{
				field.EditorTextExt = sText;
			}
		}

		[ComVisible(true)]
		public string GetIncompletedCtrlNameList()
		{
			int num = 18;
			BeginLogFunction("GetIncompletedCtrlNameList", null);
			StringBuilder stringBuilder = new StringBuilder();
			XTextElementList elementsByType = MyWriterControl.Document.GetElementsByType(typeof(XTextInputFieldElement));
			foreach (XTextInputFieldElement item in elementsByType)
			{
				if (IsNewControl(item) && item.ValidateStyle != null && item.ValidateStyle.Required && string.IsNullOrEmpty(item.Text))
				{
					stringBuilder.Append(item.ID);
					stringBuilder.Append(",");
				}
			}
			EndLogFunction(stringBuilder.ToString());
			return stringBuilder.ToString();
		}

		[ComVisible(true)]
		public string GetNewControlText(string sName)
		{
			BeginLogFunction("GetNewControlText", "sName=" + sName);
			XTextElement nsoNewControl = GetNsoNewControl(sName);
			if (IsNewControl(nsoNewControl))
			{
				EndLogFunction(GetNewControlText(nsoNewControl));
				return GetNewControlText(nsoNewControl);
			}
			EndLogFunction(null);
			return "";
		}

		private string GetNewControlText(XTextElement element)
		{
			int num = 3;
			if (element == null)
			{
				return "";
			}
			string text = "";
			if (element is XTextCheckBoxElementBase)
			{
				text = ((XTextCheckBoxElementBase)element).Caption;
			}
			else if (_SupportSuperscript == 0)
			{
				text = element.Text;
				if (element.GetAttribute("NsoControlTypeName") == "MultiCheckbox")
				{
					IDList iDList = new IDList();
					foreach (XTextElement element2 in element.Elements)
					{
						if (element2 is XTextCheckBoxElement)
						{
							XTextCheckBoxElement xTextCheckBoxElement = (XTextCheckBoxElement)element2;
							if (xTextCheckBoxElement.Checked)
							{
								iDList.Add(xTextCheckBoxElement.CheckedValue);
							}
						}
					}
					text = iDList.ToString(',');
				}
			}
			else
			{
				List<XTextElement> elements = element.Elements;
				if (elements != null && elements.Count > 0)
				{
					foreach (XTextElement item in elements)
					{
						if (item is XTextCharElement && item.RuntimeStyle.DeleterIndex < 0)
						{
							XTextCharElement xTextCharElement = item as XTextCharElement;
							text = ((!xTextCharElement.RuntimeStyle.Superscript) ? ((!xTextCharElement.RuntimeStyle.Subscript) ? (text + "<NormalText>" + HttpUtility.HtmlEncode(xTextCharElement.Text) + "</NormalText>") : (text + "<SubScript>" + HttpUtility.HtmlEncode(xTextCharElement.Text) + "</SubScript>")) : (text + "<SuperScript>" + HttpUtility.HtmlEncode(xTextCharElement.Text) + "</SuperScript>"));
						}
						else if (item is XTextCheckBoxElement && item.RuntimeStyle.DeleterIndex < 0)
						{
							XTextCheckBoxElement xTextCheckBoxElement = (XTextCheckBoxElement)item;
							if (xTextCheckBoxElement.Checked)
							{
								text = text + "<NormalText>" + HttpUtility.HtmlEncode(xTextCheckBoxElement.Caption) + "</NormalText>";
							}
						}
					}
				}
				if (text != null && text.Length > 0)
				{
					text = "<tree><Content_Text>" + text + "</Content_Text></tree>";
					text = text.Replace("</SuperScript><SuperScript>", "");
					text = text.Replace("</SubScript><SubScript>", "");
					text = text.Replace("</NormalText><NormalText>", "");
				}
				text = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + text;
			}
			if (text == null)
			{
				text = "";
			}
			return text;
		}

		[ComVisible(true)]
		public bool SetNewControlName(string Section_name, string newValue)
		{
			BeginLogFunction("SetNewControlName", "Section_name=" + Section_name + "  newValue=" + newValue);
			EndLogFunction(SetSectionName(Section_name, newValue));
			return SetSectionName(Section_name, newValue);
		}

		[ComVisible(true)]
		public string GetAllControlNameByCurrentDoc()
		{
			int num = 4;
			BeginLogFunction("GetAllControlNameByCurrentDoc", null);
			StringBuilder stringBuilder = new StringBuilder();
			XTextElementList elementsByType = MyWriterControl.Document.GetElementsByType(typeof(XTextCheckBoxElementBase));
			if (elementsByType != null)
			{
				foreach (XTextElement item in elementsByType)
				{
					if (!item.IsLogicDeleted)
					{
						stringBuilder.Append(item.ID);
						stringBuilder.Append(",");
					}
				}
			}
			elementsByType = MyWriterControl.Document.GetElementsByType(typeof(XTextInputFieldElementBase));
			if (elementsByType != null)
			{
				foreach (XTextElement item2 in elementsByType)
				{
					if (!IsNsoSection(item2) && !item2.IsLogicDeleted)
					{
						stringBuilder.Append(item2.ID);
						stringBuilder.Append(",");
					}
				}
			}
			EndLogFunction(stringBuilder.ToString());
			return stringBuilder.ToString();
		}

		[ComVisible(true)]
		public virtual bool DeleteAllCompoundBoxCodeAndValue(string sName, int iType)
		{
			int num = 9;
			BeginLogFunction("DeleteAllCompoundBoxCodeAndValue", "sName=" + sName + "  iType=" + iType);
			XTextInputFieldElement xTextInputFieldElement = myEditControl.GetElementById(sName) as XTextInputFieldElement;
			if (xTextInputFieldElement != null && xTextInputFieldElement.FieldSettings != null && xTextInputFieldElement.FieldSettings.ListSource != null)
			{
				xTextInputFieldElement.FieldSettings.ListSource.Items = null;
				xTextInputFieldElement.FieldSettings.ListSource.RuntimeItems = null;
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       删除指定名称RadioButton的所有项
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">RadioButton名称</param>
		                                                                    /// <returns>False：失败 True：成功</returns>
		[ComVisible(true)]
		public virtual bool DeleteAllRadioButtonItem(string sName)
		{
			int num = 0;
			BeginLogFunction("DeleteAllRadioButtonItem", "sName=" + sName);
			XTextRadioBoxElement xTextRadioBoxElement = myEditControl.GetElementById(sName) as XTextRadioBoxElement;
			if (xTextRadioBoxElement != null && xTextRadioBoxElement.Elements != null)
			{
				xTextRadioBoxElement.Elements.Clear();
				xTextRadioBoxElement.EditorRefreshView();
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool DeleteNewControlText(string sName)
		{
			int num = 19;
			BeginLogFunction("DeleteNewControlText", "sName=" + sName);
			XTextElement nsoNewControl = GetNsoNewControl(sName);
			if (nsoNewControl == null)
			{
				EndLogFunction("false");
				return false;
			}
			if (nsoNewControl.GetAttribute("NsoControlTypeName") == "RadioButton" || nsoNewControl.GetAttribute("NsoControlTypeName") == "MultiCheckbox")
			{
				EndLogFunction("false");
				return false;
			}
			if (nsoNewControl is XTextRadioBoxElement || nsoNewControl is XTextCheckBoxElement)
			{
				EndLogFunction("false");
				return false;
			}
			XTextInputFieldElement xTextInputFieldElement = nsoNewControl as XTextInputFieldElement;
			if (xTextInputFieldElement != null)
			{
				using (myEditControl.CreateBackgroundModeSetter())
				{
					xTextInputFieldElement.EditorTextExt = "";
				}
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool DeleteOneCompoundBoxCodeAndValue(string sName, string sCode, int iType)
		{
			BeginLogFunction("DeleteOneCompoundBoxCodeAndValue", "sName=" + sName + "  sCode=" + sCode + "  iType=" + iType);
			AlertNotSupportedMember("DeleteOneCompoundBoxCodeAndValue");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool DeleteOneRadioButtonItemByIndex(string sName, int nIndex)
		{
			BeginLogFunction("DeleteOneRadioButtonItemByIndex", "sName=" + sName + "  nIndex=" + nIndex);
			AlertNotSupportedMember("DeleteOneRadioButtonItemByIndex");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool EnableCheckboxEvent(int lType)
		{
			BeginLogFunction("EnableCheckboxEvent", "lType=" + lType);
			AlertNotSupportedMember("EnableCheckboxEvent");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		                                                                    /// <summary>
		                                                                    ///       设置复选框标题文本
		                                                                    ///       </summary>
		                                                                    /// <param name="name">控件名称</param>
		                                                                    /// <param name="text">标题文本</param>
		                                                                    /// <returns>操作是否成功</returns>
		[ComVisible(true)]
		public bool SetCheckboxCaption(string name, string text)
		{
			int num = 2;
			BeginLogFunction("SetCheckboxCaption", "text=" + text);
			XTextCheckBoxElement xTextCheckBoxElement = GetElementById(name) as XTextCheckBoxElement;
			if (xTextCheckBoxElement != null)
			{
				xTextCheckBoxElement.Caption = text;
				MyWriterControl.Modified = true;
				MyWriterControl.Document.UndoList.Clear();
				xTextCheckBoxElement.EditorRefreshView();
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual string GetCheckboxCaption(string name)
		{
			BeginLogFunction("GetCheckboxCaption", "name=" + name);
			XTextCheckBoxElementBase xTextCheckBoxElementBase = GetElementById(name) as XTextCheckBoxElementBase;
			if (xTextCheckBoxElementBase != null && !string.IsNullOrEmpty(xTextCheckBoxElementBase.Caption))
			{
				EndLogFunction(xTextCheckBoxElementBase.Caption);
				return xTextCheckBoxElementBase.Caption;
			}
			EndLogFunction("");
			return "";
		}

		[ComVisible(true)]
		public virtual bool GetCheckboxStatus(string name)
		{
			int num = 7;
			BeginLogFunction("GetCheckboxStatus", "name=" + name);
			XTextCheckBoxElementBase xTextCheckBoxElementBase = GetElementById(name) as XTextCheckBoxElementBase;
			if (xTextCheckBoxElementBase == null)
			{
				EndLogFunction("false");
				return false;
			}
			EndLogFunction(xTextCheckBoxElementBase.Checked);
			return xTextCheckBoxElementBase.Checked;
		}

		[ComVisible(true)]
		public virtual int GetNewControlCountByType(int lType)
		{
			int num = 7;
			BeginLogFunction("GetNewControlCountByType", "lType=" + lType);
			XTextElementList allElements = Document.GetAllElements();
			int num2 = 0;
			foreach (XTextElement item in allElements)
			{
				if (!(item is XTextCharElement))
				{
					switch (lType)
					{
					case 1:
						if (item is XTextInputFieldElement && ((IXTextElement)item).GetAttribute("NsoControlTypeName") == "Combox")
						{
							num2++;
						}
						break;
					case 2:
						if (item is XTextInputFieldElement && ((IXTextElement)item).GetAttribute("NsoControlTypeName") == "ListBox")
						{
							num2++;
						}
						break;
					case 3:
						if (item is XTextInputFieldElement && ((IXTextElement)item).GetAttribute("NsoControlTypeName") == "TextBox")
						{
							num2++;
						}
						break;
					case 4:
						if (item is XTextCheckBoxElement)
						{
							num2++;
						}
						break;
					case 5:
						if (item is XTextInputFieldElement && ((IXTextElement)item).GetAttribute("NsoControlTypeName") == "NumberBox")
						{
							num2++;
						}
						break;
					case 6:
						if (item is XTextInputFieldElement && ((IXTextElement)item).GetAttribute("NsoControlTypeName") == "MultiListBox")
						{
							num2++;
						}
						break;
					case 7:
						if (item is XTextInputFieldElement && ((IXTextElement)item).GetAttribute("NsoControlTypeName") == "MultiComBox")
						{
							num2++;
						}
						break;
					case 8:
						if (item is XTextInputFieldElement && ((IXTextElement)item).GetAttribute("NsoControlTypeName") == "DateTimeBox")
						{
							num2++;
						}
						break;
					case 9:
						if (item is XTextRadioBoxElement)
						{
							num2++;
						}
						break;
					case 10:
						if (item is XTextInputFieldElement && ((IXTextElement)item).GetAttribute("NsoControlTypeName") == "MultiCheckbox")
						{
							num2++;
						}
						break;
					}
				}
			}
			EndLogFunction(num2);
			return num2;
		}

		                                                                    /// <summary>
		                                                                    ///       根据类型获取新式控件的名称列表
		                                                                    ///       </summary>
		                                                                    /// <param name="lType">新式控件的类型</param>
		                                                                    /// <returns>新式控件的名称列表，各名字之间用，隔开</returns>
		[ComVisible(true)]
		public virtual string GetNewControlNameByType(int lType)
		{
			int num = 8;
			BeginLogFunction("GetNewControlNameByType", "lType =" + lType);
			if (lType < 0)
			{
				EndLogFunction("");
				return "";
			}
			string text = null;
			int result = -1;
			StringBuilder stringBuilder = new StringBuilder();
			XTextElementList elementsByType = myEditControl.Document.GetElementsByType(typeof(XTextElement));
			foreach (XTextElement item in elementsByType)
			{
				text = item.GetAttribute("Type");
				if (int.TryParse(text, out result) && lType == result)
				{
					if (stringBuilder.Length > 0)
					{
						stringBuilder.Append(",");
					}
					stringBuilder.Append(item.ID);
				}
			}
			EndLogFunction(stringBuilder.ToString());
			return stringBuilder.ToString();
		}

		                                                                    /// <summary>
		                                                                    ///       获取指定名称的数据元的打印属性
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">数据元名称</param>
		                                                                    /// <returns>False：不可以打印   True：可以打印</returns>
		[ComVisible(true)]
		public virtual bool GetNewControlPrintAttribute(string sName)
		{
			int num = 15;
			BeginLogFunction("GetNewControlPrintAttribute", "sName =" + sName);
			string newControlProp = GetNewControlProp(sName, "Printable");
			if (!string.IsNullOrEmpty(newControlProp))
			{
				if (string.Compare(newControlProp, "true", ignoreCase: true) == 0)
				{
					EndLogFunction("true");
					return true;
				}
				if (string.Compare(newControlProp, "false", ignoreCase: true) == 0)
				{
					EndLogFunction("false");
					return false;
				}
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual object GetRadioButtonCodeWithArray(string sName)
		{
			BeginLogFunction("GetRadioButtonCodeWithArray", "sName=" + sName);
			List<string> list = new List<string>();
			XTextElementList radioBoxElementsSpecifyName = myEditControl.Document.GetRadioBoxElementsSpecifyName(sName);
			if (radioBoxElementsSpecifyName != null)
			{
				foreach (XTextRadioBoxElement item in radioBoxElementsSpecifyName)
				{
					if (item.Checked)
					{
						list.Add(item.Caption);
					}
				}
			}
			if (list == null || list.Count <= 0)
			{
				EndLogFunction("");
				return "";
			}
			EndLogFunction(list);
			return list;
		}

		[ComVisible(true)]
		public virtual string GetRadioButtonSelectItemCode(string sName)
		{
			BeginLogFunction("GetRadioButtonSelectItemCode", "sName=" + sName);
			string text = null;
			XTextElementList radioBoxElementsSpecifyName = myEditControl.Document.GetRadioBoxElementsSpecifyName(sName);
			if (radioBoxElementsSpecifyName != null)
			{
				foreach (XTextRadioBoxElement item in radioBoxElementsSpecifyName)
				{
					if (item.Checked)
					{
						text = item.Caption;
						break;
					}
				}
			}
			if (text == null)
			{
				text = "";
			}
			EndLogFunction(text);
			return text;
		}

		                                                                    /// <summary>
		                                                                    ///       获取当前RadioButton选中项的索引值
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">RadioButton名称</param>
		                                                                    /// <returns>当前RadioButton选中项的索引值</returns>
		[ComVisible(true)]
		public virtual int GetRadioButtonSelectItemIndex(string sName)
		{
			BeginLogFunction("GetRadioButtonSelectItemIndex", "sName=" + sName);
			XTextElement currentElementByTypeName = myEditControl.Document.GetCurrentElementByTypeName("XTextRadioBoxElement");
			XTextRadioBoxElement xTextRadioBoxElement = currentElementByTypeName as XTextRadioBoxElement;
			if (xTextRadioBoxElement != null)
			{
				EndLogFunction(xTextRadioBoxElement.ViewIndex);
				return xTextRadioBoxElement.ViewIndex;
			}
			EndLogFunction(-1);
			return -1;
		}

		[ComVisible(true)]
		public virtual string GetRadioButtonSelectItemValue(string sName)
		{
			BeginLogFunction("GetRadioButtonSelectItemValue", "sName=" + sName);
			string text = null;
			XTextElementList radioBoxElementsSpecifyName = myEditControl.Document.GetRadioBoxElementsSpecifyName(sName);
			if (radioBoxElementsSpecifyName != null)
			{
				foreach (XTextRadioBoxElement item in radioBoxElementsSpecifyName)
				{
					if (item.Checked)
					{
						text = item.CheckedValue;
						break;
					}
				}
			}
			if (text == null)
			{
				text = "";
			}
			EndLogFunction(text);
			return text;
		}

		[ComVisible(true)]
		public virtual int GetRadioButtonShowStatus(string sName)
		{
			AlertNotSupportedMember("GetRadioButtonShowStatus");
			throw new NotSupportedException();
		}

		                                                                    /// <summary>
		                                                                    ///       获取指定名称控件的value数组
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">RadioButton名称</param>
		                                                                    /// <returns>指定名称RadioButton的value数组</returns>
		[ComVisible(true)]
		public virtual object GetRadioButtonValueWithArray(string sName)
		{
			int num = 12;
			BeginLogFunction("GetRadioButtonValueWithArray", "sName=" + sName);
			XTextElementList elementsByName = myEditControl.Document.GetElementsByName(sName);
			if (elementsByName != null)
			{
				List<string> list = new List<string>();
				foreach (XTextRadioBoxElement item in elementsByName)
				{
					if (item.Text != null)
					{
						list.Add(item.Text);
					}
				}
				if (list.Count > 0)
				{
					EndLogFunction("true");
					return list;
				}
			}
			EndLogFunction("false");
			return "";
		}

		[ComVisible(true)]
		public virtual void LockControlLock(bool bLocked)
		{
			BeginLogFunction("LockControlLock", "bLocked=" + bLocked);
			if (bLocked)
			{
				myEditControl.DocumentOptions.BehaviorOptions.NotificationWorkingTimeout = 0;
			}
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public virtual void ResetNewControlsTagProperty()
		{
			AlertNotSupportedMember("ResetNewControlsTagProperty");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool ResetRadioButtonSelectStatus(string sName)
		{
			AlertNotSupportedMember("ResetRadioButtonSelectStatus");
			throw new NotSupportedException();
		}

		                                                                    /// <summary>
		                                                                    ///       选中指定名称的RadioButton给定的索引项
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">RadioButton名称</param>
		                                                                    /// <param name="nIndex">RadioButton索引值</param>
		                                                                    /// <returns>False：失败 True：成功</returns>
		[ComVisible(true)]
		public virtual bool SelectOneRadioButtonItem(string sName, int nIndex)
		{
			int num = 4;
			BeginLogFunction("SelectOneRadioButtonItem", "sName=" + sName + "nIndex=" + nIndex);
			XTextElementList elementsByName = myEditControl.Document.GetElementsByName(sName);
			if (elementsByName != null)
			{
				foreach (XTextRadioBoxElement item in elementsByName)
				{
					if (item.ViewIndex == nIndex)
					{
						item.Checked = true;
						item.Select();
						item.Focus();
						EndLogFunction("true");
						return true;
					}
				}
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool SelectOneRadioButtonItemByCode(string sName, string sCode)
		{
			AlertNotSupportedMember("SelectOneRadioButtonItemByCode");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool SelectOneRadioButtonItemByValue(string sName, string sValue)
		{
			AlertNotSupportedMember("SelectOneRadioButtonItemByValue");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool SetAllCheckBoxItemCheckPos(string strName)
		{
			AlertNotSupportedMember("SetAllCheckBoxItemCheckPos");
			throw new NotSupportedException();
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       BOOL SetAllNewCtrlBGColor (BOOL bFlag)
		                                                                    ///       功能描述：
		                                                                    ///       设置文档的所有数据元的背景色是否一直显示
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       bFlag	Bool	是否一直显示	必须	True – 一直显示
		                                                                    ///       False – 不一直显示
		                                                                    ///       返回值：
		                                                                    ///       BOOL TRUE － 设置成功，FALSE － 设置失败
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. SetAllNewCtrlBGColor (True)
		                                                                    ///       实现说明：
		                                                                    ///       </summary>
		                                                                    /// <param name="bFlag">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public virtual bool SetAllNewCtrlBGColor(bool bFlag)
		{
			return SetAllNewCtrlBGColorEx(bFlag, 0);
		}

		[ComVisible(true)]
		public virtual bool SetAllNewCtrlBGColorEx(bool bFlag, int lReserve)
		{
			myEditControl.DocumentOptions.ViewOptions.DefaultInputFieldHighlight = (bFlag ? EnableState.Enabled : EnableState.Disabled);
			return true;
		}

		[ComVisible(true)]
		public virtual bool SetAllRadioButtonItemCheckPos(string strName)
		{
			AlertNotSupportedMember("SetAllRadioButtonItemCheckPos");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool SetCheckBoxItemCheckPos(string strName, string strPos)
		{
			AlertNotSupportedMember("SetCheckBoxItemCheckPos");
			throw new NotSupportedException();
		}

		                                                                    /// <summary>
		                                                                    ///       设置多选下拉框互斥字符串
		                                                                    ///       </summary>
		                                                                    /// <param name="strName">下拉框名称</param>
		                                                                    /// <param name="iType">多选下拉框类型,1－多选列表框 2－多选组合框</param>
		                                                                    /// <param name="strMutex">互斥字符串</param>
		                                                                    /// <returns>false：失败 true：成功</returns>
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. SetMultiBoxMutexString (“a”，2，” A|B#C#D|E#F”)
		                                                                    ///       实现说明：
		                                                                    ///       对于互斥字符串” A|B#C#D|E#F”,竖线”|”用来区分组，组与组之间是互斥的，
		                                                                    ///       比如选择了A，那么BCDEF都要取消选中，用#区分组内成员，
		                                                                    ///       如果第一次选中了B，然后调用了该接口，再选中C，则B和C处于选中状态
		[ComVisible(true)]
		public virtual bool SetMultiBoxMutexString(string strName, int iType, string strMutex)
		{
			int num = 12;
			BeginLogFunction("SetMultiBoxMutexString", "strName=" + strName + " iType=" + iType + " strMutex=" + strMutex);
			if (string.IsNullOrEmpty(strMutex))
			{
				EndLogFunction("false");
				return false;
			}
			XTextInputFieldElement xTextInputFieldElement = GetElementById(strName) as XTextInputFieldElement;
			if (xTextInputFieldElement != null)
			{
				if (xTextInputFieldElement.FieldSettings == null)
				{
					xTextInputFieldElement.FieldSettings = new InputFieldSettings();
					xTextInputFieldElement.FieldSettings.RepulsionForGroup = true;
					xTextInputFieldElement.FieldSettings.MultiSelect = true;
					xTextInputFieldElement.FieldSettings.EditStyle = InputFieldEditStyle.DropdownList;
					xTextInputFieldElement.FieldSettings.ListSource = new ListSourceInfo();
					xTextInputFieldElement.FieldSettings.ListSource.Items = new ListItemCollection();
				}
				if (xTextInputFieldElement.FieldSettings.ListSource == null)
				{
					xTextInputFieldElement.FieldSettings.RepulsionForGroup = true;
					xTextInputFieldElement.FieldSettings.ListSource = new ListSourceInfo();
					xTextInputFieldElement.FieldSettings.ListSource.Items = new ListItemCollection();
				}
				if (xTextInputFieldElement.FieldSettings.ListSource.Items == null)
				{
					xTextInputFieldElement.FieldSettings.ListSource.Items = new ListItemCollection();
				}
				xTextInputFieldElement.FieldSettings.ListSource.Items.Clear();
				string[] array = strMutex.Split('|');
				if (array.Length > 0)
				{
					for (int i = 0; i < array.Length; i++)
					{
						string[] array2 = array[i].Split('#');
						List<string> list = new List<string>(array2);
						ListItem listItem = null;
						for (int j = 0; j < list.Count; j++)
						{
							listItem = new ListItem();
							listItem.Text = array2[j];
							listItem.Value = listItem.Text;
							listItem.Group = "Group" + i;
							xTextInputFieldElement.FieldSettings.ListSource.Items.Add(listItem);
						}
					}
					xTextInputFieldElement.EditorRefreshView();
					myEditControl.RefreshDocument();
					EndLogFunction("true");
					return true;
				}
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool SetMultiDropdownControlGroupSeparator(string strName, string strGroupSeparator)
		{
			int num = 3;
			BeginLogFunction("SetMultiDropdownControlGroupSeparator", "strName=" + strName + " strGroupSeparator" + strGroupSeparator);
			XTextElement elementById = GetElementById(strName);
			if (elementById == null)
			{
			}
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       设置指定名称MultiCheckbox的Code和Value值
		                                                                    ///       </summary>
		                                                                    /// <param name="strName">MultiCheckbox名称</param>
		                                                                    /// <param name="strCode">MultiCheckbox的Code值</param>
		                                                                    /// <param name="strValue">MultiCheckbox的Value值</param>
		                                                                    /// <returns>是否成功</returns>
		                                                                    /// <example>
		                                                                    ///       AxNsoControl1. SetMultiCheckboxCodeAndValue (“aa”,”a”,”1”)
		                                                                    ///       </example>
		[ComVisible(true)]
		public bool SetMultiCheckboxCodeAndValue(string strName, string strCode, string strValue)
		{
			int num = 19;
			BeginLogFunction("SetMultiCheckboxCodeAndValue", "strName=" + strName + " strCode=" + strCode + " strValue=" + strValue);
			bool flag = false;
			XTextInputFieldElement xTextInputFieldElement = Document.GetElementById(strName) as XTextInputFieldElement;
			bool requried = xTextInputFieldElement.GetAttribute("Requried") == "true";
			bool flag2 = xTextInputFieldElement.GetAttribute("RadioButtonShowType") == "true";
			if (xTextInputFieldElement != null && GetNewControlType(xTextInputFieldElement) == NsoNewControlType.MultiCheckbox)
			{
				xTextInputFieldElement.Elements.Clear();
				string[] array = (strCode == null) ? new string[0] : strCode.Split(',');
				string[] array2 = (strValue == null) ? new string[0] : strValue.Split(',');
				int num2 = Math.Max(array.Length, array2.Length);
				for (int i = 0; i < num2; i++)
				{
					XTextCheckBoxElement xTextCheckBoxElement = new XTextCheckBoxElement();
					xTextCheckBoxElement.Name = strName + "_Item";
					xTextCheckBoxElement.ID = strName + "_Item" + i;
					xTextCheckBoxElement.SetAttribute("MultiCheckboxItem", "1");
					xTextCheckBoxElement.Requried = requried;
					if (flag2)
					{
						xTextCheckBoxElement.VisualStyle = CheckBoxVisualStyle.SystemRadioBox;
					}
					else
					{
						xTextCheckBoxElement.VisualStyle = CheckBoxVisualStyle.SystemDefault;
					}
					if (i < array.Length)
					{
						xTextCheckBoxElement.Caption = array[i];
					}
					else
					{
						xTextCheckBoxElement.Caption = " ";
					}
					if (i < array2.Length)
					{
						xTextCheckBoxElement.CheckedValue = array2[i];
					}
					else
					{
						xTextCheckBoxElement.Value = " ";
					}
					xTextInputFieldElement.Elements.Add(xTextCheckBoxElement);
				}
				xTextInputFieldElement.EditorRefreshView();
				flag = true;
			}
			EndLogFunction(flag);
			return flag;
		}

		[ComVisible(true)]
		public virtual bool SetMultiDropdownControlSeparator(string sName, string sSeparator)
		{
			int num = 17;
			BeginLogFunction("SetMultiDropdownControlSeparator", "sName=" + sName + " sSeparator=" + sSeparator);
			XTextElement elementById = GetElementById(sName);
			if (elementById != null)
			{
				XTextInputFieldElement xTextInputFieldElement = elementById as XTextInputFieldElement;
				if (xTextInputFieldElement != null)
				{
					if (xTextInputFieldElement.FieldSettings != null)
					{
						xTextInputFieldElement.FieldSettings.ListValueSeparatorChar = sSeparator;
						EndLogFunction("true");
						return true;
					}
					xTextInputFieldElement.FieldSettings = new InputFieldSettings();
					xTextInputFieldElement.FieldSettings.ListValueSeparatorChar = sSeparator;
				}
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual void SetNewControlDropMode(bool bEnable)
		{
			AlertNotSupportedMember("SetNewControlDropMode");
			throw new NotSupportedException();
		}

		                                                                    /// <summary>
		                                                                    ///       设置指定名称的数据元的打印属性
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">数据元名称</param>
		                                                                    /// <param name="bPrint">是否打印出来,True 打印 False 不打印</param>
		                                                                    /// <returns> False：失败 True：成功</returns>
		[ComVisible(true)]
		public virtual bool SetNewControlPrintAttribute(string sName, bool bPrint)
		{
			BeginLogFunction("SetNewControlPrintAttribute", "sName=" + sName + " bPrint=" + bPrint);
			bool flag = SetNewControlProp(sName, "Printable", bPrint.ToString());
			EndLogFunction(flag);
			return flag;
		}

		[ComVisible(true)]
		public virtual bool SetNewControlTextColor(string sName, int nColor)
		{
			int num = 4;
			BeginLogFunction("SetNewControlTextColor", "sName=" + sName + "  nColor=" + nColor);
			XTextInputFieldElement xTextInputFieldElement = GetElementById(sName) as XTextInputFieldElement;
			if (xTextInputFieldElement != null)
			{
				try
				{
					myEditControl.BackgroundMode = true;
					DocumentContentStyle documentContentStyle = new DocumentContentStyle();
					documentContentStyle.Color = Color.FromArgb(nColor);
					documentContentStyle.DisableDefaultValue = true;
					xTextInputFieldElement.EditorSetContentStyle(documentContentStyle, logUndo: false);
					xTextInputFieldElement.EditorRefreshView();
					EndLogFunction("true");
					return true;
				}
				finally
				{
					myEditControl.BackgroundMode = false;
				}
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool SetNewCtrlUnderLineColorProp(string strName, int nColorType)
		{
			BeginLogFunction("SetNewCtrlUnderLineColorProp", "strName=" + strName + "  nColorType=" + nColorType);
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool SetNewCtrlUnderLineStyle(string strName, int nLineType, int nColorType)
		{
			AlertNotSupportedMember("SetNewCtrlUnderLineStyle");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool SetNewCtrlUnderLineTypeProp(string strName, int nLineType)
		{
			BeginLogFunction("SetNewCtrlUnderLineTypeProp", "strName=" + strName + "  nLineType=" + nLineType);
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool SetNewCtrlUnderLineVisible(bool bShowAll, string strName, bool bShow)
		{
			BeginLogFunction("SetNewCtrlUnderLineVisible", "bShowAll=" + bShowAll + "  strName=" + strName + "  bShow=" + bShow);
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool SetNewCtrlUnderLineVisibleProp(string strName, bool bShow)
		{
			BeginLogFunction("SetNewCtrlUnderLineVisibleProp", "strName=" + strName + "  bShow=" + bShow);
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       BOOL SetTextBoxMaxLen (BSTR sName, LONG nMaxLen)
		                                                                    ///       功能描述：
		                                                                    ///       设置TextBox可输入的最大长度
		                                                                    ///        参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sName	BSTR　	TextBox名称	 必需	
		                                                                    ///       nMaxLen	LONG		必需	大于0的数字
		                                                                    ///       返回值：
		                                                                    ///        FALSE：失败
		                                                                    ///        TRUE：成功
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. SetTextBoxMaxLen (“ea1”，5)
		                                                                    ///         实现说明：
		                                                                    ///       无
		                                                                    ///       如果nMaxLen = 0，则取消长度限制
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">
		                                                                    /// </param>
		                                                                    /// <param name="nMaxLen">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public virtual bool SetTextBoxMaxLen(string sName, int nMaxLen)
		{
			int num = 10;
			BeginLogFunction("SetTextBoxMaxLen", "sName=" + sName + "  nMaxLen=" + nMaxLen);
			XTextInputFieldElement xTextInputFieldElement = GetElementById(sName) as XTextInputFieldElement;
			if (xTextInputFieldElement != null)
			{
				if (xTextInputFieldElement.ValidateStyle == null)
				{
					xTextInputFieldElement.ValidateStyle = new ValueValidateStyle();
				}
				xTextInputFieldElement.ValidateStyle.MaxLength = nMaxLen;
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool ShowRadioButtonSelectItemOnly(string sName, bool bOnlyShow)
		{
			AlertNotSupportedMember("ShowRadioButtonSelectItemOnly");
			throw new NotSupportedException();
		}

		                                                                    /// <summary>
		                                                                    ///       切换光标在数据元(数据组)前端或者后端的模式。
		                                                                    ///       默认情况下是 不自动进入模式
		                                                                    ///       </summary>
		                                                                    /// <param name="nMode">模式,1 自动进入模式,0 不自动进入模式</param>
		[ComVisible(true)]
		public virtual void SwitchNewControlCursorMode(int nMode)
		{
			BeginLogFunction("SwitchNewControlCursorMode", "nMode=" + nMode);
			XTextElement currentElement = myEditControl.CurrentElement;
			if (currentElement != null && (IsNsoRegion(currentElement) || IsNsoSection(currentElement)) && nMode == 1)
			{
				currentElement.Focus();
			}
			EndLogFunction("");
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明:
		                                                                    ///       void  SupportSuperscript (LONG nFlag)
		                                                                    ///       功能描述:
		                                                                    ///       判断选择区域是否合法；
		                                                                    ///       参数:
		                                                                    ///       名称   类型   说明                可选   取值 
		                                                                    ///       nFlag  LONG   是否支持读取上下标  0,1    0 – 不支持1 – 支持 
		                                                                    ///       返回值:
		                                                                    ///       代码示例:
		                                                                    ///       AxNsoControl1.SupportSuperscript ()
		                                                                    ///       实现说明:
		                                                                    ///       开启上下标支持功能后，格式文本 跟 不含其他的纯数据组 文本中假如含有
		                                                                    ///       上下标，GetNewControlText GetSectionText 将返回一串xml值，里面包含上下标信息. 假如不含有上下标，则跟以前功能一样。
		                                                                    ///       将该xml信息 通过SetStructsTextByArray（批量赋值） SetNewControlText SetSectionText， 设置，会恢复出上下标。
		                                                                    ///       会在元素属性中 生成一个xml属性HasSuperscript 用于标识带上下标元素
		                                                                    ///       </summary>
		                                                                    /// <param name="nFlag">
		                                                                    /// </param>
		[ComVisible(true)]
		public virtual void SupportSuperscript(int nFlag)
		{
			BeginLogFunction("SupportSuperscript", "nFlag=" + nFlag);
			_SupportSuperscript = nFlag;
			EndLogFunction(null);
		}

		                                                                    /// <summary> 
		                                                                    ///       清理所有正在使用的资源。
		                                                                    ///       </summary>
		                                                                    /// <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
		protected override void Dispose(bool disposing)
		{
			int num = 14;
			if (_FocusTimer != null)
			{
				_FocusTimer.Dispose();
				_FocusTimer = null;
			}
			UnlockCurrentFile();
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
			DisposeControl(myEditControl);
			myEditControl = null;
			DisposeControl(myPreviewControl);
			myPreviewControl = null;
			DisposeControl(mySplitContainer);
			mySplitContainer = null;
			DisposeControl(mainMenuStrip);
			mainMenuStrip = null;
			DisposeControl(pnlMainContainer);
			pnlMainContainer = null;
			myCommandControler = null;
			_UIMenuItems = null;
			_AllTables = null;
			_CurrentLockFileStream = null;
			_DictFileNames = null;
			myEditControl = null;
			myCommandControler = null;
			mVisibleExpression = null;
			mySplitContainer = null;
			newcontrols = null;
			if (InnerDebugMode)
			{
				GClass364.smethod_3(GetType(), _InstanceIndex, null);
				string text = GClass364.smethod_5(GetType(), 10240);
				if (string.IsNullOrEmpty(text))
				{
					text = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "无任何控件了。";
				}
				Clipboard.SetText(text);
				string text2 = "销毁控件" + GetType().Name + "#" + _InstanceIndex;
				MessageBox.Show(text2);
			}
		}

		private void DisposeControl(Control control_0)
		{
			if (!(control_0?.IsDisposed ?? true))
			{
				control_0.Dispose();
			}
		}

		protected override void OnHandleDestroyed(EventArgs eventArgs_0)
		{
			base.OnHandleDestroyed(eventArgs_0);
			if (base.IsDisposed)
			{
			}
		}

		                                                                    /// <summary> 
		                                                                    ///       设计器支持所需的方法 - 不要
		                                                                    ///       使用代码编辑器修改此方法的内容。
		                                                                    ///       </summary>
		private void InitializeComponent()
		{
			components = new System.ComponentModel.Container();
			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(AxNsoOfficeLib.AxNsoControlBase));
			myEditControl = new DCSoft.Writer.Controls.WriterControl();
			cmEdit = new System.Windows.Forms.ContextMenuStrip(components);
			cmRedo = new System.Windows.Forms.ToolStripMenuItem();
			cmUndo = new System.Windows.Forms.ToolStripMenuItem();
			toolStripMenuItem4 = new System.Windows.Forms.ToolStripSeparator();
			cmCut = new System.Windows.Forms.ToolStripMenuItem();
			cmCopy = new System.Windows.Forms.ToolStripMenuItem();
			cmPaste = new System.Windows.Forms.ToolStripMenuItem();
			cmCopyWithFormat = new System.Windows.Forms.ToolStripMenuItem();
			cmDelete = new System.Windows.Forms.ToolStripMenuItem();
			toolStripMenuItem5 = new System.Windows.Forms.ToolStripSeparator();
			cmColor = new System.Windows.Forms.ToolStripMenuItem();
			cmFont = new System.Windows.Forms.ToolStripMenuItem();
			toolStripMenuItem6 = new System.Windows.Forms.ToolStripSeparator();
			cmAlignLeft = new System.Windows.Forms.ToolStripMenuItem();
			cmAlignCenter = new System.Windows.Forms.ToolStripMenuItem();
			cmAlignRight = new System.Windows.Forms.ToolStripMenuItem();
			toolStripMenuItem8 = new System.Windows.Forms.ToolStripSeparator();
			toolStripMenuItem26 = new System.Windows.Forms.ToolStripMenuItem();
			cmDebug = new System.Windows.Forms.ToolStripMenuItem();
			执行命令ToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			调试暑促和ToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			系统设置ToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			控件属性ToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			元素属性ToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			mainMenuStrip = new System.Windows.Forms.MenuStrip();
			menuPickList = new System.Windows.Forms.ToolStripMenuItem();
			menunewDoc = new System.Windows.Forms.ToolStripMenuItem();
			menuOpen = new System.Windows.Forms.ToolStripMenuItem();
			toolStripSeparator24 = new System.Windows.Forms.ToolStripSeparator();
			menuSave = new System.Windows.Forms.ToolStripMenuItem();
			menuSaveAs = new System.Windows.Forms.ToolStripMenuItem();
			toolStripSeparator19 = new System.Windows.Forms.ToolStripSeparator();
			menuPageDialog = new System.Windows.Forms.ToolStripMenuItem();
			menuPrintPreview = new System.Windows.Forms.ToolStripMenuItem();
			menuPrint = new System.Windows.Forms.ToolStripMenuItem();
			toolStripMenuItem7 = new System.Windows.Forms.ToolStripMenuItem();
			toolStripSeparator25 = new System.Windows.Forms.ToolStripSeparator();
			menuExportToPDF = new System.Windows.Forms.ToolStripMenuItem();
			menuSetDocumentProperties = new System.Windows.Forms.ToolStripMenuItem();
			toolStripSeparator10 = new System.Windows.Forms.ToolStripSeparator();
			menuQuit = new System.Windows.Forms.ToolStripMenuItem();
			menuEditMenu = new System.Windows.Forms.ToolStripMenuItem();
			menuUndo = new System.Windows.Forms.ToolStripMenuItem();
			menuRedo = new System.Windows.Forms.ToolStripMenuItem();
			toolStripSeparator4 = new System.Windows.Forms.ToolStripSeparator();
			menuCut = new System.Windows.Forms.ToolStripMenuItem();
			menuCopy = new System.Windows.Forms.ToolStripMenuItem();
			menuPaste = new System.Windows.Forms.ToolStripMenuItem();
			menuPasteSpecial = new System.Windows.Forms.ToolStripMenuItem();
			toolStripSeparator29 = new System.Windows.Forms.ToolStripSeparator();
			menuResetAttributes = new System.Windows.Forms.ToolStripMenuItem();
			menuSelectAll = new System.Windows.Forms.ToolStripMenuItem();
			toolStripSeparator6 = new System.Windows.Forms.ToolStripSeparator();
			menuSearchDialog = new System.Windows.Forms.ToolStripMenuItem();
			menuDeleteComment = new System.Windows.Forms.ToolStripMenuItem();
			menuViewMenu = new System.Windows.Forms.ToolStripMenuItem();
			menuAvailableToolbars = new System.Windows.Forms.ToolStripMenuItem();
			menuStatusBarVisible = new System.Windows.Forms.ToolStripMenuItem();
			menuControlCodes = new System.Windows.Forms.ToolStripMenuItem();
			menuInsertPageHeader = new System.Windows.Forms.ToolStripMenuItem();
			menuInsertPageFooter = new System.Windows.Forms.ToolStripMenuItem();
			mHeaderBottomLine = new System.Windows.Forms.ToolStripMenuItem();
			menuZoom = new System.Windows.Forms.ToolStripMenuItem();
			menuZoomIn = new System.Windows.Forms.ToolStripMenuItem();
			menuZoomOut = new System.Windows.Forms.ToolStripMenuItem();
			menuZoomReset = new System.Windows.Forms.ToolStripMenuItem();
			menuZoomAuto = new System.Windows.Forms.ToolStripMenuItem();
			mJumpPrint = new System.Windows.Forms.ToolStripMenuItem();
			toolStripSeparator18 = new System.Windows.Forms.ToolStripSeparator();
			mPageViewMode = new System.Windows.Forms.ToolStripMenuItem();
			mNormalViewMode = new System.Windows.Forms.ToolStripMenuItem();
			toolStripSeparator21 = new System.Windows.Forms.ToolStripSeparator();
			mCleanViewMode = new System.Windows.Forms.ToolStripMenuItem();
			mComplexViewMode = new System.Windows.Forms.ToolStripMenuItem();
			toolStripMenuItem17 = new System.Windows.Forms.ToolStripSeparator();
			mDocumentGridLine = new System.Windows.Forms.ToolStripMenuItem();
			mDebugout = new System.Windows.Forms.ToolStripMenuItem();
			menuInsertMenu = new System.Windows.Forms.ToolStripMenuItem();
			menuInsertBreak = new System.Windows.Forms.ToolStripMenuItem();
			menuFieldMenu = new System.Windows.Forms.ToolStripMenuItem();
			menuInsertDateTime = new System.Windows.Forms.ToolStripMenuItem();
			menuInsertPageIndex = new System.Windows.Forms.ToolStripMenuItem();
			menuInsertInputField = new System.Windows.Forms.ToolStripMenuItem();
			menuInsertSymbol = new System.Windows.Forms.ToolStripMenuItem();
			menuInsertAnnotation = new System.Windows.Forms.ToolStripMenuItem();
			menuGraphicMenu = new System.Windows.Forms.ToolStripMenuItem();
			menuInsertDoc = new System.Windows.Forms.ToolStripMenuItem();
			menuInsertMediFormula = new System.Windows.Forms.ToolStripMenuItem();
			toolStripMenuItem27 = new System.Windows.Forms.ToolStripMenuItem();
			menuFormatMenu = new System.Windows.Forms.ToolStripMenuItem();
			menuFontDialog = new System.Windows.Forms.ToolStripMenuItem();
			menuParagraphDialog = new System.Windows.Forms.ToolStripMenuItem();
			menuBulletsAndNumberingDialog = new System.Windows.Forms.ToolStripMenuItem();
			mTextColor = new System.Windows.Forms.ToolStripMenuItem();
			mBackColor = new System.Windows.Forms.ToolStripMenuItem();
			toolStripSeparator7 = new System.Windows.Forms.ToolStripSeparator();
			mSup = new System.Windows.Forms.ToolStripMenuItem();
			mSub = new System.Windows.Forms.ToolStripMenuItem();
			toolStripSeparator8 = new System.Windows.Forms.ToolStripSeparator();
			mAlignLeft = new System.Windows.Forms.ToolStripMenuItem();
			mCenterAlign = new System.Windows.Forms.ToolStripMenuItem();
			mRightAlign = new System.Windows.Forms.ToolStripMenuItem();
			toolStripSeparator9 = new System.Windows.Forms.ToolStripSeparator();
			mNumerList = new System.Windows.Forms.ToolStripMenuItem();
			mBulleteList = new System.Windows.Forms.ToolStripMenuItem();
			mFirstIndent = new System.Windows.Forms.ToolStripMenuItem();
			toolStripSeparator26 = new System.Windows.Forms.ToolStripSeparator();
			mFieldHighlight = new System.Windows.Forms.ToolStripMenuItem();
			menuTableMenu = new System.Windows.Forms.ToolStripMenuItem();
			menuTableInsertMenu = new System.Windows.Forms.ToolStripMenuItem();
			menuInsertTableElement = new System.Windows.Forms.ToolStripMenuItem();
			toolStripMenuItem10 = new System.Windows.Forms.ToolStripMenuItem();
			toolStripMenuItem15 = new System.Windows.Forms.ToolStripMenuItem();
			toolStripMenuItem16 = new System.Windows.Forms.ToolStripMenuItem();
			toolStripMenuItem18 = new System.Windows.Forms.ToolStripMenuItem();
			menuTableDeleteMenu = new System.Windows.Forms.ToolStripMenuItem();
			toolStripMenuItem19 = new System.Windows.Forms.ToolStripMenuItem();
			toolStripMenuItem20 = new System.Windows.Forms.ToolStripMenuItem();
			toolStripMenuItem21 = new System.Windows.Forms.ToolStripMenuItem();
			menuTableSelectMenu = new System.Windows.Forms.ToolStripMenuItem();
			menuSelectTable = new System.Windows.Forms.ToolStripMenuItem();
			menuSelectRow = new System.Windows.Forms.ToolStripMenuItem();
			menuSelectCell = new System.Windows.Forms.ToolStripMenuItem();
			menuMergeCells = new System.Windows.Forms.ToolStripMenuItem();
			menuSplitCell = new System.Windows.Forms.ToolStripMenuItem();
			menuProtect = new System.Windows.Forms.ToolStripMenuItem();
			menuUnSetCellsReadOnly = new System.Windows.Forms.ToolStripMenuItem();
			menuHeadingRowsRepeat = new System.Windows.Forms.ToolStripMenuItem();
			toolStripSeparator20 = new System.Windows.Forms.ToolStripSeparator();
			mCellAlign = new System.Windows.Forms.ToolStripMenuItem();
			mAlignTopLeft = new System.Windows.Forms.ToolStripMenuItem();
			mAlignTopCenter = new System.Windows.Forms.ToolStripMenuItem();
			mAlignTopRight = new System.Windows.Forms.ToolStripMenuItem();
			mAlignMiddleLeft = new System.Windows.Forms.ToolStripMenuItem();
			mAlignMiddleCenter = new System.Windows.Forms.ToolStripMenuItem();
			mAlignMiddleRight = new System.Windows.Forms.ToolStripMenuItem();
			mAlignBottomLeft = new System.Windows.Forms.ToolStripMenuItem();
			mAlignBottomCenter = new System.Windows.Forms.ToolStripMenuItem();
			mAlignBottomRight = new System.Windows.Forms.ToolStripMenuItem();
			toolStripSeparator16 = new System.Windows.Forms.ToolStripSeparator();
			menuTableDialog = new System.Windows.Forms.ToolStripMenuItem();
			toolStripMenuItem12 = new System.Windows.Forms.ToolStripMenuItem();
			toolStripMenuItem13 = new System.Windows.Forms.ToolStripMenuItem();
			menuTableBoundaries = new System.Windows.Forms.ToolStripMenuItem();
			mTools = new System.Windows.Forms.ToolStripMenuItem();
			mVisibleExpression = new System.Windows.Forms.ToolStripMenuItem();
			mHighlight = new System.Windows.Forms.ToolStripMenuItem();
			toolStripMenuItem41 = new System.Windows.Forms.ToolStripMenuItem();
			toolStripMenuItem42 = new System.Windows.Forms.ToolStripMenuItem();
			menuHelpMenu = new System.Windows.Forms.ToolStripMenuItem();
			menuExecuteCommand = new System.Windows.Forms.ToolStripMenuItem();
			menudebugOut = new System.Windows.Forms.ToolStripMenuItem();
			menuOptions = new System.Windows.Forms.ToolStripMenuItem();
			toolStripMenuItem25 = new System.Windows.Forms.ToolStripMenuItem();
			menuAbout = new System.Windows.Forms.ToolStripMenuItem();
			standardbar = new System.Windows.Forms.ToolStrip();
			btnPreviewMode = new System.Windows.Forms.ToolStripButton();
			toolStripSeparator33 = new System.Windows.Forms.ToolStripSeparator();
			btnFileNew = new System.Windows.Forms.ToolStripButton();
			btnOpen = new System.Windows.Forms.ToolStripButton();
			btnSave = new System.Windows.Forms.ToolStripButton();
			btnSaveAs = new System.Windows.Forms.ToolStripButton();
			toolStripSeparator5 = new System.Windows.Forms.ToolStripSeparator();
			btnCut = new System.Windows.Forms.ToolStripButton();
			btnCopy = new System.Windows.Forms.ToolStripButton();
			btnPaste = new System.Windows.Forms.ToolStripButton();
			toolStripSeparator12 = new System.Windows.Forms.ToolStripSeparator();
			btnUndo = new System.Windows.Forms.ToolStripButton();
			btnRedo = new System.Windows.Forms.ToolStripButton();
			toolStripSeparator13 = new System.Windows.Forms.ToolStripSeparator();
			cboFontName = new System.Windows.Forms.ToolStripComboBox();
			cboFontSize = new System.Windows.Forms.ToolStripComboBox();
			btnFont = new System.Windows.Forms.ToolStripButton();
			btnBold = new System.Windows.Forms.ToolStripButton();
			btnItalic = new System.Windows.Forms.ToolStripButton();
			btnUnderline = new System.Windows.Forms.ToolStripButton();
			btnColor = new System.Windows.Forms.ToolStripButton();
			btnBackColor = new System.Windows.Forms.ToolStripButton();
			btnSup = new System.Windows.Forms.ToolStripButton();
			btnSub = new System.Windows.Forms.ToolStripButton();
			toolStripSeparator14 = new System.Windows.Forms.ToolStripSeparator();
			btnAlignLeft = new System.Windows.Forms.ToolStripButton();
			btnAlignCenter = new System.Windows.Forms.ToolStripButton();
			btnAlignRight = new System.Windows.Forms.ToolStripButton();
			toolStripSeparator15 = new System.Windows.Forms.ToolStripSeparator();
			btnNumberedList = new System.Windows.Forms.ToolStripButton();
			btnBulletedList = new System.Windows.Forms.ToolStripButton();
			toolStripSeparator1 = new System.Windows.Forms.ToolStripSeparator();
			myCommandControler = new DCSoft.Writer.Commands.WriterCommandControler(components);
			cmi_Redo = new System.Windows.Forms.ToolStripMenuItem();
			cmi_Undo = new System.Windows.Forms.ToolStripMenuItem();
			cmi_Cut = new System.Windows.Forms.ToolStripMenuItem();
			cmi_Copy = new System.Windows.Forms.ToolStripMenuItem();
			cmi_Paste = new System.Windows.Forms.ToolStripMenuItem();
			cmi_Delete = new System.Windows.Forms.ToolStripMenuItem();
			cmi_Properties = new System.Windows.Forms.ToolStripMenuItem();
			cmi_EditImage = new System.Windows.Forms.ToolStripMenuItem();
			cmi_BorderBackground = new System.Windows.Forms.ToolStripMenuItem();
			cmc_Redo = new System.Windows.Forms.ToolStripMenuItem();
			cmc_Undo = new System.Windows.Forms.ToolStripMenuItem();
			cmc_Cut = new System.Windows.Forms.ToolStripMenuItem();
			cmc_Copy = new System.Windows.Forms.ToolStripMenuItem();
			cmc_Paste = new System.Windows.Forms.ToolStripMenuItem();
			cmc_TableRowProperties = new System.Windows.Forms.ToolStripMenuItem();
			cmc_CellProperties = new System.Windows.Forms.ToolStripMenuItem();
			toolStripMenuItem28 = new System.Windows.Forms.ToolStripMenuItem();
			toolStripMenuItem29 = new System.Windows.Forms.ToolStripMenuItem();
			toolStripMenuItem30 = new System.Windows.Forms.ToolStripMenuItem();
			toolStripMenuItem31 = new System.Windows.Forms.ToolStripMenuItem();
			toolStripMenuItem32 = new System.Windows.Forms.ToolStripMenuItem();
			toolStripMenuItem33 = new System.Windows.Forms.ToolStripMenuItem();
			toolStripMenuItem34 = new System.Windows.Forms.ToolStripMenuItem();
			toolStripMenuItem35 = new System.Windows.Forms.ToolStripMenuItem();
			toolStripMenuItem36 = new System.Windows.Forms.ToolStripMenuItem();
			toolStripMenuItem37 = new System.Windows.Forms.ToolStripMenuItem();
			toolStripMenuItem38 = new System.Windows.Forms.ToolStripMenuItem();
			toolStripMenuItem40 = new System.Windows.Forms.ToolStripMenuItem();
			toolStripMenuItem9 = new System.Windows.Forms.ToolStripMenuItem();
			cmc_DeleteRow = new System.Windows.Forms.ToolStripMenuItem();
			cmc_DeleteColumn = new System.Windows.Forms.ToolStripMenuItem();
			cmc_MergeCell = new System.Windows.Forms.ToolStripMenuItem();
			cmc_SplitCell = new System.Windows.Forms.ToolStripMenuItem();
			cmc_CellBorderBackground = new System.Windows.Forms.ToolStripMenuItem();
			cmc_Properties = new System.Windows.Forms.ToolStripMenuItem();
			cmi_EmitInText = new System.Windows.Forms.ToolStripMenuItem();
			cmi_TextSurrdings = new System.Windows.Forms.ToolStripMenuItem();
			cmf_Undo = new System.Windows.Forms.ToolStripMenuItem();
			cmf_Redo = new System.Windows.Forms.ToolStripMenuItem();
			cmf_Cut = new System.Windows.Forms.ToolStripMenuItem();
			cmf_Copy = new System.Windows.Forms.ToolStripMenuItem();
			cmf_Paste = new System.Windows.Forms.ToolStripMenuItem();
			cmf_Delete = new System.Windows.Forms.ToolStripMenuItem();
			cmf_Color = new System.Windows.Forms.ToolStripMenuItem();
			cmf_Font = new System.Windows.Forms.ToolStripMenuItem();
			cmf_LeftAlign = new System.Windows.Forms.ToolStripMenuItem();
			cmf_AlignCenter = new System.Windows.Forms.ToolStripMenuItem();
			cmf_AlignRight = new System.Windows.Forms.ToolStripMenuItem();
			cmf_ClearFieldValue = new System.Windows.Forms.ToolStripMenuItem();
			toolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem();
			toolStripMenuItem3 = new System.Windows.Forms.ToolStripMenuItem();
			toolStripMenuItem11 = new System.Windows.Forms.ToolStripMenuItem();
			toolStripMenuItem22 = new System.Windows.Forms.ToolStripMenuItem();
			toolStripMenuItem23 = new System.Windows.Forms.ToolStripMenuItem();
			toolStripMenuItem24 = new System.Windows.Forms.ToolStripMenuItem();
			cmEditComment = new System.Windows.Forms.ToolStripMenuItem();
			cmDeleteComment = new System.Windows.Forms.ToolStripMenuItem();
			btnInsertTable = new System.Windows.Forms.ToolStripButton();
			btnInsertComment = new System.Windows.Forms.ToolStripButton();
			btnInsertFileContent = new System.Windows.Forms.ToolStripButton();
			btnInsertSpecifyCharacter = new System.Windows.Forms.ToolStripButton();
			btnInsertImage = new System.Windows.Forms.ToolStripButton();
			btnInsertMedicalExpression = new System.Windows.Forms.ToolStripButton();
			toolStripMenuItem39 = new System.Windows.Forms.ToolStripMenuItem();
			cmc_CellFont = new System.Windows.Forms.ToolStripMenuItem();
			btnInsertMedicalExpress = new System.Windows.Forms.ToolStripButton();
			toolStripButton2 = new System.Windows.Forms.ToolStripButton();
			cmImage = new System.Windows.Forms.ContextMenuStrip(components);
			toolStripSeparator27 = new System.Windows.Forms.ToolStripSeparator();
			toolStripSeparator28 = new System.Windows.Forms.ToolStripSeparator();
			toolStripSeparator31 = new System.Windows.Forms.ToolStripSeparator();
			toolStripSeparator2 = new System.Windows.Forms.ToolStripSeparator();
			cmTableCell = new System.Windows.Forms.ContextMenuStrip(components);
			toolStripSeparator34 = new System.Windows.Forms.ToolStripSeparator();
			toolStripMenuItem14 = new System.Windows.Forms.ToolStripSeparator();
			toolStripSeparator37 = new System.Windows.Forms.ToolStripSeparator();
			cmc_CellContentAlign = new System.Windows.Forms.ToolStripMenuItem();
			cmc_Insert = new System.Windows.Forms.ToolStripMenuItem();
			toolStripSeparator38 = new System.Windows.Forms.ToolStripSeparator();
			toolStripSeparator39 = new System.Windows.Forms.ToolStripSeparator();
			tvwNavigate = new System.Windows.Forms.TreeView();
			mySplitContainer = new System.Windows.Forms.SplitContainer();
			tabFunction = new System.Windows.Forms.TabControl();
			tpNavigate = new System.Windows.Forms.TabPage();
			tpTrack = new System.Windows.Forms.TabPage();
			lstTrack = new System.Windows.Forms.ListBox();
			cmField = new System.Windows.Forms.ContextMenuStrip(components);
			toolStripSeparator3 = new System.Windows.Forms.ToolStripSeparator();
			toolStripSeparator11 = new System.Windows.Forms.ToolStripSeparator();
			toolStripSeparator22 = new System.Windows.Forms.ToolStripSeparator();
			toolStripSeparator23 = new System.Windows.Forms.ToolStripSeparator();
			toolStripMenuItem2 = new System.Windows.Forms.ToolStripMenuItem();
			pnlStatus = new System.Windows.Forms.Panel();
			tbZoom = new System.Windows.Forms.TrackBar();
			lblZoom = new System.Windows.Forms.Label();
			lblInsState = new System.Windows.Forms.Label();
			lblPosition = new System.Windows.Forms.Label();
			pnlPrintPreview = new System.Windows.Forms.Panel();
			myPreviewControl = new DCSoft.Writer.Controls.WriterPrintPreviewControl();
			cmComment = new System.Windows.Forms.ContextMenuStrip(components);
			pnlMainContainer = new System.Windows.Forms.ToolStripContainer();
			insertbar = new System.Windows.Forms.ToolStrip();
			toolStripSeparator17 = new System.Windows.Forms.ToolStripSeparator();
			newcontrols = new System.Windows.Forms.ToolStrip();
			btnNsoInsertTextBox = new System.Windows.Forms.ToolStripButton();
			btnNsoInsertNumberBox = new System.Windows.Forms.ToolStripButton();
			btnNsoInsertCheckbox = new System.Windows.Forms.ToolStripButton();
			toolStripSeparator30 = new System.Windows.Forms.ToolStripSeparator();
			btnNsoInsertList = new System.Windows.Forms.ToolStripButton();
			btnNsoInsertRadio = new System.Windows.Forms.ToolStripButton();
			btnNsoInsertCombobox = new System.Windows.Forms.ToolStripButton();
			toolStripSeparator32 = new System.Windows.Forms.ToolStripSeparator();
			btnNsoInsertMulListBox = new System.Windows.Forms.ToolStripButton();
			btnNsoInsertMulCombobox = new System.Windows.Forms.ToolStripButton();
			btnNsoInsertDateTimeBox = new System.Windows.Forms.ToolStripButton();
			toolStripSeparator35 = new System.Windows.Forms.ToolStripSeparator();
			cmSingleCopy = new System.Windows.Forms.ContextMenuStrip(components);
			cmParagraph = new System.Windows.Forms.ToolStripMenuItem();
			cmEdit.SuspendLayout();
			mainMenuStrip.SuspendLayout();
			standardbar.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)myCommandControler).BeginInit();
			cmImage.SuspendLayout();
			cmTableCell.SuspendLayout();
			mySplitContainer.Panel1.SuspendLayout();
			mySplitContainer.Panel2.SuspendLayout();
			mySplitContainer.SuspendLayout();
			tabFunction.SuspendLayout();
			tpNavigate.SuspendLayout();
			tpTrack.SuspendLayout();
			cmField.SuspendLayout();
			pnlStatus.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)tbZoom).BeginInit();
			pnlPrintPreview.SuspendLayout();
			cmComment.SuspendLayout();
			pnlMainContainer.ContentPanel.SuspendLayout();
			pnlMainContainer.TopToolStripPanel.SuspendLayout();
			pnlMainContainer.SuspendLayout();
			insertbar.SuspendLayout();
			newcontrols.SuspendLayout();
			cmSingleCopy.SuspendLayout();
			SuspendLayout();
			myEditControl.AllowDrop = true;
			myEditControl.BackColor = System.Drawing.Color.FromArgb(135, 169, 214);
			myEditControl.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
			myEditControl.Dock = System.Windows.Forms.DockStyle.Fill;
			myEditControl.Location = new System.Drawing.Point(0, 0);
			myEditControl.Name = "myEditControl";
			myEditControl.Size = new System.Drawing.Size(470, 257);
			myEditControl.TabIndex = 8;
			myEditControl.DocumentNavigateContentChanged += new DCSoft.Writer.WriterEventHandler(myEditControl_DocumentNavigateContentChanged);
			myEditControl.SelectionChanged += new DCSoft.Writer.WriterEventHandler(myEditControl_SelectionChanged);
			myEditControl.Load += new System.EventHandler(myEditControl_Load);
			cmEdit.Items.AddRange(new System.Windows.Forms.ToolStripItem[19]
			{
				cmRedo,
				cmUndo,
				toolStripMenuItem4,
				cmCut,
				cmCopy,
				cmPaste,
				cmCopyWithFormat,
				cmDelete,
				toolStripMenuItem5,
				cmColor,
				cmFont,
				toolStripMenuItem6,
				cmParagraph,
				cmAlignLeft,
				cmAlignCenter,
				cmAlignRight,
				toolStripMenuItem8,
				toolStripMenuItem26,
				cmDebug
			});
			cmEdit.Name = "cmEdit";
			cmEdit.Size = new System.Drawing.Size(181, 380);
			cmEdit.Opening += new System.ComponentModel.CancelEventHandler(cmEdit_Opening);
			myCommandControler.SetCommandName(cmRedo, "Redo");
			cmRedo.Image = (System.Drawing.Image)resources.GetObject("cmRedo.Image");
			cmRedo.Name = "cmRedo";
			cmRedo.Size = new System.Drawing.Size(180, 22);
			cmRedo.Text = "重复";
			myCommandControler.SetCommandName(cmUndo, "Undo");
			cmUndo.Image = (System.Drawing.Image)resources.GetObject("cmUndo.Image");
			cmUndo.Name = "cmUndo";
			cmUndo.Size = new System.Drawing.Size(180, 22);
			cmUndo.Text = "撤销";
			toolStripMenuItem4.Name = "toolStripMenuItem4";
			toolStripMenuItem4.Size = new System.Drawing.Size(177, 6);
			myCommandControler.SetCommandName(cmCut, "Cut");
			cmCut.Image = (System.Drawing.Image)resources.GetObject("cmCut.Image");
			cmCut.Name = "cmCut";
			cmCut.Size = new System.Drawing.Size(180, 22);
			cmCut.Text = "剪切";
			myCommandControler.SetCommandName(cmCopy, "Copy");
			cmCopy.Image = (System.Drawing.Image)resources.GetObject("cmCopy.Image");
			cmCopy.Name = "cmCopy";
			cmCopy.Size = new System.Drawing.Size(180, 22);
			cmCopy.Text = "复制";
			myCommandControler.SetCommandName(cmPaste, "Paste");
			cmPaste.Image = (System.Drawing.Image)resources.GetObject("cmPaste.Image");
			cmPaste.Name = "cmPaste";
			cmPaste.Size = new System.Drawing.Size(180, 22);
			cmPaste.Text = "粘贴";
			cmCopyWithFormat.Name = "cmCopyWithFormat";
			cmCopyWithFormat.Size = new System.Drawing.Size(180, 22);
			cmCopyWithFormat.Text = "粘贴(保留原有格式)";
			cmCopyWithFormat.Visible = false;
			cmCopyWithFormat.Click += new System.EventHandler(cmCopyWithFormat_Click);
			myCommandControler.SetCommandName(cmDelete, "Delete");
			cmDelete.Image = (System.Drawing.Image)resources.GetObject("cmDelete.Image");
			cmDelete.Name = "cmDelete";
			cmDelete.Size = new System.Drawing.Size(180, 22);
			cmDelete.Text = "删除";
			toolStripMenuItem5.Name = "toolStripMenuItem5";
			toolStripMenuItem5.Size = new System.Drawing.Size(177, 6);
			myCommandControler.SetCommandName(cmColor, "Color");
			cmColor.Name = "cmColor";
			cmColor.Size = new System.Drawing.Size(180, 22);
			cmColor.Text = "颜色";
			myCommandControler.SetCommandName(cmFont, "Font");
			cmFont.Image = (System.Drawing.Image)resources.GetObject("cmFont.Image");
			cmFont.Name = "cmFont";
			cmFont.Size = new System.Drawing.Size(180, 22);
			cmFont.Text = "字体...";
			toolStripMenuItem6.Name = "toolStripMenuItem6";
			toolStripMenuItem6.Size = new System.Drawing.Size(177, 6);
			myCommandControler.SetCommandName(cmAlignLeft, "AlignLeft");
			cmAlignLeft.Image = (System.Drawing.Image)resources.GetObject("cmAlignLeft.Image");
			cmAlignLeft.Name = "cmAlignLeft";
			cmAlignLeft.Size = new System.Drawing.Size(180, 22);
			cmAlignLeft.Text = "左对齐";
			myCommandControler.SetCommandName(cmAlignCenter, "AlignCenter");
			cmAlignCenter.Image = (System.Drawing.Image)resources.GetObject("cmAlignCenter.Image");
			cmAlignCenter.Name = "cmAlignCenter";
			cmAlignCenter.Size = new System.Drawing.Size(180, 22);
			cmAlignCenter.Text = "居中对齐";
			myCommandControler.SetCommandName(cmAlignRight, "AlignRight");
			cmAlignRight.Image = (System.Drawing.Image)resources.GetObject("cmAlignRight.Image");
			cmAlignRight.Name = "cmAlignRight";
			cmAlignRight.Size = new System.Drawing.Size(180, 22);
			cmAlignRight.Text = "右对齐";
			toolStripMenuItem8.Name = "toolStripMenuItem8";
			toolStripMenuItem8.Size = new System.Drawing.Size(177, 6);
			myCommandControler.SetCommandName(toolStripMenuItem26, "ElementProperties");
			toolStripMenuItem26.Image = (System.Drawing.Image)resources.GetObject("toolStripMenuItem26.Image");
			toolStripMenuItem26.Name = "toolStripMenuItem26";
			toolStripMenuItem26.Size = new System.Drawing.Size(180, 22);
			toolStripMenuItem26.Text = "属性...";
			cmDebug.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[5]
			{
				执行命令ToolStripMenuItem,
				调试暑促和ToolStripMenuItem,
				系统设置ToolStripMenuItem,
				控件属性ToolStripMenuItem,
				元素属性ToolStripMenuItem
			});
			cmDebug.Name = "cmDebug";
			cmDebug.Size = new System.Drawing.Size(180, 22);
			cmDebug.Text = "调试";
			myCommandControler.SetCommandName(执行命令ToolStripMenuItem, "ExecuteCommand");
			执行命令ToolStripMenuItem.Name = "执行命令ToolStripMenuItem";
			执行命令ToolStripMenuItem.Size = new System.Drawing.Size(133, 22);
			执行命令ToolStripMenuItem.Text = "执行命令...";
			myCommandControler.SetCommandName(调试暑促和ToolStripMenuItem, "DebugOutputWindow");
			调试暑促和ToolStripMenuItem.Image = (System.Drawing.Image)resources.GetObject("调试暑促和ToolStripMenuItem.Image");
			调试暑促和ToolStripMenuItem.Name = "调试暑促和ToolStripMenuItem";
			调试暑促和ToolStripMenuItem.Size = new System.Drawing.Size(133, 22);
			调试暑促和ToolStripMenuItem.Text = "调试输出";
			myCommandControler.SetCommandName(系统设置ToolStripMenuItem, "DocumentOptions");
			系统设置ToolStripMenuItem.Name = "系统设置ToolStripMenuItem";
			系统设置ToolStripMenuItem.Size = new System.Drawing.Size(133, 22);
			系统设置ToolStripMenuItem.Text = "系统设置...";
			myCommandControler.SetCommandName(控件属性ToolStripMenuItem, "WriterControlProperties");
			控件属性ToolStripMenuItem.Name = "控件属性ToolStripMenuItem";
			控件属性ToolStripMenuItem.Size = new System.Drawing.Size(133, 22);
			控件属性ToolStripMenuItem.Text = "控件属性...";
			myCommandControler.SetCommandName(元素属性ToolStripMenuItem, "ElementProperties");
			元素属性ToolStripMenuItem.Image = (System.Drawing.Image)resources.GetObject("元素属性ToolStripMenuItem.Image");
			元素属性ToolStripMenuItem.Name = "元素属性ToolStripMenuItem";
			元素属性ToolStripMenuItem.Size = new System.Drawing.Size(133, 22);
			元素属性ToolStripMenuItem.Text = "元素属性...";
			mainMenuStrip.BackColor = System.Drawing.Color.FromArgb(160, 199, 255);
			mainMenuStrip.Dock = System.Windows.Forms.DockStyle.None;
			mainMenuStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[8]
			{
				menuPickList,
				menuEditMenu,
				menuViewMenu,
				menuInsertMenu,
				menuFormatMenu,
				menuTableMenu,
				mTools,
				menuHelpMenu
			});
			mainMenuStrip.Location = new System.Drawing.Point(0, 0);
			mainMenuStrip.Name = "mainMenuStrip";
			mainMenuStrip.Size = new System.Drawing.Size(644, 25);
			mainMenuStrip.TabIndex = 5;
			mainMenuStrip.Text = "menuStrip1";
			menuPickList.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[15]
			{
				menunewDoc,
				menuOpen,
				toolStripSeparator24,
				menuSave,
				menuSaveAs,
				toolStripSeparator19,
				menuPageDialog,
				menuPrintPreview,
				menuPrint,
				toolStripMenuItem7,
				toolStripSeparator25,
				menuExportToPDF,
				menuSetDocumentProperties,
				toolStripSeparator10,
				menuQuit
			});
			menuPickList.Name = "menuPickList";
			menuPickList.Size = new System.Drawing.Size(58, 21);
			menuPickList.Text = "文件(&F)";
			menunewDoc.Name = "menunewDoc";
			menunewDoc.Size = new System.Drawing.Size(143, 22);
			menunewDoc.Text = "新建...";
			menunewDoc.Click += new System.EventHandler(menunewDoc_Click);
			menuOpen.Image = (System.Drawing.Image)resources.GetObject("menuOpen.Image");
			menuOpen.Name = "menuOpen";
			menuOpen.Size = new System.Drawing.Size(143, 22);
			menuOpen.Text = "打开...";
			menuOpen.Click += new System.EventHandler(menuOpen_Click);
			toolStripSeparator24.Name = "toolStripSeparator24";
			toolStripSeparator24.Size = new System.Drawing.Size(140, 6);
			myCommandControler.SetCommandName(menuSave, "FileSave");
			menuSave.Image = (System.Drawing.Image)resources.GetObject("menuSave.Image");
			menuSave.Name = "menuSave";
			menuSave.Size = new System.Drawing.Size(143, 22);
			menuSave.Text = "保存";
			myCommandControler.SetCommandName(menuSaveAs, "FileSaveAs");
			menuSaveAs.Image = (System.Drawing.Image)resources.GetObject("menuSaveAs.Image");
			menuSaveAs.Name = "menuSaveAs";
			menuSaveAs.Size = new System.Drawing.Size(143, 22);
			menuSaveAs.Text = "另存为...";
			toolStripSeparator19.Name = "toolStripSeparator19";
			toolStripSeparator19.Size = new System.Drawing.Size(140, 6);
			myCommandControler.SetCommandName(menuPageDialog, "FilePageSettings");
			menuPageDialog.Image = (System.Drawing.Image)resources.GetObject("menuPageDialog.Image");
			menuPageDialog.Name = "menuPageDialog";
			menuPageDialog.Size = new System.Drawing.Size(143, 22);
			menuPageDialog.Text = "页面设置...";
			menuPrintPreview.Image = (System.Drawing.Image)resources.GetObject("menuPrintPreview.Image");
			menuPrintPreview.Name = "menuPrintPreview";
			menuPrintPreview.Size = new System.Drawing.Size(143, 22);
			menuPrintPreview.Text = "打印预览...";
			menuPrintPreview.Click += new System.EventHandler(mPrintPreview_Click);
			myCommandControler.SetCommandName(menuPrint, "FilePrint");
			menuPrint.Image = (System.Drawing.Image)resources.GetObject("menuPrint.Image");
			menuPrint.Name = "menuPrint";
			menuPrint.Size = new System.Drawing.Size(143, 22);
			menuPrint.Text = "打印(&P)...";
			myCommandControler.SetCommandName(toolStripMenuItem7, "ViewXMLSource");
			toolStripMenuItem7.Image = (System.Drawing.Image)resources.GetObject("toolStripMenuItem7.Image");
			toolStripMenuItem7.Name = "toolStripMenuItem7";
			toolStripMenuItem7.Size = new System.Drawing.Size(143, 22);
			toolStripMenuItem7.Text = "查看XML";
			toolStripSeparator25.Name = "toolStripSeparator25";
			toolStripSeparator25.Size = new System.Drawing.Size(140, 6);
			menuExportToPDF.Name = "menuExportToPDF";
			menuExportToPDF.Size = new System.Drawing.Size(143, 22);
			menuExportToPDF.Text = "输出成PDF...";
			menuExportToPDF.Click += new System.EventHandler(menuExportToPDF_Click);
			myCommandControler.SetCommandName(menuSetDocumentProperties, "DocumentInfo");
			menuSetDocumentProperties.Name = "menuSetDocumentProperties";
			menuSetDocumentProperties.Size = new System.Drawing.Size(143, 22);
			menuSetDocumentProperties.Text = "属性";
			toolStripSeparator10.Name = "toolStripSeparator10";
			toolStripSeparator10.Size = new System.Drawing.Size(140, 6);
			menuQuit.Name = "menuQuit";
			menuQuit.Size = new System.Drawing.Size(143, 22);
			menuQuit.Text = "退出";
			menuQuit.Click += new System.EventHandler(menuQuit_Click);
			menuEditMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[13]
			{
				menuUndo,
				menuRedo,
				toolStripSeparator4,
				menuCut,
				menuCopy,
				menuPaste,
				menuPasteSpecial,
				toolStripSeparator29,
				menuResetAttributes,
				menuSelectAll,
				toolStripSeparator6,
				menuSearchDialog,
				menuDeleteComment
			});
			menuEditMenu.Name = "menuEditMenu";
			menuEditMenu.Size = new System.Drawing.Size(59, 21);
			menuEditMenu.Text = "编辑(&E)";
			myCommandControler.SetCommandName(menuUndo, "Undo");
			menuUndo.Image = (System.Drawing.Image)resources.GetObject("menuUndo.Image");
			menuUndo.Name = "menuUndo";
			menuUndo.Size = new System.Drawing.Size(150, 22);
			menuUndo.Text = "撤销(&U)";
			myCommandControler.SetCommandName(menuRedo, "Redo");
			menuRedo.Image = (System.Drawing.Image)resources.GetObject("menuRedo.Image");
			menuRedo.Name = "menuRedo";
			menuRedo.Size = new System.Drawing.Size(150, 22);
			menuRedo.Text = "重复(R)";
			toolStripSeparator4.Name = "toolStripSeparator4";
			toolStripSeparator4.Size = new System.Drawing.Size(147, 6);
			myCommandControler.SetCommandName(menuCut, "Cut");
			menuCut.Image = (System.Drawing.Image)resources.GetObject("menuCut.Image");
			menuCut.Name = "menuCut";
			menuCut.Size = new System.Drawing.Size(150, 22);
			menuCut.Text = "剪切(&T)";
			myCommandControler.SetCommandName(menuCopy, "Copy");
			menuCopy.Image = (System.Drawing.Image)resources.GetObject("menuCopy.Image");
			menuCopy.Name = "menuCopy";
			menuCopy.Size = new System.Drawing.Size(150, 22);
			menuCopy.Text = "复制(&C)";
			myCommandControler.SetCommandName(menuPaste, "Paste");
			menuPaste.Image = (System.Drawing.Image)resources.GetObject("menuPaste.Image");
			menuPaste.Name = "menuPaste";
			menuPaste.Size = new System.Drawing.Size(150, 22);
			menuPaste.Text = "粘贴(&P)";
			myCommandControler.SetCommandName(menuPasteSpecial, "SpecifyPaste");
			menuPasteSpecial.Image = (System.Drawing.Image)resources.GetObject("menuPasteSpecial.Image");
			menuPasteSpecial.Name = "menuPasteSpecial";
			menuPasteSpecial.Size = new System.Drawing.Size(150, 22);
			menuPasteSpecial.Text = "选择性粘贴...";
			toolStripSeparator29.Name = "toolStripSeparator29";
			toolStripSeparator29.Size = new System.Drawing.Size(147, 6);
			myCommandControler.SetCommandName(menuResetAttributes, "ClearFormat");
			menuResetAttributes.Image = (System.Drawing.Image)resources.GetObject("menuResetAttributes.Image");
			menuResetAttributes.Name = "menuResetAttributes";
			menuResetAttributes.Size = new System.Drawing.Size(150, 22);
			menuResetAttributes.Text = "清除格式";
			myCommandControler.SetCommandName(menuSelectAll, "SelectAll");
			menuSelectAll.Name = "menuSelectAll";
			menuSelectAll.Size = new System.Drawing.Size(150, 22);
			menuSelectAll.Text = "全选(&A)";
			toolStripSeparator6.Name = "toolStripSeparator6";
			toolStripSeparator6.Size = new System.Drawing.Size(147, 6);
			myCommandControler.SetCommandName(menuSearchDialog, "SearchReplace");
			menuSearchDialog.Image = (System.Drawing.Image)resources.GetObject("menuSearchDialog.Image");
			menuSearchDialog.Name = "menuSearchDialog";
			menuSearchDialog.Size = new System.Drawing.Size(150, 22);
			menuSearchDialog.Text = "查找和替换(&F)";
			menuSearchDialog.Visible = false;
			myCommandControler.SetCommandName(menuDeleteComment, "DeleteComment");
			menuDeleteComment.Image = (System.Drawing.Image)resources.GetObject("menuDeleteComment.Image");
			menuDeleteComment.Name = "menuDeleteComment";
			menuDeleteComment.Size = new System.Drawing.Size(150, 22);
			menuDeleteComment.Text = "删除批注";
			menuViewMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[17]
			{
				menuAvailableToolbars,
				menuStatusBarVisible,
				menuControlCodes,
				menuInsertPageHeader,
				menuInsertPageFooter,
				mHeaderBottomLine,
				menuZoom,
				mJumpPrint,
				toolStripSeparator18,
				mPageViewMode,
				mNormalViewMode,
				toolStripSeparator21,
				mCleanViewMode,
				mComplexViewMode,
				toolStripMenuItem17,
				mDocumentGridLine,
				mDebugout
			});
			menuViewMenu.Name = "menuViewMenu";
			menuViewMenu.Size = new System.Drawing.Size(60, 21);
			menuViewMenu.Text = "视图(&V)";
			menuAvailableToolbars.Checked = true;
			menuAvailableToolbars.CheckOnClick = true;
			menuAvailableToolbars.CheckState = System.Windows.Forms.CheckState.Checked;
			menuAvailableToolbars.Name = "menuAvailableToolbars";
			menuAvailableToolbars.Size = new System.Drawing.Size(148, 22);
			menuAvailableToolbars.Text = "工具栏";
			menuAvailableToolbars.Click += new System.EventHandler(menuAvailableToolbars_Click);
			menuStatusBarVisible.Checked = true;
			menuStatusBarVisible.CheckOnClick = true;
			menuStatusBarVisible.CheckState = System.Windows.Forms.CheckState.Checked;
			menuStatusBarVisible.Name = "menuStatusBarVisible";
			menuStatusBarVisible.Size = new System.Drawing.Size(148, 22);
			menuStatusBarVisible.Text = "状态栏";
			menuStatusBarVisible.Click += new System.EventHandler(menuStatusBarVisible_Click);
			menuControlCodes.CheckOnClick = true;
			menuControlCodes.Name = "menuControlCodes";
			menuControlCodes.Size = new System.Drawing.Size(148, 22);
			menuControlCodes.Text = "显示格式标记";
			menuControlCodes.Click += new System.EventHandler(menuControlCodes_Click);
			menuInsertPageHeader.Name = "menuInsertPageHeader";
			menuInsertPageHeader.Size = new System.Drawing.Size(148, 22);
			menuInsertPageHeader.Text = "页眉";
			menuInsertPageHeader.Click += new System.EventHandler(menuInsertPageHeader_Click);
			menuInsertPageFooter.Name = "menuInsertPageFooter";
			menuInsertPageFooter.Size = new System.Drawing.Size(148, 22);
			menuInsertPageFooter.Text = "页脚";
			menuInsertPageFooter.Click += new System.EventHandler(menuInsertPageFooter_Click);
			myCommandControler.SetCommandName(mHeaderBottomLine, "HeaderBottomLineVisible");
			mHeaderBottomLine.Name = "mHeaderBottomLine";
			mHeaderBottomLine.Size = new System.Drawing.Size(148, 22);
			mHeaderBottomLine.Text = "页眉下边缘线";
			menuZoom.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[4]
			{
				menuZoomIn,
				menuZoomOut,
				menuZoomReset,
				menuZoomAuto
			});
			menuZoom.Name = "menuZoom";
			menuZoom.Size = new System.Drawing.Size(148, 22);
			menuZoom.Text = "显示比例";
			myCommandControler.SetCommandName(menuZoomIn, "ZoomIn");
			menuZoomIn.Image = (System.Drawing.Image)resources.GetObject("menuZoomIn.Image");
			menuZoomIn.Name = "menuZoomIn";
			menuZoomIn.Size = new System.Drawing.Size(148, 22);
			menuZoomIn.Text = "放大";
			myCommandControler.SetCommandName(menuZoomOut, "ZoomOut");
			menuZoomOut.Image = (System.Drawing.Image)resources.GetObject("menuZoomOut.Image");
			menuZoomOut.Name = "menuZoomOut";
			menuZoomOut.Size = new System.Drawing.Size(148, 22);
			menuZoomOut.Text = "缩小";
			myCommandControler.SetCommandName(menuZoomReset, "ZoomReset");
			menuZoomReset.Name = "menuZoomReset";
			menuZoomReset.Size = new System.Drawing.Size(148, 22);
			menuZoomReset.Text = "恢复原始大小";
			menuZoomAuto.Name = "menuZoomAuto";
			menuZoomAuto.Size = new System.Drawing.Size(148, 22);
			menuZoomAuto.Text = "自动适应大小";
			menuZoomAuto.Click += new System.EventHandler(menuZoomAuto_Click);
			myCommandControler.SetCommandName(mJumpPrint, "JumpPrintMode");
			mJumpPrint.Name = "mJumpPrint";
			mJumpPrint.Size = new System.Drawing.Size(148, 22);
			mJumpPrint.Text = "续打模式";
			toolStripSeparator18.Name = "toolStripSeparator18";
			toolStripSeparator18.Size = new System.Drawing.Size(145, 6);
			myCommandControler.SetCommandName(mPageViewMode, "PageViewMode");
			mPageViewMode.Name = "mPageViewMode";
			mPageViewMode.Size = new System.Drawing.Size(148, 22);
			mPageViewMode.Text = "页面视图模式";
			myCommandControler.SetCommandName(mNormalViewMode, "NormalViewMode");
			mNormalViewMode.Name = "mNormalViewMode";
			mNormalViewMode.Size = new System.Drawing.Size(148, 22);
			mNormalViewMode.Text = "普通视图模式";
			toolStripSeparator21.Name = "toolStripSeparator21";
			toolStripSeparator21.Size = new System.Drawing.Size(145, 6);
			myCommandControler.SetCommandName(mCleanViewMode, "CleanViewMode");
			mCleanViewMode.Name = "mCleanViewMode";
			mCleanViewMode.Size = new System.Drawing.Size(148, 22);
			mCleanViewMode.Text = "整洁视图模式";
			myCommandControler.SetCommandName(mComplexViewMode, "ComplexViewMode");
			mComplexViewMode.Name = "mComplexViewMode";
			mComplexViewMode.Size = new System.Drawing.Size(148, 22);
			mComplexViewMode.Text = "复杂视图模式";
			toolStripMenuItem17.Name = "toolStripMenuItem17";
			toolStripMenuItem17.Size = new System.Drawing.Size(145, 6);
			myCommandControler.SetCommandName(mDocumentGridLine, "DocumentGridLineVisible");
			mDocumentGridLine.Image = (System.Drawing.Image)resources.GetObject("mDocumentGridLine.Image");
			mDocumentGridLine.Name = "mDocumentGridLine";
			mDocumentGridLine.Size = new System.Drawing.Size(148, 22);
			mDocumentGridLine.Text = "文档网格线";
			myCommandControler.SetCommandName(mDebugout, "DebugOutputWindow");
			mDebugout.Image = (System.Drawing.Image)resources.GetObject("mDebugout.Image");
			mDebugout.Name = "mDebugout";
			mDebugout.Size = new System.Drawing.Size(148, 22);
			mDebugout.Text = "调试输出";
			menuInsertMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[8]
			{
				menuInsertBreak,
				menuFieldMenu,
				menuInsertSymbol,
				menuInsertAnnotation,
				menuGraphicMenu,
				menuInsertDoc,
				menuInsertMediFormula,
				toolStripMenuItem27
			});
			menuInsertMenu.Name = "menuInsertMenu";
			menuInsertMenu.Size = new System.Drawing.Size(44, 21);
			menuInsertMenu.Text = "插入";
			myCommandControler.SetCommandName(menuInsertBreak, "InsertHorizontalLine");
			menuInsertBreak.Name = "menuInsertBreak";
			menuInsertBreak.Size = new System.Drawing.Size(133, 22);
			menuInsertBreak.Text = "分隔符";
			menuFieldMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[3]
			{
				menuInsertDateTime,
				menuInsertPageIndex,
				menuInsertInputField
			});
			menuFieldMenu.Name = "menuFieldMenu";
			menuFieldMenu.Size = new System.Drawing.Size(133, 22);
			menuFieldMenu.Text = "域";
			myCommandControler.SetCommandName(menuInsertDateTime, "InsertDateTimeField");
			menuInsertDateTime.Image = (System.Drawing.Image)resources.GetObject("menuInsertDateTime.Image");
			menuInsertDateTime.Name = "menuInsertDateTime";
			menuInsertDateTime.Size = new System.Drawing.Size(109, 22);
			menuInsertDateTime.Text = "日期...";
			myCommandControler.SetCommandName(menuInsertPageIndex, "InsertPageInfo");
			menuInsertPageIndex.Name = "menuInsertPageIndex";
			menuInsertPageIndex.Size = new System.Drawing.Size(109, 22);
			menuInsertPageIndex.Text = "页码";
			myCommandControler.SetCommandName(menuInsertInputField, "InsertInputField");
			menuInsertInputField.Name = "menuInsertInputField";
			menuInsertInputField.Size = new System.Drawing.Size(109, 22);
			menuInsertInputField.Text = "其他...";
			myCommandControler.SetCommandName(menuInsertSymbol, "InsertSpecifyCharacter");
			menuInsertSymbol.Name = "menuInsertSymbol";
			menuInsertSymbol.Size = new System.Drawing.Size(133, 22);
			menuInsertSymbol.Text = "特殊字符";
			myCommandControler.SetCommandName(menuInsertAnnotation, "InsertComment");
			menuInsertAnnotation.Image = (System.Drawing.Image)resources.GetObject("menuInsertAnnotation.Image");
			menuInsertAnnotation.Name = "menuInsertAnnotation";
			menuInsertAnnotation.Size = new System.Drawing.Size(133, 22);
			menuInsertAnnotation.Text = "批注...";
			myCommandControler.SetCommandName(menuGraphicMenu, "InsertImage");
			menuGraphicMenu.Image = (System.Drawing.Image)resources.GetObject("menuGraphicMenu.Image");
			menuGraphicMenu.Name = "menuGraphicMenu";
			menuGraphicMenu.Size = new System.Drawing.Size(133, 22);
			menuGraphicMenu.Text = "图片...";
			menuInsertDoc.Name = "menuInsertDoc";
			menuInsertDoc.Size = new System.Drawing.Size(133, 22);
			menuInsertDoc.Text = "文件...";
			menuInsertDoc.Click += new System.EventHandler(menuInsertDoc_Click);
			myCommandControler.SetCommandName(menuInsertMediFormula, "InsertMedicalExpression");
			menuInsertMediFormula.Name = "menuInsertMediFormula";
			menuInsertMediFormula.Size = new System.Drawing.Size(133, 22);
			menuInsertMediFormula.Text = "医学公式...";
			myCommandControler.SetCommandName(toolStripMenuItem27, "InsertPageBreak");
			toolStripMenuItem27.Image = (System.Drawing.Image)resources.GetObject("toolStripMenuItem27.Image");
			toolStripMenuItem27.Name = "toolStripMenuItem27";
			toolStripMenuItem27.Size = new System.Drawing.Size(133, 22);
			toolStripMenuItem27.Text = "分页符";
			menuFormatMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[18]
			{
				menuFontDialog,
				menuParagraphDialog,
				menuBulletsAndNumberingDialog,
				mTextColor,
				mBackColor,
				toolStripSeparator7,
				mSup,
				mSub,
				toolStripSeparator8,
				mAlignLeft,
				mCenterAlign,
				mRightAlign,
				toolStripSeparator9,
				mNumerList,
				mBulleteList,
				mFirstIndent,
				toolStripSeparator26,
				mFieldHighlight
			});
			menuFormatMenu.Name = "menuFormatMenu";
			menuFormatMenu.Size = new System.Drawing.Size(58, 21);
			menuFormatMenu.Text = "格式(&F)";
			myCommandControler.SetCommandName(menuFontDialog, "Font");
			menuFontDialog.Image = (System.Drawing.Image)resources.GetObject("menuFontDialog.Image");
			menuFontDialog.Name = "menuFontDialog";
			menuFontDialog.Size = new System.Drawing.Size(172, 22);
			menuFontDialog.Text = "字体...";
			myCommandControler.SetCommandName(menuParagraphDialog, "ParagraphFormat");
			menuParagraphDialog.Name = "menuParagraphDialog";
			menuParagraphDialog.Size = new System.Drawing.Size(172, 22);
			menuParagraphDialog.Text = "段落...";
			myCommandControler.SetCommandName(menuBulletsAndNumberingDialog, "ParagraphListStyle");
			menuBulletsAndNumberingDialog.Name = "menuBulletsAndNumberingDialog";
			menuBulletsAndNumberingDialog.Size = new System.Drawing.Size(172, 22);
			menuBulletsAndNumberingDialog.Text = "项目符号和编号";
			myCommandControler.SetCommandName(mTextColor, "Color");
			mTextColor.Name = "mTextColor";
			mTextColor.Size = new System.Drawing.Size(172, 22);
			mTextColor.Text = "文本颜色";
			myCommandControler.SetCommandName(mBackColor, "BorderBackgroundFormat");
			mBackColor.Name = "mBackColor";
			mBackColor.Size = new System.Drawing.Size(172, 22);
			mBackColor.Text = "边框和底纹...";
			toolStripSeparator7.Name = "toolStripSeparator7";
			toolStripSeparator7.Size = new System.Drawing.Size(169, 6);
			myCommandControler.SetCommandName(mSup, "Superscript");
			mSup.Image = (System.Drawing.Image)resources.GetObject("mSup.Image");
			mSup.Name = "mSup";
			mSup.Size = new System.Drawing.Size(172, 22);
			mSup.Text = "上标";
			myCommandControler.SetCommandName(mSub, "Subscript");
			mSub.Image = (System.Drawing.Image)resources.GetObject("mSub.Image");
			mSub.Name = "mSub";
			mSub.Size = new System.Drawing.Size(172, 22);
			mSub.Text = "下标";
			toolStripSeparator8.Name = "toolStripSeparator8";
			toolStripSeparator8.Size = new System.Drawing.Size(169, 6);
			myCommandControler.SetCommandName(mAlignLeft, "AlignLeft");
			mAlignLeft.Image = (System.Drawing.Image)resources.GetObject("mAlignLeft.Image");
			mAlignLeft.Name = "mAlignLeft";
			mAlignLeft.Size = new System.Drawing.Size(172, 22);
			mAlignLeft.Text = "左对齐";
			myCommandControler.SetCommandName(mCenterAlign, "AlignCenter");
			mCenterAlign.Image = (System.Drawing.Image)resources.GetObject("mCenterAlign.Image");
			mCenterAlign.Name = "mCenterAlign";
			mCenterAlign.Size = new System.Drawing.Size(172, 22);
			mCenterAlign.Text = "居中对齐";
			myCommandControler.SetCommandName(mRightAlign, "AlignRight");
			mRightAlign.Image = (System.Drawing.Image)resources.GetObject("mRightAlign.Image");
			mRightAlign.Name = "mRightAlign";
			mRightAlign.Size = new System.Drawing.Size(172, 22);
			mRightAlign.Text = "右对齐";
			toolStripSeparator9.Name = "toolStripSeparator9";
			toolStripSeparator9.Size = new System.Drawing.Size(169, 6);
			myCommandControler.SetCommandName(mNumerList, "NumberedList");
			mNumerList.Image = (System.Drawing.Image)resources.GetObject("mNumerList.Image");
			mNumerList.Name = "mNumerList";
			mNumerList.Size = new System.Drawing.Size(172, 22);
			mNumerList.Text = "数字项目样式";
			myCommandControler.SetCommandName(mBulleteList, "BulletedList");
			mBulleteList.Image = (System.Drawing.Image)resources.GetObject("mBulleteList.Image");
			mBulleteList.Name = "mBulleteList";
			mBulleteList.Size = new System.Drawing.Size(172, 22);
			mBulleteList.Text = "圆点项目样式";
			myCommandControler.SetCommandName(mFirstIndent, "FirstLineIndent");
			mFirstIndent.Image = (System.Drawing.Image)resources.GetObject("mFirstIndent.Image");
			mFirstIndent.Name = "mFirstIndent";
			mFirstIndent.Size = new System.Drawing.Size(172, 22);
			mFirstIndent.Text = "段首缩进";
			toolStripSeparator26.Name = "toolStripSeparator26";
			toolStripSeparator26.Size = new System.Drawing.Size(169, 6);
			mFieldHighlight.CheckOnClick = true;
			mFieldHighlight.Name = "mFieldHighlight";
			mFieldHighlight.Size = new System.Drawing.Size(172, 22);
			mFieldHighlight.Text = "输入域淡蓝色背景";
			mFieldHighlight.Click += new System.EventHandler(mFieldHighlight_Click);
			menuTableMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[15]
			{
				menuTableInsertMenu,
				menuTableDeleteMenu,
				menuTableSelectMenu,
				menuMergeCells,
				menuSplitCell,
				menuProtect,
				menuUnSetCellsReadOnly,
				menuHeadingRowsRepeat,
				toolStripSeparator20,
				mCellAlign,
				toolStripSeparator16,
				menuTableDialog,
				toolStripMenuItem12,
				toolStripMenuItem13,
				menuTableBoundaries
			});
			menuTableMenu.Name = "menuTableMenu";
			menuTableMenu.Size = new System.Drawing.Size(44, 21);
			menuTableMenu.Text = "表格";
			menuTableInsertMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[5]
			{
				menuInsertTableElement,
				toolStripMenuItem10,
				toolStripMenuItem15,
				toolStripMenuItem16,
				toolStripMenuItem18
			});
			menuTableInsertMenu.Name = "menuTableInsertMenu";
			menuTableInsertMenu.Size = new System.Drawing.Size(184, 22);
			menuTableInsertMenu.Text = "插入";
			myCommandControler.SetCommandName(menuInsertTableElement, "Table_InsertTable");
			menuInsertTableElement.Image = (System.Drawing.Image)resources.GetObject("menuInsertTableElement.Image");
			menuInsertTableElement.Name = "menuInsertTableElement";
			menuInsertTableElement.Size = new System.Drawing.Size(172, 22);
			menuInsertTableElement.Text = "插入表格...";
			myCommandControler.SetCommandName(toolStripMenuItem10, "Table_InsertRowUp");
			toolStripMenuItem10.Image = (System.Drawing.Image)resources.GetObject("toolStripMenuItem10.Image");
			toolStripMenuItem10.Name = "toolStripMenuItem10";
			toolStripMenuItem10.Size = new System.Drawing.Size(172, 22);
			toolStripMenuItem10.Text = "在上面插入表格行";
			myCommandControler.SetCommandName(toolStripMenuItem15, "Table_InsertRowDown");
			toolStripMenuItem15.Image = (System.Drawing.Image)resources.GetObject("toolStripMenuItem15.Image");
			toolStripMenuItem15.Name = "toolStripMenuItem15";
			toolStripMenuItem15.Size = new System.Drawing.Size(172, 22);
			toolStripMenuItem15.Text = "在下面插入表格行";
			myCommandControler.SetCommandName(toolStripMenuItem16, "Table_InsertColumnLeft");
			toolStripMenuItem16.Image = (System.Drawing.Image)resources.GetObject("toolStripMenuItem16.Image");
			toolStripMenuItem16.Name = "toolStripMenuItem16";
			toolStripMenuItem16.Size = new System.Drawing.Size(172, 22);
			toolStripMenuItem16.Text = "在左边插入表格列";
			myCommandControler.SetCommandName(toolStripMenuItem18, "Table_InsertColumnRight");
			toolStripMenuItem18.Image = (System.Drawing.Image)resources.GetObject("toolStripMenuItem18.Image");
			toolStripMenuItem18.Name = "toolStripMenuItem18";
			toolStripMenuItem18.Size = new System.Drawing.Size(172, 22);
			toolStripMenuItem18.Text = "在右边插入表格列";
			myCommandControler.SetCommandName(menuTableDeleteMenu, "Table_DeleteTable");
			menuTableDeleteMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[3]
			{
				toolStripMenuItem19,
				toolStripMenuItem20,
				toolStripMenuItem21
			});
			menuTableDeleteMenu.Name = "menuTableDeleteMenu";
			menuTableDeleteMenu.Size = new System.Drawing.Size(184, 22);
			menuTableDeleteMenu.Text = "删除";
			myCommandControler.SetCommandName(toolStripMenuItem19, "Table_DeleteTable");
			toolStripMenuItem19.Name = "toolStripMenuItem19";
			toolStripMenuItem19.Size = new System.Drawing.Size(124, 22);
			toolStripMenuItem19.Text = "删除表格";
			myCommandControler.SetCommandName(toolStripMenuItem20, "Table_DeleteRow");
			toolStripMenuItem20.Image = (System.Drawing.Image)resources.GetObject("toolStripMenuItem20.Image");
			toolStripMenuItem20.Name = "toolStripMenuItem20";
			toolStripMenuItem20.Size = new System.Drawing.Size(124, 22);
			toolStripMenuItem20.Text = "删除行";
			myCommandControler.SetCommandName(toolStripMenuItem21, "Table_DeleteColumn");
			toolStripMenuItem21.Image = (System.Drawing.Image)resources.GetObject("toolStripMenuItem21.Image");
			toolStripMenuItem21.Name = "toolStripMenuItem21";
			toolStripMenuItem21.Size = new System.Drawing.Size(124, 22);
			toolStripMenuItem21.Text = "删除列";
			menuTableSelectMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[3]
			{
				menuSelectTable,
				menuSelectRow,
				menuSelectCell
			});
			menuTableSelectMenu.Name = "menuTableSelectMenu";
			menuTableSelectMenu.Size = new System.Drawing.Size(184, 22);
			menuTableSelectMenu.Text = "选择";
			menuTableSelectMenu.Click += new System.EventHandler(menuTableSelectMenu_Click);
			menuSelectTable.Name = "menuSelectTable";
			menuSelectTable.Size = new System.Drawing.Size(112, 22);
			menuSelectTable.Text = "表格";
			menuSelectTable.Click += new System.EventHandler(menuSelectTable_Click);
			menuSelectRow.Name = "menuSelectRow";
			menuSelectRow.Size = new System.Drawing.Size(112, 22);
			menuSelectRow.Text = "行";
			menuSelectRow.Click += new System.EventHandler(menuSelectRow_Click);
			menuSelectCell.Name = "menuSelectCell";
			menuSelectCell.Size = new System.Drawing.Size(112, 22);
			menuSelectCell.Text = "单元格";
			menuSelectCell.Click += new System.EventHandler(menuSelectCell_Click);
			myCommandControler.SetCommandName(menuMergeCells, "Table_MergeCell");
			menuMergeCells.Image = (System.Drawing.Image)resources.GetObject("menuMergeCells.Image");
			menuMergeCells.Name = "menuMergeCells";
			menuMergeCells.Size = new System.Drawing.Size(184, 22);
			menuMergeCells.Text = "合并单元格";
			myCommandControler.SetCommandName(menuSplitCell, "Table_SplitCell");
			menuSplitCell.Image = (System.Drawing.Image)resources.GetObject("menuSplitCell.Image");
			menuSplitCell.Name = "menuSplitCell";
			menuSplitCell.Size = new System.Drawing.Size(184, 22);
			menuSplitCell.Text = "拆分单元格";
			menuProtect.Name = "menuProtect";
			menuProtect.Size = new System.Drawing.Size(184, 22);
			menuProtect.Text = "单元格保护";
			menuProtect.Click += new System.EventHandler(menuProtect_Click);
			menuUnSetCellsReadOnly.Name = "menuUnSetCellsReadOnly";
			menuUnSetCellsReadOnly.Size = new System.Drawing.Size(184, 22);
			menuUnSetCellsReadOnly.Text = "取消单元格保护";
			menuUnSetCellsReadOnly.Click += new System.EventHandler(menuUnSetCellsReadOnly_Click);
			myCommandControler.SetCommandName(menuHeadingRowsRepeat, "Table_HeaderRow");
			menuHeadingRowsRepeat.Name = "menuHeadingRowsRepeat";
			menuHeadingRowsRepeat.Size = new System.Drawing.Size(184, 22);
			menuHeadingRowsRepeat.Text = "标题行重复";
			toolStripSeparator20.Name = "toolStripSeparator20";
			toolStripSeparator20.Size = new System.Drawing.Size(181, 6);
			mCellAlign.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[9]
			{
				mAlignTopLeft,
				mAlignTopCenter,
				mAlignTopRight,
				mAlignMiddleLeft,
				mAlignMiddleCenter,
				mAlignMiddleRight,
				mAlignBottomLeft,
				mAlignBottomCenter,
				mAlignBottomRight
			});
			mCellAlign.Name = "mCellAlign";
			mCellAlign.Size = new System.Drawing.Size(184, 22);
			mCellAlign.Text = "单元格内容对齐方式";
			myCommandControler.SetCommandName(mAlignTopLeft, "AlignTopLeft");
			mAlignTopLeft.Image = (System.Drawing.Image)resources.GetObject("mAlignTopLeft.Image");
			mAlignTopLeft.Name = "mAlignTopLeft";
			mAlignTopLeft.Size = new System.Drawing.Size(196, 22);
			mAlignTopLeft.Text = "顶端左对齐";
			myCommandControler.SetCommandName(mAlignTopCenter, "AlignTopCenter");
			mAlignTopCenter.Image = (System.Drawing.Image)resources.GetObject("mAlignTopCenter.Image");
			mAlignTopCenter.Name = "mAlignTopCenter";
			mAlignTopCenter.Size = new System.Drawing.Size(196, 22);
			mAlignTopCenter.Text = "顶端居中对齐";
			myCommandControler.SetCommandName(mAlignTopRight, "AlignTopRight");
			mAlignTopRight.Image = (System.Drawing.Image)resources.GetObject("mAlignTopRight.Image");
			mAlignTopRight.Name = "mAlignTopRight";
			mAlignTopRight.Size = new System.Drawing.Size(196, 22);
			mAlignTopRight.Text = "顶端右对齐";
			myCommandControler.SetCommandName(mAlignMiddleLeft, "AlignMiddleLeft");
			mAlignMiddleLeft.Image = (System.Drawing.Image)resources.GetObject("mAlignMiddleLeft.Image");
			mAlignMiddleLeft.Name = "mAlignMiddleLeft";
			mAlignMiddleLeft.Size = new System.Drawing.Size(196, 22);
			mAlignMiddleLeft.Text = "垂直居中左对齐";
			myCommandControler.SetCommandName(mAlignMiddleCenter, "AlignMiddleCenter");
			mAlignMiddleCenter.Image = (System.Drawing.Image)resources.GetObject("mAlignMiddleCenter.Image");
			mAlignMiddleCenter.Name = "mAlignMiddleCenter";
			mAlignMiddleCenter.Size = new System.Drawing.Size(196, 22);
			mAlignMiddleCenter.Text = "垂直居中水平居中对齐";
			myCommandControler.SetCommandName(mAlignMiddleRight, "AlignMiddleRight");
			mAlignMiddleRight.Image = (System.Drawing.Image)resources.GetObject("mAlignMiddleRight.Image");
			mAlignMiddleRight.Name = "mAlignMiddleRight";
			mAlignMiddleRight.Size = new System.Drawing.Size(196, 22);
			mAlignMiddleRight.Text = "垂直居中右对齐";
			myCommandControler.SetCommandName(mAlignBottomLeft, "AlignBottomLeft");
			mAlignBottomLeft.Image = (System.Drawing.Image)resources.GetObject("mAlignBottomLeft.Image");
			mAlignBottomLeft.Name = "mAlignBottomLeft";
			mAlignBottomLeft.Size = new System.Drawing.Size(196, 22);
			mAlignBottomLeft.Text = "底端左对齐";
			myCommandControler.SetCommandName(mAlignBottomCenter, "AlignBottomCenter");
			mAlignBottomCenter.Image = (System.Drawing.Image)resources.GetObject("mAlignBottomCenter.Image");
			mAlignBottomCenter.Name = "mAlignBottomCenter";
			mAlignBottomCenter.Size = new System.Drawing.Size(196, 22);
			mAlignBottomCenter.Text = "底端居中对齐";
			myCommandControler.SetCommandName(mAlignBottomRight, "AlignBottomRight");
			mAlignBottomRight.Image = (System.Drawing.Image)resources.GetObject("mAlignBottomRight.Image");
			mAlignBottomRight.Name = "mAlignBottomRight";
			mAlignBottomRight.Size = new System.Drawing.Size(196, 22);
			mAlignBottomRight.Text = "底端右对齐";
			toolStripSeparator16.Name = "toolStripSeparator16";
			toolStripSeparator16.Size = new System.Drawing.Size(181, 6);
			myCommandControler.SetCommandName(menuTableDialog, "TableProperties");
			menuTableDialog.Image = (System.Drawing.Image)resources.GetObject("menuTableDialog.Image");
			menuTableDialog.Name = "menuTableDialog";
			menuTableDialog.Size = new System.Drawing.Size(184, 22);
			menuTableDialog.Text = "表格属性...";
			myCommandControler.SetCommandName(toolStripMenuItem12, "TableRowProperties");
			toolStripMenuItem12.Image = (System.Drawing.Image)resources.GetObject("toolStripMenuItem12.Image");
			toolStripMenuItem12.Name = "toolStripMenuItem12";
			toolStripMenuItem12.Size = new System.Drawing.Size(184, 22);
			toolStripMenuItem12.Text = "表格行属性...";
			myCommandControler.SetCommandName(toolStripMenuItem13, "TableCellProperties");
			toolStripMenuItem13.Image = (System.Drawing.Image)resources.GetObject("toolStripMenuItem13.Image");
			toolStripMenuItem13.Name = "toolStripMenuItem13";
			toolStripMenuItem13.Size = new System.Drawing.Size(184, 22);
			toolStripMenuItem13.Text = "单元格属性...";
			menuTableBoundaries.CheckOnClick = true;
			menuTableBoundaries.Name = "menuTableBoundaries";
			menuTableBoundaries.Size = new System.Drawing.Size(184, 22);
			menuTableBoundaries.Text = "隐藏虚框";
			menuTableBoundaries.Click += new System.EventHandler(menuTableBoundaries_Click);
			mTools.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[4]
			{
				mVisibleExpression,
				mHighlight,
				toolStripMenuItem41,
				toolStripMenuItem42
			});
			mTools.Name = "mTools";
			mTools.Size = new System.Drawing.Size(44, 21);
			mTools.Text = "工具";
			myCommandControler.SetCommandName(mVisibleExpression, "ElementExpression");
			mVisibleExpression.Name = "mVisibleExpression";
			mVisibleExpression.Size = new System.Drawing.Size(193, 22);
			mVisibleExpression.Text = "输入域可见性表达式...";
			mHighlight.Name = "mHighlight";
			mHighlight.Size = new System.Drawing.Size(193, 22);
			mHighlight.Text = "输入域高亮设置";
			mHighlight.Click += new System.EventHandler(mHighlight_Click);
			myCommandControler.SetCommandName(toolStripMenuItem41, "ExecuteCommand");
			toolStripMenuItem41.Name = "toolStripMenuItem41";
			toolStripMenuItem41.Size = new System.Drawing.Size(193, 22);
			toolStripMenuItem41.Text = "执行命令...";
			myCommandControler.SetCommandName(toolStripMenuItem42, "DebugOutputWindow");
			toolStripMenuItem42.Image = (System.Drawing.Image)resources.GetObject("toolStripMenuItem42.Image");
			toolStripMenuItem42.Name = "toolStripMenuItem42";
			toolStripMenuItem42.Size = new System.Drawing.Size(193, 22);
			toolStripMenuItem42.Text = "调试输出";
			menuHelpMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[5]
			{
				menuExecuteCommand,
				menudebugOut,
				menuOptions,
				toolStripMenuItem25,
				menuAbout
			});
			menuHelpMenu.Name = "menuHelpMenu";
			menuHelpMenu.Size = new System.Drawing.Size(44, 21);
			menuHelpMenu.Text = "帮助";
			myCommandControler.SetCommandName(menuExecuteCommand, "ExecuteCommand");
			menuExecuteCommand.Name = "menuExecuteCommand";
			menuExecuteCommand.Size = new System.Drawing.Size(157, 22);
			menuExecuteCommand.Text = "执行命令...";
			myCommandControler.SetCommandName(menudebugOut, "DebugOutputWindow");
			menudebugOut.Image = (System.Drawing.Image)resources.GetObject("menudebugOut.Image");
			menudebugOut.Name = "menudebugOut";
			menudebugOut.Size = new System.Drawing.Size(157, 22);
			menudebugOut.Text = "调试输出...";
			myCommandControler.SetCommandName(menuOptions, "DocumentOptions");
			menuOptions.Name = "menuOptions";
			menuOptions.Size = new System.Drawing.Size(157, 22);
			menuOptions.Text = "系统设置...";
			myCommandControler.SetCommandName(toolStripMenuItem25, "Register");
			toolStripMenuItem25.Name = "toolStripMenuItem25";
			toolStripMenuItem25.Size = new System.Drawing.Size(157, 22);
			toolStripMenuItem25.Text = "手动注册产品...";
			myCommandControler.SetCommandName(menuAbout, "AboutControl");
			menuAbout.Image = (System.Drawing.Image)resources.GetObject("menuAbout.Image");
			menuAbout.Name = "menuAbout";
			menuAbout.Size = new System.Drawing.Size(157, 22);
			menuAbout.Text = "关于DCWriter";
			standardbar.BackColor = System.Drawing.Color.FromArgb(215, 231, 245);
			standardbar.Dock = System.Windows.Forms.DockStyle.None;
			standardbar.Items.AddRange(new System.Windows.Forms.ToolStripItem[32]
			{
				btnPreviewMode,
				toolStripSeparator33,
				btnFileNew,
				btnOpen,
				btnSave,
				btnSaveAs,
				toolStripSeparator5,
				btnCut,
				btnCopy,
				btnPaste,
				toolStripSeparator12,
				btnUndo,
				btnRedo,
				toolStripSeparator13,
				cboFontName,
				cboFontSize,
				btnFont,
				btnBold,
				btnItalic,
				btnUnderline,
				btnColor,
				btnBackColor,
				btnSup,
				btnSub,
				toolStripSeparator14,
				btnAlignLeft,
				btnAlignCenter,
				btnAlignRight,
				toolStripSeparator15,
				btnNumberedList,
				btnBulletedList,
				toolStripSeparator1
			});
			standardbar.Location = new System.Drawing.Point(3, 25);
			standardbar.Name = "standardbar";
			standardbar.Size = new System.Drawing.Size(641, 25);
			standardbar.TabIndex = 6;
			standardbar.Text = "toolStrip1";
			btnPreviewMode.CheckOnClick = true;
			btnPreviewMode.Image = (System.Drawing.Image)resources.GetObject("btnPreviewMode.Image");
			btnPreviewMode.ImageTransparentColor = System.Drawing.Color.Red;
			btnPreviewMode.Name = "btnPreviewMode";
			btnPreviewMode.Size = new System.Drawing.Size(76, 22);
			btnPreviewMode.Text = "预览模式";
			btnPreviewMode.Click += new System.EventHandler(btnPreviewMode_Click);
			toolStripSeparator33.Name = "toolStripSeparator33";
			toolStripSeparator33.Size = new System.Drawing.Size(6, 25);
			myCommandControler.SetCommandName(btnFileNew, "FileNew");
			btnFileNew.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			btnFileNew.Image = (System.Drawing.Image)resources.GetObject("btnFileNew.Image");
			btnFileNew.ImageTransparentColor = System.Drawing.Color.Magenta;
			btnFileNew.Name = "btnFileNew";
			btnFileNew.Size = new System.Drawing.Size(23, 22);
			btnFileNew.Text = "新建";
			btnOpen.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			btnOpen.Image = (System.Drawing.Image)resources.GetObject("btnOpen.Image");
			btnOpen.ImageTransparentColor = System.Drawing.Color.Magenta;
			btnOpen.Name = "btnOpen";
			btnOpen.Size = new System.Drawing.Size(23, 22);
			btnOpen.Text = "打开";
			btnOpen.Click += new System.EventHandler(btnOpen_Click);
			myCommandControler.SetCommandName(btnSave, "FileSave");
			btnSave.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			btnSave.Image = (System.Drawing.Image)resources.GetObject("btnSave.Image");
			btnSave.ImageTransparentColor = System.Drawing.Color.Magenta;
			btnSave.Name = "btnSave";
			btnSave.Size = new System.Drawing.Size(23, 22);
			btnSave.Text = "保存";
			myCommandControler.SetCommandName(btnSaveAs, "FileSaveAs");
			btnSaveAs.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			btnSaveAs.Image = (System.Drawing.Image)resources.GetObject("btnSaveAs.Image");
			btnSaveAs.ImageTransparentColor = System.Drawing.Color.Magenta;
			btnSaveAs.Name = "btnSaveAs";
			btnSaveAs.Size = new System.Drawing.Size(23, 22);
			btnSaveAs.Text = "另存为...";
			toolStripSeparator5.Name = "toolStripSeparator5";
			toolStripSeparator5.Size = new System.Drawing.Size(6, 25);
			myCommandControler.SetCommandName(btnCut, "Cut");
			btnCut.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			btnCut.Image = (System.Drawing.Image)resources.GetObject("btnCut.Image");
			btnCut.ImageTransparentColor = System.Drawing.Color.Magenta;
			btnCut.Name = "btnCut";
			btnCut.Size = new System.Drawing.Size(23, 22);
			btnCut.Text = "剪切";
			myCommandControler.SetCommandName(btnCopy, "Copy");
			btnCopy.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			btnCopy.Image = (System.Drawing.Image)resources.GetObject("btnCopy.Image");
			btnCopy.ImageTransparentColor = System.Drawing.Color.Magenta;
			btnCopy.Name = "btnCopy";
			btnCopy.Size = new System.Drawing.Size(23, 22);
			btnCopy.Text = "复制";
			myCommandControler.SetCommandName(btnPaste, "Paste");
			btnPaste.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			btnPaste.Image = (System.Drawing.Image)resources.GetObject("btnPaste.Image");
			btnPaste.ImageTransparentColor = System.Drawing.Color.Magenta;
			btnPaste.Name = "btnPaste";
			btnPaste.Size = new System.Drawing.Size(23, 22);
			btnPaste.Text = "粘贴";
			toolStripSeparator12.Name = "toolStripSeparator12";
			toolStripSeparator12.Size = new System.Drawing.Size(6, 25);
			myCommandControler.SetCommandName(btnUndo, "Undo");
			btnUndo.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			btnUndo.Image = (System.Drawing.Image)resources.GetObject("btnUndo.Image");
			btnUndo.ImageTransparentColor = System.Drawing.Color.Magenta;
			btnUndo.Name = "btnUndo";
			btnUndo.Size = new System.Drawing.Size(23, 22);
			btnUndo.Text = "撤销";
			myCommandControler.SetCommandName(btnRedo, "Redo");
			btnRedo.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			btnRedo.Image = (System.Drawing.Image)resources.GetObject("btnRedo.Image");
			btnRedo.ImageTransparentColor = System.Drawing.Color.Magenta;
			btnRedo.Name = "btnRedo";
			btnRedo.Size = new System.Drawing.Size(23, 22);
			btnRedo.Text = "重做";
			toolStripSeparator13.Name = "toolStripSeparator13";
			toolStripSeparator13.Size = new System.Drawing.Size(6, 25);
			cboFontName.AutoSize = false;
			myCommandControler.SetCommandName(cboFontName, "FontName");
			cboFontName.Name = "cboFontName";
			cboFontName.Size = new System.Drawing.Size(130, 25);
			cboFontSize.AutoSize = false;
			myCommandControler.SetCommandName(cboFontSize, "FontSize");
			cboFontSize.Name = "cboFontSize";
			cboFontSize.Size = new System.Drawing.Size(55, 25);
			myCommandControler.SetCommandName(btnFont, "Font");
			btnFont.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			btnFont.Image = (System.Drawing.Image)resources.GetObject("btnFont.Image");
			btnFont.ImageTransparentColor = System.Drawing.Color.Magenta;
			btnFont.Name = "btnFont";
			btnFont.Size = new System.Drawing.Size(23, 22);
			btnFont.Text = "字体";
			myCommandControler.SetCommandName(btnBold, "Bold");
			btnBold.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			btnBold.Image = (System.Drawing.Image)resources.GetObject("btnBold.Image");
			btnBold.ImageTransparentColor = System.Drawing.Color.Magenta;
			btnBold.Name = "btnBold";
			btnBold.Size = new System.Drawing.Size(23, 22);
			btnBold.Text = "粗体";
			myCommandControler.SetCommandName(btnItalic, "Italic");
			btnItalic.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			btnItalic.Image = (System.Drawing.Image)resources.GetObject("btnItalic.Image");
			btnItalic.ImageTransparentColor = System.Drawing.Color.Magenta;
			btnItalic.Name = "btnItalic";
			btnItalic.Size = new System.Drawing.Size(23, 22);
			btnItalic.Text = "斜体";
			myCommandControler.SetCommandName(btnUnderline, "Underline");
			btnUnderline.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			btnUnderline.Image = (System.Drawing.Image)resources.GetObject("btnUnderline.Image");
			btnUnderline.ImageTransparentColor = System.Drawing.Color.Magenta;
			btnUnderline.Name = "btnUnderline";
			btnUnderline.Size = new System.Drawing.Size(23, 22);
			btnUnderline.Text = "下划线";
			myCommandControler.SetCommandName(btnColor, "Color");
			btnColor.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			btnColor.Image = (System.Drawing.Image)resources.GetObject("btnColor.Image");
			btnColor.ImageTransparentColor = System.Drawing.Color.Red;
			btnColor.Name = "btnColor";
			btnColor.Size = new System.Drawing.Size(23, 22);
			btnColor.Text = "文本颜色";
			myCommandControler.SetCommandName(btnBackColor, "BackColor");
			btnBackColor.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			btnBackColor.Image = (System.Drawing.Image)resources.GetObject("btnBackColor.Image");
			btnBackColor.ImageTransparentColor = System.Drawing.Color.Magenta;
			btnBackColor.Name = "btnBackColor";
			btnBackColor.Size = new System.Drawing.Size(23, 20);
			btnBackColor.Text = "背景色";
			myCommandControler.SetCommandName(btnSup, "Superscript");
			btnSup.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			btnSup.Image = (System.Drawing.Image)resources.GetObject("btnSup.Image");
			btnSup.ImageTransparentColor = System.Drawing.Color.Magenta;
			btnSup.Name = "btnSup";
			btnSup.Size = new System.Drawing.Size(23, 20);
			btnSup.Text = "上标";
			myCommandControler.SetCommandName(btnSub, "Subscript");
			btnSub.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			btnSub.Image = (System.Drawing.Image)resources.GetObject("btnSub.Image");
			btnSub.ImageTransparentColor = System.Drawing.Color.Magenta;
			btnSub.Name = "btnSub";
			btnSub.Size = new System.Drawing.Size(23, 20);
			btnSub.Text = "下标";
			toolStripSeparator14.Name = "toolStripSeparator14";
			toolStripSeparator14.Size = new System.Drawing.Size(6, 25);
			myCommandControler.SetCommandName(btnAlignLeft, "AlignLeft");
			btnAlignLeft.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			btnAlignLeft.Image = (System.Drawing.Image)resources.GetObject("btnAlignLeft.Image");
			btnAlignLeft.ImageTransparentColor = System.Drawing.Color.Magenta;
			btnAlignLeft.Name = "btnAlignLeft";
			btnAlignLeft.Size = new System.Drawing.Size(23, 20);
			btnAlignLeft.Text = "左对齐";
			myCommandControler.SetCommandName(btnAlignCenter, "AlignCenter");
			btnAlignCenter.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			btnAlignCenter.Image = (System.Drawing.Image)resources.GetObject("btnAlignCenter.Image");
			btnAlignCenter.ImageTransparentColor = System.Drawing.Color.Magenta;
			btnAlignCenter.Name = "btnAlignCenter";
			btnAlignCenter.Size = new System.Drawing.Size(23, 20);
			btnAlignCenter.Text = "居中对齐";
			myCommandControler.SetCommandName(btnAlignRight, "AlignRight");
			btnAlignRight.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			btnAlignRight.Image = (System.Drawing.Image)resources.GetObject("btnAlignRight.Image");
			btnAlignRight.ImageTransparentColor = System.Drawing.Color.Magenta;
			btnAlignRight.Name = "btnAlignRight";
			btnAlignRight.Size = new System.Drawing.Size(23, 20);
			btnAlignRight.Text = "右对齐";
			toolStripSeparator15.Name = "toolStripSeparator15";
			toolStripSeparator15.Size = new System.Drawing.Size(6, 25);
			myCommandControler.SetCommandName(btnNumberedList, "NumberedList");
			btnNumberedList.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			btnNumberedList.Image = (System.Drawing.Image)resources.GetObject("btnNumberedList.Image");
			btnNumberedList.ImageTransparentColor = System.Drawing.Color.Magenta;
			btnNumberedList.Name = "btnNumberedList";
			btnNumberedList.Size = new System.Drawing.Size(23, 20);
			btnNumberedList.Text = "数字列表";
			myCommandControler.SetCommandName(btnBulletedList, "BulletedList");
			btnBulletedList.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			btnBulletedList.Image = (System.Drawing.Image)resources.GetObject("btnBulletedList.Image");
			btnBulletedList.ImageTransparentColor = System.Drawing.Color.Magenta;
			btnBulletedList.Name = "btnBulletedList";
			btnBulletedList.Size = new System.Drawing.Size(23, 20);
			btnBulletedList.Text = "圆点列表";
			toolStripSeparator1.Name = "toolStripSeparator1";
			toolStripSeparator1.Size = new System.Drawing.Size(6, 6);
			myCommandControler.SetCommandName(cmi_Redo, "Redo");
			cmi_Redo.Image = (System.Drawing.Image)resources.GetObject("cmi_Redo.Image");
			cmi_Redo.Name = "cmi_Redo";
			cmi_Redo.Size = new System.Drawing.Size(160, 22);
			cmi_Redo.Text = "重复";
			myCommandControler.SetCommandName(cmi_Undo, "Undo");
			cmi_Undo.Image = (System.Drawing.Image)resources.GetObject("cmi_Undo.Image");
			cmi_Undo.Name = "cmi_Undo";
			cmi_Undo.Size = new System.Drawing.Size(160, 22);
			cmi_Undo.Text = "撤销";
			myCommandControler.SetCommandName(cmi_Cut, "Cut");
			cmi_Cut.Image = (System.Drawing.Image)resources.GetObject("cmi_Cut.Image");
			cmi_Cut.Name = "cmi_Cut";
			cmi_Cut.Size = new System.Drawing.Size(160, 22);
			cmi_Cut.Text = "剪切";
			myCommandControler.SetCommandName(cmi_Copy, "Copy");
			cmi_Copy.Image = (System.Drawing.Image)resources.GetObject("cmi_Copy.Image");
			cmi_Copy.Name = "cmi_Copy";
			cmi_Copy.Size = new System.Drawing.Size(160, 22);
			cmi_Copy.Text = "复制";
			myCommandControler.SetCommandName(cmi_Paste, "Paste");
			cmi_Paste.Image = (System.Drawing.Image)resources.GetObject("cmi_Paste.Image");
			cmi_Paste.Name = "cmi_Paste";
			cmi_Paste.Size = new System.Drawing.Size(160, 22);
			cmi_Paste.Text = "粘贴";
			myCommandControler.SetCommandName(cmi_Delete, "Delete");
			cmi_Delete.Image = (System.Drawing.Image)resources.GetObject("cmi_Delete.Image");
			cmi_Delete.Name = "cmi_Delete";
			cmi_Delete.Size = new System.Drawing.Size(160, 22);
			cmi_Delete.Text = "删除";
			myCommandControler.SetCommandName(cmi_Properties, "ElementProperties");
			cmi_Properties.Name = "cmi_Properties";
			cmi_Properties.Size = new System.Drawing.Size(160, 22);
			cmi_Properties.Text = "属性...";
			myCommandControler.SetCommandName(cmi_EditImage, "EditImageAdditionShape");
			cmi_EditImage.Image = (System.Drawing.Image)resources.GetObject("cmi_EditImage.Image");
			cmi_EditImage.Name = "cmi_EditImage";
			cmi_EditImage.Size = new System.Drawing.Size(160, 22);
			cmi_EditImage.Text = "编辑图片";
			myCommandControler.SetCommandName(cmi_BorderBackground, "BorderBackgroundFormat");
			cmi_BorderBackground.Image = (System.Drawing.Image)resources.GetObject("cmi_BorderBackground.Image");
			cmi_BorderBackground.Name = "cmi_BorderBackground";
			cmi_BorderBackground.Size = new System.Drawing.Size(160, 22);
			cmi_BorderBackground.Text = "边框和底纹...";
			myCommandControler.SetCommandName(cmc_Redo, "Redo");
			cmc_Redo.Image = (System.Drawing.Image)resources.GetObject("cmc_Redo.Image");
			cmc_Redo.Name = "cmc_Redo";
			cmc_Redo.Size = new System.Drawing.Size(184, 22);
			cmc_Redo.Text = "重复";
			myCommandControler.SetCommandName(cmc_Undo, "Undo");
			cmc_Undo.Image = (System.Drawing.Image)resources.GetObject("cmc_Undo.Image");
			cmc_Undo.Name = "cmc_Undo";
			cmc_Undo.Size = new System.Drawing.Size(184, 22);
			cmc_Undo.Text = "撤销";
			myCommandControler.SetCommandName(cmc_Cut, "Cut");
			cmc_Cut.Image = (System.Drawing.Image)resources.GetObject("cmc_Cut.Image");
			cmc_Cut.Name = "cmc_Cut";
			cmc_Cut.Size = new System.Drawing.Size(184, 22);
			cmc_Cut.Text = "剪切";
			myCommandControler.SetCommandName(cmc_Copy, "Copy");
			cmc_Copy.Image = (System.Drawing.Image)resources.GetObject("cmc_Copy.Image");
			cmc_Copy.Name = "cmc_Copy";
			cmc_Copy.Size = new System.Drawing.Size(184, 22);
			cmc_Copy.Text = "复制";
			myCommandControler.SetCommandName(cmc_Paste, "Paste");
			cmc_Paste.Image = (System.Drawing.Image)resources.GetObject("cmc_Paste.Image");
			cmc_Paste.Name = "cmc_Paste";
			cmc_Paste.Size = new System.Drawing.Size(184, 22);
			cmc_Paste.Text = "粘贴";
			myCommandControler.SetCommandName(cmc_TableRowProperties, "TableRowProperties");
			cmc_TableRowProperties.Image = (System.Drawing.Image)resources.GetObject("cmc_TableRowProperties.Image");
			cmc_TableRowProperties.Name = "cmc_TableRowProperties";
			cmc_TableRowProperties.Size = new System.Drawing.Size(184, 22);
			cmc_TableRowProperties.Text = "表格行属性...";
			myCommandControler.SetCommandName(cmc_CellProperties, "TableCellProperties");
			cmc_CellProperties.Image = (System.Drawing.Image)resources.GetObject("cmc_CellProperties.Image");
			cmc_CellProperties.Name = "cmc_CellProperties";
			cmc_CellProperties.Size = new System.Drawing.Size(184, 22);
			cmc_CellProperties.Text = "单元格属性...";
			myCommandControler.SetCommandName(toolStripMenuItem28, "AlignTopLeft");
			toolStripMenuItem28.Image = (System.Drawing.Image)resources.GetObject("toolStripMenuItem28.Image");
			toolStripMenuItem28.Name = "toolStripMenuItem28";
			toolStripMenuItem28.Size = new System.Drawing.Size(196, 22);
			toolStripMenuItem28.Text = "顶端左对齐";
			myCommandControler.SetCommandName(toolStripMenuItem29, "AlignTopCenter");
			toolStripMenuItem29.Image = (System.Drawing.Image)resources.GetObject("toolStripMenuItem29.Image");
			toolStripMenuItem29.Name = "toolStripMenuItem29";
			toolStripMenuItem29.Size = new System.Drawing.Size(196, 22);
			toolStripMenuItem29.Text = "顶端居中对齐";
			myCommandControler.SetCommandName(toolStripMenuItem30, "AlignTopRight");
			toolStripMenuItem30.Image = (System.Drawing.Image)resources.GetObject("toolStripMenuItem30.Image");
			toolStripMenuItem30.Name = "toolStripMenuItem30";
			toolStripMenuItem30.Size = new System.Drawing.Size(196, 22);
			toolStripMenuItem30.Text = "顶端右对齐";
			myCommandControler.SetCommandName(toolStripMenuItem31, "AlignMiddleLeft");
			toolStripMenuItem31.Image = (System.Drawing.Image)resources.GetObject("toolStripMenuItem31.Image");
			toolStripMenuItem31.Name = "toolStripMenuItem31";
			toolStripMenuItem31.Size = new System.Drawing.Size(196, 22);
			toolStripMenuItem31.Text = "垂直居中左对齐";
			myCommandControler.SetCommandName(toolStripMenuItem32, "AlignMiddleCenter");
			toolStripMenuItem32.Image = (System.Drawing.Image)resources.GetObject("toolStripMenuItem32.Image");
			toolStripMenuItem32.Name = "toolStripMenuItem32";
			toolStripMenuItem32.Size = new System.Drawing.Size(196, 22);
			toolStripMenuItem32.Text = "垂直居中水平居中对齐";
			myCommandControler.SetCommandName(toolStripMenuItem33, "AlignMiddleRight");
			toolStripMenuItem33.Image = (System.Drawing.Image)resources.GetObject("toolStripMenuItem33.Image");
			toolStripMenuItem33.Name = "toolStripMenuItem33";
			toolStripMenuItem33.Size = new System.Drawing.Size(196, 22);
			toolStripMenuItem33.Text = "垂直居中右对齐";
			myCommandControler.SetCommandName(toolStripMenuItem34, "AlignBottomLeft");
			toolStripMenuItem34.Image = (System.Drawing.Image)resources.GetObject("toolStripMenuItem34.Image");
			toolStripMenuItem34.Name = "toolStripMenuItem34";
			toolStripMenuItem34.Size = new System.Drawing.Size(196, 22);
			toolStripMenuItem34.Text = "底端左对齐";
			myCommandControler.SetCommandName(toolStripMenuItem35, "AlignBottomCenter");
			toolStripMenuItem35.Image = (System.Drawing.Image)resources.GetObject("toolStripMenuItem35.Image");
			toolStripMenuItem35.Name = "toolStripMenuItem35";
			toolStripMenuItem35.Size = new System.Drawing.Size(196, 22);
			toolStripMenuItem35.Text = "底端居中对齐";
			myCommandControler.SetCommandName(toolStripMenuItem36, "AlignBottomRight");
			toolStripMenuItem36.Image = (System.Drawing.Image)resources.GetObject("toolStripMenuItem36.Image");
			toolStripMenuItem36.Name = "toolStripMenuItem36";
			toolStripMenuItem36.Size = new System.Drawing.Size(196, 22);
			toolStripMenuItem36.Text = "底端右对齐";
			myCommandControler.SetCommandName(toolStripMenuItem37, "Table_InsertRowUp");
			toolStripMenuItem37.Image = (System.Drawing.Image)resources.GetObject("toolStripMenuItem37.Image");
			toolStripMenuItem37.Name = "toolStripMenuItem37";
			toolStripMenuItem37.Size = new System.Drawing.Size(172, 22);
			toolStripMenuItem37.Text = "在上面插入表格行";
			myCommandControler.SetCommandName(toolStripMenuItem38, "Table_InsertRowDown");
			toolStripMenuItem38.Image = (System.Drawing.Image)resources.GetObject("toolStripMenuItem38.Image");
			toolStripMenuItem38.Name = "toolStripMenuItem38";
			toolStripMenuItem38.Size = new System.Drawing.Size(172, 22);
			toolStripMenuItem38.Text = "在下面插入表格行";
			myCommandControler.SetCommandName(toolStripMenuItem40, "Table_InsertColumnLeft");
			toolStripMenuItem40.Image = (System.Drawing.Image)resources.GetObject("toolStripMenuItem40.Image");
			toolStripMenuItem40.Name = "toolStripMenuItem40";
			toolStripMenuItem40.Size = new System.Drawing.Size(172, 22);
			toolStripMenuItem40.Text = "在左侧插入表格列";
			myCommandControler.SetCommandName(toolStripMenuItem9, "Table_InsertColumnRight");
			toolStripMenuItem9.Image = (System.Drawing.Image)resources.GetObject("toolStripMenuItem9.Image");
			toolStripMenuItem9.Name = "toolStripMenuItem9";
			toolStripMenuItem9.Size = new System.Drawing.Size(172, 22);
			toolStripMenuItem9.Text = "在右侧插入表格列";
			myCommandControler.SetCommandName(cmc_DeleteRow, "Table_DeleteRow");
			cmc_DeleteRow.Image = (System.Drawing.Image)resources.GetObject("cmc_DeleteRow.Image");
			cmc_DeleteRow.Name = "cmc_DeleteRow";
			cmc_DeleteRow.Size = new System.Drawing.Size(184, 22);
			cmc_DeleteRow.Text = "删除表格行";
			myCommandControler.SetCommandName(cmc_DeleteColumn, "Table_DeleteColumn");
			cmc_DeleteColumn.Image = (System.Drawing.Image)resources.GetObject("cmc_DeleteColumn.Image");
			cmc_DeleteColumn.Name = "cmc_DeleteColumn";
			cmc_DeleteColumn.Size = new System.Drawing.Size(184, 22);
			cmc_DeleteColumn.Text = "删除表格列";
			myCommandControler.SetCommandName(cmc_MergeCell, "Table_MergeCell");
			cmc_MergeCell.Image = (System.Drawing.Image)resources.GetObject("cmc_MergeCell.Image");
			cmc_MergeCell.Name = "cmc_MergeCell";
			cmc_MergeCell.Size = new System.Drawing.Size(184, 22);
			cmc_MergeCell.Text = "合并单元格";
			myCommandControler.SetCommandName(cmc_SplitCell, "Table_SplitCellExt");
			cmc_SplitCell.Image = (System.Drawing.Image)resources.GetObject("cmc_SplitCell.Image");
			cmc_SplitCell.Name = "cmc_SplitCell";
			cmc_SplitCell.Size = new System.Drawing.Size(184, 22);
			cmc_SplitCell.Text = "拆分单元格";
			myCommandControler.SetCommandName(cmc_CellBorderBackground, "BorderBackgroundFormat");
			cmc_CellBorderBackground.Image = (System.Drawing.Image)resources.GetObject("cmc_CellBorderBackground.Image");
			cmc_CellBorderBackground.Name = "cmc_CellBorderBackground";
			cmc_CellBorderBackground.Size = new System.Drawing.Size(184, 22);
			cmc_CellBorderBackground.Text = "边框和底纹...";
			myCommandControler.SetCommandName(cmc_Properties, "TableProperties");
			cmc_Properties.Image = (System.Drawing.Image)resources.GetObject("cmc_Properties.Image");
			cmc_Properties.Name = "cmc_Properties";
			cmc_Properties.Size = new System.Drawing.Size(184, 22);
			cmc_Properties.Text = "表格属性...";
			myCommandControler.SetCommandName(cmi_EmitInText, "EmbedInText");
			cmi_EmitInText.Image = (System.Drawing.Image)resources.GetObject("cmi_EmitInText.Image");
			cmi_EmitInText.Name = "cmi_EmitInText";
			cmi_EmitInText.Size = new System.Drawing.Size(160, 22);
			cmi_EmitInText.Text = "嵌入在文字中";
			myCommandControler.SetCommandName(cmi_TextSurrdings, "TextSurroundings");
			cmi_TextSurrdings.Image = (System.Drawing.Image)resources.GetObject("cmi_TextSurrdings.Image");
			cmi_TextSurrdings.Name = "cmi_TextSurrdings";
			cmi_TextSurrdings.Size = new System.Drawing.Size(160, 22);
			cmi_TextSurrdings.Text = "文字在四周围绕";
			myCommandControler.SetCommandName(cmf_Undo, "Redo");
			cmf_Undo.Image = (System.Drawing.Image)resources.GetObject("cmf_Undo.Image");
			cmf_Undo.Name = "cmf_Undo";
			cmf_Undo.Size = new System.Drawing.Size(160, 22);
			cmf_Undo.Text = "重复";
			myCommandControler.SetCommandName(cmf_Redo, "Undo");
			cmf_Redo.Image = (System.Drawing.Image)resources.GetObject("cmf_Redo.Image");
			cmf_Redo.Name = "cmf_Redo";
			cmf_Redo.Size = new System.Drawing.Size(160, 22);
			cmf_Redo.Text = "撤销";
			myCommandControler.SetCommandName(cmf_Cut, "Cut");
			cmf_Cut.Image = (System.Drawing.Image)resources.GetObject("cmf_Cut.Image");
			cmf_Cut.Name = "cmf_Cut";
			cmf_Cut.Size = new System.Drawing.Size(160, 22);
			cmf_Cut.Text = "剪切";
			myCommandControler.SetCommandName(cmf_Copy, "Copy");
			cmf_Copy.Image = (System.Drawing.Image)resources.GetObject("cmf_Copy.Image");
			cmf_Copy.Name = "cmf_Copy";
			cmf_Copy.Size = new System.Drawing.Size(160, 22);
			cmf_Copy.Text = "复制";
			myCommandControler.SetCommandName(cmf_Paste, "Paste");
			cmf_Paste.Image = (System.Drawing.Image)resources.GetObject("cmf_Paste.Image");
			cmf_Paste.Name = "cmf_Paste";
			cmf_Paste.Size = new System.Drawing.Size(160, 22);
			cmf_Paste.Text = "粘贴";
			myCommandControler.SetCommandName(cmf_Delete, "Delete");
			cmf_Delete.Image = (System.Drawing.Image)resources.GetObject("cmf_Delete.Image");
			cmf_Delete.Name = "cmf_Delete";
			cmf_Delete.Size = new System.Drawing.Size(160, 22);
			cmf_Delete.Text = "删除";
			myCommandControler.SetCommandName(cmf_Color, "Color");
			cmf_Color.Name = "cmf_Color";
			cmf_Color.Size = new System.Drawing.Size(160, 22);
			cmf_Color.Text = "颜色";
			myCommandControler.SetCommandName(cmf_Font, "Font");
			cmf_Font.Image = (System.Drawing.Image)resources.GetObject("cmf_Font.Image");
			cmf_Font.Name = "cmf_Font";
			cmf_Font.Size = new System.Drawing.Size(160, 22);
			cmf_Font.Text = "字体...";
			myCommandControler.SetCommandName(cmf_LeftAlign, "AlignLeft");
			cmf_LeftAlign.Image = (System.Drawing.Image)resources.GetObject("cmf_LeftAlign.Image");
			cmf_LeftAlign.Name = "cmf_LeftAlign";
			cmf_LeftAlign.Size = new System.Drawing.Size(160, 22);
			cmf_LeftAlign.Text = "左对齐";
			myCommandControler.SetCommandName(cmf_AlignCenter, "AlignCenter");
			cmf_AlignCenter.Image = (System.Drawing.Image)resources.GetObject("cmf_AlignCenter.Image");
			cmf_AlignCenter.Name = "cmf_AlignCenter";
			cmf_AlignCenter.Size = new System.Drawing.Size(160, 22);
			cmf_AlignCenter.Text = "居中对齐";
			myCommandControler.SetCommandName(cmf_AlignRight, "AlignRight");
			cmf_AlignRight.Image = (System.Drawing.Image)resources.GetObject("cmf_AlignRight.Image");
			cmf_AlignRight.Name = "cmf_AlignRight";
			cmf_AlignRight.Size = new System.Drawing.Size(160, 22);
			cmf_AlignRight.Text = "右对齐";
			myCommandControler.SetCommandName(cmf_ClearFieldValue, "ClearFieldValue");
			cmf_ClearFieldValue.Name = "cmf_ClearFieldValue";
			cmf_ClearFieldValue.Size = new System.Drawing.Size(160, 22);
			cmf_ClearFieldValue.Text = "清空输入域内容";
			myCommandControler.SetCommandName(toolStripMenuItem1, "ElementProperties");
			toolStripMenuItem1.Image = (System.Drawing.Image)resources.GetObject("toolStripMenuItem1.Image");
			toolStripMenuItem1.Name = "toolStripMenuItem1";
			toolStripMenuItem1.Size = new System.Drawing.Size(184, 22);
			toolStripMenuItem1.Text = "属性...";
			myCommandControler.SetCommandName(toolStripMenuItem3, "ExecuteCommand");
			toolStripMenuItem3.Name = "toolStripMenuItem3";
			toolStripMenuItem3.Size = new System.Drawing.Size(133, 22);
			toolStripMenuItem3.Text = "执行命令...";
			myCommandControler.SetCommandName(toolStripMenuItem11, "DebugOutputWindow");
			toolStripMenuItem11.Image = (System.Drawing.Image)resources.GetObject("toolStripMenuItem11.Image");
			toolStripMenuItem11.Name = "toolStripMenuItem11";
			toolStripMenuItem11.Size = new System.Drawing.Size(133, 22);
			toolStripMenuItem11.Text = "调试输出";
			myCommandControler.SetCommandName(toolStripMenuItem22, "DocumentOptions");
			toolStripMenuItem22.Name = "toolStripMenuItem22";
			toolStripMenuItem22.Size = new System.Drawing.Size(133, 22);
			toolStripMenuItem22.Text = "系统设置...";
			myCommandControler.SetCommandName(toolStripMenuItem23, "WriterControlProperties");
			toolStripMenuItem23.Name = "toolStripMenuItem23";
			toolStripMenuItem23.Size = new System.Drawing.Size(133, 22);
			toolStripMenuItem23.Text = "控件属性...";
			myCommandControler.SetCommandName(toolStripMenuItem24, "ElementProperties");
			toolStripMenuItem24.Image = (System.Drawing.Image)resources.GetObject("toolStripMenuItem24.Image");
			toolStripMenuItem24.Name = "toolStripMenuItem24";
			toolStripMenuItem24.Size = new System.Drawing.Size(133, 22);
			toolStripMenuItem24.Text = "元素属性...";
			myCommandControler.SetCommandName(cmEditComment, "EditComment");
			cmEditComment.Name = "cmEditComment";
			cmEditComment.Size = new System.Drawing.Size(133, 22);
			cmEditComment.Text = "编辑批注...";
			myCommandControler.SetCommandName(cmDeleteComment, "DeleteComment");
			cmDeleteComment.Image = (System.Drawing.Image)resources.GetObject("cmDeleteComment.Image");
			cmDeleteComment.Name = "cmDeleteComment";
			cmDeleteComment.Size = new System.Drawing.Size(133, 22);
			cmDeleteComment.Text = "删除批注";
			myCommandControler.SetCommandName(btnInsertTable, "Table_InsertTable");
			btnInsertTable.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			btnInsertTable.Image = (System.Drawing.Image)resources.GetObject("btnInsertTable.Image");
			btnInsertTable.ImageTransparentColor = System.Drawing.Color.Magenta;
			btnInsertTable.Name = "btnInsertTable";
			btnInsertTable.Size = new System.Drawing.Size(23, 22);
			btnInsertTable.Text = "插入表格";
			myCommandControler.SetCommandName(btnInsertComment, "InsertComment");
			btnInsertComment.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			btnInsertComment.Image = (System.Drawing.Image)resources.GetObject("btnInsertComment.Image");
			btnInsertComment.ImageTransparentColor = System.Drawing.Color.Magenta;
			btnInsertComment.Name = "btnInsertComment";
			btnInsertComment.Size = new System.Drawing.Size(23, 22);
			btnInsertComment.Text = "插入批注";
			myCommandControler.SetCommandName(btnInsertFileContent, "InsertFileContent");
			btnInsertFileContent.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			btnInsertFileContent.Image = (System.Drawing.Image)resources.GetObject("btnInsertFileContent.Image");
			btnInsertFileContent.ImageTransparentColor = System.Drawing.Color.Red;
			btnInsertFileContent.Name = "btnInsertFileContent";
			btnInsertFileContent.Size = new System.Drawing.Size(23, 22);
			btnInsertFileContent.Text = "插入文件";
			myCommandControler.SetCommandName(btnInsertSpecifyCharacter, "InsertSpecifyCharacter");
			btnInsertSpecifyCharacter.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			btnInsertSpecifyCharacter.Image = (System.Drawing.Image)resources.GetObject("btnInsertSpecifyCharacter.Image");
			btnInsertSpecifyCharacter.ImageTransparentColor = System.Drawing.Color.Red;
			btnInsertSpecifyCharacter.Name = "btnInsertSpecifyCharacter";
			btnInsertSpecifyCharacter.Size = new System.Drawing.Size(23, 22);
			btnInsertSpecifyCharacter.Text = "插入特殊字符";
			myCommandControler.SetCommandName(btnInsertImage, "InsertImage");
			btnInsertImage.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			btnInsertImage.Image = (System.Drawing.Image)resources.GetObject("btnInsertImage.Image");
			btnInsertImage.ImageTransparentColor = System.Drawing.Color.Magenta;
			btnInsertImage.Name = "btnInsertImage";
			btnInsertImage.Size = new System.Drawing.Size(23, 22);
			btnInsertImage.Text = "插入图片";
			myCommandControler.SetCommandName(btnInsertMedicalExpression, "InsertMedicalExpression");
			btnInsertMedicalExpression.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			btnInsertMedicalExpression.Image = (System.Drawing.Image)resources.GetObject("btnInsertMedicalExpression.Image");
			btnInsertMedicalExpression.ImageTransparentColor = System.Drawing.Color.Red;
			btnInsertMedicalExpression.Name = "btnInsertMedicalExpression";
			btnInsertMedicalExpression.Size = new System.Drawing.Size(23, 22);
			btnInsertMedicalExpression.Text = "插入医学公式";
			myCommandControler.SetCommandName(toolStripMenuItem39, "Copy");
			toolStripMenuItem39.Image = (System.Drawing.Image)resources.GetObject("toolStripMenuItem39.Image");
			toolStripMenuItem39.Name = "toolStripMenuItem39";
			toolStripMenuItem39.Size = new System.Drawing.Size(100, 22);
			toolStripMenuItem39.Text = "复制";
			myCommandControler.SetCommandName(cmc_CellFont, "Font");
			cmc_CellFont.Image = (System.Drawing.Image)resources.GetObject("cmc_CellFont.Image");
			cmc_CellFont.Name = "cmc_CellFont";
			cmc_CellFont.Size = new System.Drawing.Size(184, 22);
			cmc_CellFont.Text = "字体...";
			btnInsertMedicalExpress.AutoToolTip = false;
			myCommandControler.SetCommandName(btnInsertMedicalExpress, "InsertMedicalExpression");
			btnInsertMedicalExpress.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Text;
			btnInsertMedicalExpress.Image = (System.Drawing.Image)resources.GetObject("btnInsertMedicalExpress.Image");
			btnInsertMedicalExpress.ImageTransparentColor = System.Drawing.Color.Magenta;
			btnInsertMedicalExpress.Name = "btnInsertMedicalExpress";
			btnInsertMedicalExpress.Size = new System.Drawing.Size(96, 22);
			btnInsertMedicalExpress.Text = "插入医学表达式";
			myCommandControler.SetCommandName(toolStripButton2, "ElementPropertiesSimpleMode");
			toolStripButton2.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			toolStripButton2.Image = (System.Drawing.Image)resources.GetObject("toolStripButton2.Image");
			toolStripButton2.ImageTransparentColor = System.Drawing.Color.Magenta;
			toolStripButton2.Name = "toolStripButton2";
			toolStripButton2.Size = new System.Drawing.Size(23, 22);
			toolStripButton2.Text = "元素属性";
			cmImage.Items.AddRange(new System.Windows.Forms.ToolStripItem[15]
			{
				cmi_Redo,
				cmi_Undo,
				toolStripSeparator27,
				cmi_Cut,
				cmi_Copy,
				cmi_Paste,
				cmi_Delete,
				toolStripSeparator28,
				cmi_Properties,
				toolStripSeparator31,
				cmi_BorderBackground,
				cmi_EditImage,
				toolStripSeparator2,
				cmi_EmitInText,
				cmi_TextSurrdings
			});
			cmImage.Name = "cmEdit";
			cmImage.Size = new System.Drawing.Size(161, 270);
			toolStripSeparator27.Name = "toolStripSeparator27";
			toolStripSeparator27.Size = new System.Drawing.Size(157, 6);
			toolStripSeparator28.Name = "toolStripSeparator28";
			toolStripSeparator28.Size = new System.Drawing.Size(157, 6);
			toolStripSeparator31.Name = "toolStripSeparator31";
			toolStripSeparator31.Size = new System.Drawing.Size(157, 6);
			toolStripSeparator2.Name = "toolStripSeparator2";
			toolStripSeparator2.Size = new System.Drawing.Size(157, 6);
			cmTableCell.Items.AddRange(new System.Windows.Forms.ToolStripItem[21]
			{
				cmc_Redo,
				cmc_Undo,
				toolStripSeparator34,
				cmc_Cut,
				cmc_Copy,
				cmc_Paste,
				toolStripMenuItem14,
				cmc_Properties,
				cmc_TableRowProperties,
				cmc_CellProperties,
				cmc_CellBorderBackground,
				toolStripMenuItem1,
				cmc_CellFont,
				toolStripSeparator37,
				cmc_CellContentAlign,
				cmc_Insert,
				cmc_DeleteRow,
				cmc_DeleteColumn,
				toolStripSeparator39,
				cmc_MergeCell,
				cmc_SplitCell
			});
			cmTableCell.Name = "cmEdit";
			cmTableCell.Size = new System.Drawing.Size(185, 402);
			toolStripSeparator34.Name = "toolStripSeparator34";
			toolStripSeparator34.Size = new System.Drawing.Size(181, 6);
			toolStripMenuItem14.Name = "toolStripMenuItem14";
			toolStripMenuItem14.Size = new System.Drawing.Size(181, 6);
			toolStripSeparator37.Name = "toolStripSeparator37";
			toolStripSeparator37.Size = new System.Drawing.Size(181, 6);
			cmc_CellContentAlign.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[9]
			{
				toolStripMenuItem28,
				toolStripMenuItem29,
				toolStripMenuItem30,
				toolStripMenuItem31,
				toolStripMenuItem32,
				toolStripMenuItem33,
				toolStripMenuItem34,
				toolStripMenuItem35,
				toolStripMenuItem36
			});
			cmc_CellContentAlign.Name = "cmc_CellContentAlign";
			cmc_CellContentAlign.Size = new System.Drawing.Size(184, 22);
			cmc_CellContentAlign.Text = "单元格内容对齐方式";
			cmc_Insert.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[5]
			{
				toolStripMenuItem37,
				toolStripMenuItem38,
				toolStripSeparator38,
				toolStripMenuItem40,
				toolStripMenuItem9
			});
			cmc_Insert.Name = "cmc_Insert";
			cmc_Insert.Size = new System.Drawing.Size(184, 22);
			cmc_Insert.Text = "插入";
			toolStripSeparator38.Name = "toolStripSeparator38";
			toolStripSeparator38.Size = new System.Drawing.Size(169, 6);
			toolStripSeparator39.Name = "toolStripSeparator39";
			toolStripSeparator39.Size = new System.Drawing.Size(181, 6);
			tvwNavigate.Dock = System.Windows.Forms.DockStyle.Fill;
			tvwNavigate.HideSelection = false;
			tvwNavigate.Location = new System.Drawing.Point(3, 3);
			tvwNavigate.Name = "tvwNavigate";
			tvwNavigate.Size = new System.Drawing.Size(156, 225);
			tvwNavigate.TabIndex = 9;
			tvwNavigate.AfterSelect += new System.Windows.Forms.TreeViewEventHandler(tvwNavigate_AfterSelect);
			mySplitContainer.Dock = System.Windows.Forms.DockStyle.Fill;
			mySplitContainer.Location = new System.Drawing.Point(0, 0);
			mySplitContainer.Name = "mySplitContainer";
			mySplitContainer.Panel1.Controls.Add(tabFunction);
			mySplitContainer.Panel2.Controls.Add(myEditControl);
			mySplitContainer.Size = new System.Drawing.Size(644, 257);
			mySplitContainer.SplitterDistance = 170;
			mySplitContainer.TabIndex = 10;
			tabFunction.Controls.Add(tpNavigate);
			tabFunction.Controls.Add(tpTrack);
			tabFunction.Dock = System.Windows.Forms.DockStyle.Fill;
			tabFunction.Location = new System.Drawing.Point(0, 0);
			tabFunction.Name = "tabFunction";
			tabFunction.SelectedIndex = 0;
			tabFunction.Size = new System.Drawing.Size(170, 257);
			tabFunction.TabIndex = 10;
			tpNavigate.Controls.Add(tvwNavigate);
			tpNavigate.Location = new System.Drawing.Point(4, 22);
			tpNavigate.Name = "tpNavigate";
			tpNavigate.Padding = new System.Windows.Forms.Padding(3);
			tpNavigate.Size = new System.Drawing.Size(162, 231);
			tpNavigate.TabIndex = 0;
			tpNavigate.Text = "文档结构图";
			tpNavigate.UseVisualStyleBackColor = true;
			tpTrack.Controls.Add(lstTrack);
			tpTrack.Location = new System.Drawing.Point(4, 22);
			tpTrack.Name = "tpTrack";
			tpTrack.Padding = new System.Windows.Forms.Padding(3);
			tpTrack.Size = new System.Drawing.Size(162, 231);
			tpTrack.TabIndex = 1;
			tpTrack.Text = "修改痕迹";
			tpTrack.UseVisualStyleBackColor = true;
			lstTrack.Dock = System.Windows.Forms.DockStyle.Fill;
			lstTrack.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawVariable;
			lstTrack.FormattingEnabled = true;
			lstTrack.Location = new System.Drawing.Point(3, 3);
			lstTrack.Name = "lstTrack";
			lstTrack.Size = new System.Drawing.Size(156, 225);
			lstTrack.TabIndex = 0;
			cmField.Items.AddRange(new System.Windows.Forms.ToolStripItem[17]
			{
				cmf_Undo,
				cmf_Redo,
				toolStripSeparator3,
				cmf_Cut,
				cmf_Copy,
				cmf_Paste,
				cmf_Delete,
				cmf_ClearFieldValue,
				toolStripSeparator11,
				cmf_Color,
				cmf_Font,
				toolStripSeparator22,
				cmf_LeftAlign,
				cmf_AlignCenter,
				cmf_AlignRight,
				toolStripSeparator23,
				toolStripMenuItem2
			});
			cmField.Name = "cmEdit";
			cmField.Size = new System.Drawing.Size(161, 314);
			toolStripSeparator3.Name = "toolStripSeparator3";
			toolStripSeparator3.Size = new System.Drawing.Size(157, 6);
			toolStripSeparator11.Name = "toolStripSeparator11";
			toolStripSeparator11.Size = new System.Drawing.Size(157, 6);
			toolStripSeparator22.Name = "toolStripSeparator22";
			toolStripSeparator22.Size = new System.Drawing.Size(157, 6);
			toolStripSeparator23.Name = "toolStripSeparator23";
			toolStripSeparator23.Size = new System.Drawing.Size(157, 6);
			toolStripMenuItem2.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[5]
			{
				toolStripMenuItem3,
				toolStripMenuItem11,
				toolStripMenuItem22,
				toolStripMenuItem23,
				toolStripMenuItem24
			});
			toolStripMenuItem2.Name = "toolStripMenuItem2";
			toolStripMenuItem2.Size = new System.Drawing.Size(160, 22);
			toolStripMenuItem2.Text = "调试";
			pnlStatus.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
			pnlStatus.Controls.Add(tbZoom);
			pnlStatus.Controls.Add(lblZoom);
			pnlStatus.Controls.Add(lblInsState);
			pnlStatus.Controls.Add(lblPosition);
			pnlStatus.Dock = System.Windows.Forms.DockStyle.Bottom;
			pnlStatus.Location = new System.Drawing.Point(0, 257);
			pnlStatus.Name = "pnlStatus";
			pnlStatus.Size = new System.Drawing.Size(644, 24);
			pnlStatus.TabIndex = 11;
			tbZoom.AutoSize = false;
			tbZoom.Dock = System.Windows.Forms.DockStyle.Right;
			tbZoom.LargeChange = 1;
			tbZoom.Location = new System.Drawing.Point(458, 0);
			tbZoom.Name = "tbZoom";
			tbZoom.Size = new System.Drawing.Size(130, 20);
			tbZoom.TabIndex = 2;
			tbZoom.TickStyle = System.Windows.Forms.TickStyle.None;
			tbZoom.Value = 5;
			tbZoom.Enter += new System.EventHandler(tbZoom_Enter);
			lblZoom.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
			lblZoom.Dock = System.Windows.Forms.DockStyle.Right;
			lblZoom.Font = new System.Drawing.Font("宋体", 9f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 134);
			lblZoom.Location = new System.Drawing.Point(588, 0);
			lblZoom.Name = "lblZoom";
			lblZoom.Size = new System.Drawing.Size(52, 20);
			lblZoom.TabIndex = 3;
			lblZoom.Text = "100%";
			lblZoom.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
			lblInsState.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
			lblInsState.Dock = System.Windows.Forms.DockStyle.Left;
			lblInsState.Font = new System.Drawing.Font("宋体", 9f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 134);
			lblInsState.Location = new System.Drawing.Point(217, 0);
			lblInsState.Name = "lblInsState";
			lblInsState.Size = new System.Drawing.Size(42, 20);
			lblInsState.TabIndex = 1;
			lblInsState.Text = "插入";
			lblInsState.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
			lblPosition.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
			lblPosition.Dock = System.Windows.Forms.DockStyle.Left;
			lblPosition.Font = new System.Drawing.Font("宋体", 9f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 134);
			lblPosition.Location = new System.Drawing.Point(0, 0);
			lblPosition.Name = "lblPosition";
			lblPosition.Size = new System.Drawing.Size(217, 20);
			lblPosition.TabIndex = 0;
			lblPosition.Text = "  ";
			lblPosition.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			pnlPrintPreview.BackColor = System.Drawing.Color.FromArgb(186, 211, 246);
			pnlPrintPreview.Controls.Add(myPreviewControl);
			pnlPrintPreview.Location = new System.Drawing.Point(210, 33);
			pnlPrintPreview.Name = "pnlPrintPreview";
			pnlPrintPreview.Size = new System.Drawing.Size(556, 326);
			pnlPrintPreview.TabIndex = 13;
			pnlPrintPreview.Visible = false;
			myPreviewControl.BackColor = System.Drawing.Color.FromArgb(186, 211, 246);
			myPreviewControl.Dock = System.Windows.Forms.DockStyle.Fill;
			myPreviewControl.EnableSetJumpPrintPosition = true;
			myPreviewControl.Location = new System.Drawing.Point(0, 0);
			myPreviewControl.MinimumSize = new System.Drawing.Size(396, 300);
			myPreviewControl.Name = "myPreviewControl";
			myPreviewControl.ShowPageSettingsButton = false;
			myPreviewControl.Size = new System.Drawing.Size(556, 326);
			myPreviewControl.TabIndex = 1;
			cmComment.Items.AddRange(new System.Windows.Forms.ToolStripItem[2]
			{
				cmEditComment,
				cmDeleteComment
			});
			cmComment.Name = "cmComment";
			cmComment.Size = new System.Drawing.Size(134, 48);
			pnlMainContainer.ContentPanel.BackColor = System.Drawing.Color.FromArgb(186, 211, 246);
			pnlMainContainer.ContentPanel.Controls.Add(mySplitContainer);
			pnlMainContainer.ContentPanel.Controls.Add(pnlStatus);
			pnlMainContainer.ContentPanel.Size = new System.Drawing.Size(644, 281);
			pnlMainContainer.Location = new System.Drawing.Point(18, 22);
			pnlMainContainer.Name = "pnlMainContainer";
			pnlMainContainer.Size = new System.Drawing.Size(644, 381);
			pnlMainContainer.TabIndex = 14;
			pnlMainContainer.Text = "toolStripContainer1";
			pnlMainContainer.TopToolStripPanel.BackColor = System.Drawing.Color.FromArgb(215, 231, 245);
			pnlMainContainer.TopToolStripPanel.Controls.Add(mainMenuStrip);
			pnlMainContainer.TopToolStripPanel.Controls.Add(standardbar);
			pnlMainContainer.TopToolStripPanel.Controls.Add(insertbar);
			pnlMainContainer.TopToolStripPanel.Controls.Add(newcontrols);
			insertbar.BackColor = System.Drawing.Color.FromArgb(215, 231, 245);
			insertbar.Dock = System.Windows.Forms.DockStyle.None;
			insertbar.Items.AddRange(new System.Windows.Forms.ToolStripItem[8]
			{
				btnInsertTable,
				btnInsertComment,
				toolStripSeparator17,
				btnInsertFileContent,
				btnInsertSpecifyCharacter,
				btnInsertImage,
				btnInsertMedicalExpression,
				btnInsertMedicalExpress
			});
			insertbar.Location = new System.Drawing.Point(3, 50);
			insertbar.Name = "insertbar";
			insertbar.Size = new System.Drawing.Size(252, 25);
			insertbar.TabIndex = 7;
			toolStripSeparator17.Name = "toolStripSeparator17";
			toolStripSeparator17.Size = new System.Drawing.Size(6, 25);
			newcontrols.BackColor = System.Drawing.Color.FromArgb(215, 231, 245);
			newcontrols.Dock = System.Windows.Forms.DockStyle.None;
			newcontrols.Items.AddRange(new System.Windows.Forms.ToolStripItem[13]
			{
				btnNsoInsertTextBox,
				btnNsoInsertNumberBox,
				btnNsoInsertCheckbox,
				toolStripSeparator30,
				btnNsoInsertList,
				btnNsoInsertRadio,
				btnNsoInsertCombobox,
				toolStripSeparator32,
				btnNsoInsertMulListBox,
				btnNsoInsertMulCombobox,
				btnNsoInsertDateTimeBox,
				toolStripSeparator35,
				toolStripButton2
			});
			newcontrols.Location = new System.Drawing.Point(3, 75);
			newcontrols.Name = "newcontrols";
			newcontrols.ShowItemToolTips = false;
			newcontrols.Size = new System.Drawing.Size(569, 25);
			newcontrols.TabIndex = 8;
			btnNsoInsertTextBox.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Text;
			btnNsoInsertTextBox.Image = (System.Drawing.Image)resources.GetObject("btnNsoInsertTextBox.Image");
			btnNsoInsertTextBox.ImageTransparentColor = System.Drawing.Color.Magenta;
			btnNsoInsertTextBox.Name = "btnNsoInsertTextBox";
			btnNsoInsertTextBox.Size = new System.Drawing.Size(48, 22);
			btnNsoInsertTextBox.Text = "文本框";
			btnNsoInsertTextBox.Click += new System.EventHandler(btnNsoInsertTextBox_Click);
			btnNsoInsertNumberBox.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Text;
			btnNsoInsertNumberBox.Image = (System.Drawing.Image)resources.GetObject("btnNsoInsertNumberBox.Image");
			btnNsoInsertNumberBox.ImageTransparentColor = System.Drawing.Color.Magenta;
			btnNsoInsertNumberBox.Name = "btnNsoInsertNumberBox";
			btnNsoInsertNumberBox.Size = new System.Drawing.Size(48, 22);
			btnNsoInsertNumberBox.Text = "数值框";
			btnNsoInsertNumberBox.Click += new System.EventHandler(btnNsoInsertNumberBox_Click);
			btnNsoInsertCheckbox.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Text;
			btnNsoInsertCheckbox.Image = (System.Drawing.Image)resources.GetObject("btnNsoInsertCheckbox.Image");
			btnNsoInsertCheckbox.ImageTransparentColor = System.Drawing.Color.Magenta;
			btnNsoInsertCheckbox.Name = "btnNsoInsertCheckbox";
			btnNsoInsertCheckbox.Size = new System.Drawing.Size(48, 22);
			btnNsoInsertCheckbox.Text = "复选框";
			btnNsoInsertCheckbox.Click += new System.EventHandler(btnNsoInsertCheckbox_Click);
			toolStripSeparator30.Name = "toolStripSeparator30";
			toolStripSeparator30.Size = new System.Drawing.Size(6, 25);
			btnNsoInsertList.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Text;
			btnNsoInsertList.Image = (System.Drawing.Image)resources.GetObject("btnNsoInsertList.Image");
			btnNsoInsertList.ImageTransparentColor = System.Drawing.Color.Magenta;
			btnNsoInsertList.Name = "btnNsoInsertList";
			btnNsoInsertList.Size = new System.Drawing.Size(48, 22);
			btnNsoInsertList.Text = "单选框";
			btnNsoInsertList.Click += new System.EventHandler(btnNsoInsertList_Click);
			btnNsoInsertRadio.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Text;
			btnNsoInsertRadio.Image = (System.Drawing.Image)resources.GetObject("btnNsoInsertRadio.Image");
			btnNsoInsertRadio.ImageTransparentColor = System.Drawing.Color.Magenta;
			btnNsoInsertRadio.Name = "btnNsoInsertRadio";
			btnNsoInsertRadio.Size = new System.Drawing.Size(60, 22);
			btnNsoInsertRadio.Text = "单选按钮";
			btnNsoInsertRadio.Click += new System.EventHandler(btnNsoInsertRadio_Click);
			btnNsoInsertCombobox.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Text;
			btnNsoInsertCombobox.Image = (System.Drawing.Image)resources.GetObject("btnNsoInsertCombobox.Image");
			btnNsoInsertCombobox.ImageTransparentColor = System.Drawing.Color.Magenta;
			btnNsoInsertCombobox.Name = "btnNsoInsertCombobox";
			btnNsoInsertCombobox.Size = new System.Drawing.Size(72, 22);
			btnNsoInsertCombobox.Text = "单选组合框";
			btnNsoInsertCombobox.Click += new System.EventHandler(btnNsoInsertCombobox_Click);
			toolStripSeparator32.Name = "toolStripSeparator32";
			toolStripSeparator32.Size = new System.Drawing.Size(6, 25);
			btnNsoInsertMulListBox.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Text;
			btnNsoInsertMulListBox.Image = (System.Drawing.Image)resources.GetObject("btnNsoInsertMulListBox.Image");
			btnNsoInsertMulListBox.ImageTransparentColor = System.Drawing.Color.Magenta;
			btnNsoInsertMulListBox.Name = "btnNsoInsertMulListBox";
			btnNsoInsertMulListBox.Size = new System.Drawing.Size(48, 22);
			btnNsoInsertMulListBox.Text = "多选框";
			btnNsoInsertMulListBox.Click += new System.EventHandler(btnNsoInsertMulListBox_Click);
			btnNsoInsertMulCombobox.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Text;
			btnNsoInsertMulCombobox.Image = (System.Drawing.Image)resources.GetObject("btnNsoInsertMulCombobox.Image");
			btnNsoInsertMulCombobox.ImageTransparentColor = System.Drawing.Color.Magenta;
			btnNsoInsertMulCombobox.Name = "btnNsoInsertMulCombobox";
			btnNsoInsertMulCombobox.Size = new System.Drawing.Size(72, 22);
			btnNsoInsertMulCombobox.Text = "多选组合框";
			btnNsoInsertMulCombobox.Click += new System.EventHandler(btnNsoInsertMulCombobox_Click);
			btnNsoInsertDateTimeBox.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Text;
			btnNsoInsertDateTimeBox.Image = (System.Drawing.Image)resources.GetObject("btnNsoInsertDateTimeBox.Image");
			btnNsoInsertDateTimeBox.ImageTransparentColor = System.Drawing.Color.Magenta;
			btnNsoInsertDateTimeBox.Name = "btnNsoInsertDateTimeBox";
			btnNsoInsertDateTimeBox.Size = new System.Drawing.Size(72, 22);
			btnNsoInsertDateTimeBox.Text = "日期时间框";
			btnNsoInsertDateTimeBox.Click += new System.EventHandler(btnNsoInsertDateTimeBox_Click);
			toolStripSeparator35.Name = "toolStripSeparator35";
			toolStripSeparator35.Size = new System.Drawing.Size(6, 25);
			cmSingleCopy.Items.AddRange(new System.Windows.Forms.ToolStripItem[1]
			{
				toolStripMenuItem39
			});
			cmSingleCopy.Name = "cmSingleCopy";
			cmSingleCopy.Size = new System.Drawing.Size(101, 26);
			myCommandControler.SetCommandName(cmParagraph, "ParagraphFormat");
			cmParagraph.Name = "cmParagraph";
			cmParagraph.Size = new System.Drawing.Size(180, 22);
			cmParagraph.Text = "段落";
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 12f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			BackColor = System.Drawing.Color.FromArgb(200, 200, 200);
			base.Controls.Add(pnlMainContainer);
			base.Controls.Add(pnlPrintPreview);
			base.Name = "AxNsoControlBase";
			base.Size = new System.Drawing.Size(723, 443);
			base.Load += new System.EventHandler(AxNsoControlBase_Load);
			cmEdit.ResumeLayout(false);
			mainMenuStrip.ResumeLayout(false);
			mainMenuStrip.PerformLayout();
			standardbar.ResumeLayout(false);
			standardbar.PerformLayout();
			((System.ComponentModel.ISupportInitialize)myCommandControler).EndInit();
			cmImage.ResumeLayout(false);
			cmTableCell.ResumeLayout(false);
			mySplitContainer.Panel1.ResumeLayout(false);
			mySplitContainer.Panel2.ResumeLayout(false);
			mySplitContainer.ResumeLayout(false);
			tabFunction.ResumeLayout(false);
			tpNavigate.ResumeLayout(false);
			tpTrack.ResumeLayout(false);
			cmField.ResumeLayout(false);
			pnlStatus.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)tbZoom).EndInit();
			pnlPrintPreview.ResumeLayout(false);
			cmComment.ResumeLayout(false);
			pnlMainContainer.ContentPanel.ResumeLayout(false);
			pnlMainContainer.TopToolStripPanel.ResumeLayout(false);
			pnlMainContainer.TopToolStripPanel.PerformLayout();
			pnlMainContainer.ResumeLayout(false);
			pnlMainContainer.PerformLayout();
			insertbar.ResumeLayout(false);
			insertbar.PerformLayout();
			newcontrols.ResumeLayout(false);
			newcontrols.PerformLayout();
			cmSingleCopy.ResumeLayout(false);
			ResumeLayout(false);
		}

		[ComVisible(true)]
		public virtual bool InsertMedicalformula(int nType, string sID, object sContent)
		{
			int num = 5;
			BeginLogFunction("InsertMedicalformula", "nType=" + nType + " sID=" + sID + " sContent" + sContent);
			XTextMedicalExpressionFieldElement xTextMedicalExpressionFieldElement = new XTextMedicalExpressionFieldElement();
			xTextMedicalExpressionFieldElement.ID = sID;
			xTextMedicalExpressionFieldElement.ExpressionStyle = NsoMedicalTypeToDCWriter(nType);
			xTextMedicalExpressionFieldElement.SetInnerTextFast("0,1,2,3");
			if (sContent != null && sContent is string[])
			{
				string[] ienumerable_ = (string[])sContent;
				string innerTextFast = WriterUtils.smethod_12(ienumerable_, ',');
				xTextMedicalExpressionFieldElement.SetInnerTextFast(innerTextFast);
			}
			object obj = myEditControl.ExecuteCommand("InsertMedicalExpression", showUI: false, xTextMedicalExpressionFieldElement);
			if (obj != null)
			{
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool DeleteMedicalformulaByType(int lMedicalType)
		{
			int num = 1;
			BeginLogFunction("DeleteMedicalformulaByType", "lMedicalType=" + lMedicalType);
			int num2 = 0;
			XTextElementList elementsByType = myEditControl.Document.GetElementsByType(typeof(XTextMedicalExpressionFieldElement));
			foreach (XTextMedicalExpressionFieldElement item in elementsByType)
			{
				if (lMedicalType == 0)
				{
					item.Parent.RemoveChild(item);
					num2++;
				}
				else if (NsoMedicalTypeToDCWriter(lMedicalType) == item.ExpressionStyle)
				{
					item.Parent.RemoveChild(item);
					num2++;
				}
			}
			if (num2 > 0)
			{
				myEditControl.RefreshDocumentExt(refreshSize: false, executeLayout: true);
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BSTR GetAllMedicalformulasByCurrentDoc (  )
		                                                                    ///       功能描述：
		                                                                    ///       获取文档所有的医学公式对象名称
		                                                                    ///       参数：  无
		                                                                    ///       返回值：文档所有的医学公式对象名称，分隔符为”,”
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1. GetAllMedicalformulasByCurrentDoc
		                                                                    ///       Date:10-11 Jy
		                                                                    ///       </summary>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public string GetAllMedicalformulasByCurrentDoc()
		{
			int num = 6;
			BeginLogFunction("GetAllMedicalformulasByCurrentDoc", null);
			XTextElementList elementsByType = myEditControl.Document.GetElementsByType(typeof(XTextMedicalExpressionFieldElement));
			if (elementsByType != null)
			{
				StringBuilder stringBuilder = new StringBuilder();
				foreach (XTextMedicalExpressionFieldElement item in elementsByType)
				{
					stringBuilder.Append(item.ID);
					stringBuilder.Append(",");
				}
				EndLogFunction(stringBuilder.ToString());
				return stringBuilder.ToString();
			}
			EndLogFunction(null);
			return "";
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BOOL  DeleteMedicalformula ( BSTR sName )
		                                                                    ///       功能描述：
		                                                                    ///       删除指定医学公式对象
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sName	BSTR	医学公式名称	必需	
		                                                                    ///       返回值：BOOL False 失败 True 成功
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1. DeleteMedicalformula(“a”)
		                                                                    ///       实现说明：无
		                                                                    ///       Date:10-11 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool DeleteMedicalformula(string sName)
		{
			int num = 3;
			BeginLogFunction("DeleteMedicalformula", "sName=" + sName);
			if (string.IsNullOrEmpty(sName))
			{
				EndLogFunction(null);
				throw new ArgumentNullException("sName");
			}
			XTextMedicalExpressionFieldElement xTextMedicalExpressionFieldElement = GetElementById(sName) as XTextMedicalExpressionFieldElement;
			if (xTextMedicalExpressionFieldElement != null)
			{
				using (myEditControl.CreateBackgroundModeSetter())
				{
					EndLogFunction(xTextMedicalExpressionFieldElement.EditorDelete(logUndo: true));
					return xTextMedicalExpressionFieldElement.EditorDelete(logUndo: true);
				}
			}
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BOOL  SelectOneMedicalformula ( BSTR sName )
		                                                                    ///       功能描述：
		                                                                    ///       选择指定医学公式对象,光标会跳转到指定医学公式
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sName	BSTR	医学公式名称	必需	
		                                                                    ///       返回值：BOOL False 失败 True 成功
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1. SelectOneMedicalformula(“a”)
		                                                                    ///       实现说明：无
		                                                                    ///       Date:10-11 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public bool SelectOneMedicalformula(string sName)
		{
			int num = 16;
			BeginLogFunction("SelectOneMedicalformula", "sName=" + sName);
			if (sName == null)
			{
				EndLogFunction(null);
				throw new ArgumentNullException("sName");
			}
			XTextElement elementById = myEditControl.Document.GetElementById(sName);
			if (elementById is XTextMedicalExpressionFieldElement)
			{
				elementById.Focus();
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       LONG  GetMedicalformulaTypeByName ( BSTR sName )
		                                                                    ///       功能描述：
		                                                                    ///       根据名称获取医学公式的种类
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sName	BSTR	医学公式名称	必需	
		                                                                    ///       返回值：
		                                                                    ///       1 – 牙齿公式
		                                                                    ///        2 – 视野公式
		                                                                    ///        3 – 月经史公式
		                                                                    ///        4 – 其他公式
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1. GetMedicalformulaTypeByName (“a”)
		                                                                    ///       实现说明：无
		                                                                    ///       Date:10-11 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public int GetMedicalformulaTypeByName(string sName)
		{
			BeginLogFunction("GetMedicalformulaTypeByName", "sName=" + sName);
			XTextMedicalExpressionFieldElement xTextMedicalExpressionFieldElement = GetElementById(sName) as XTextMedicalExpressionFieldElement;
			if (xTextMedicalExpressionFieldElement != null)
			{
				if (xTextMedicalExpressionFieldElement.ExpressionStyle == MedicalExpressionStyle.FourValues)
				{
					EndLogFunction(3);
					return 3;
				}
				if (xTextMedicalExpressionFieldElement.ExpressionStyle == MedicalExpressionStyle.FourValues1)
				{
					EndLogFunction(1);
					return 1;
				}
				if (xTextMedicalExpressionFieldElement.ExpressionStyle == MedicalExpressionStyle.FourValues2)
				{
					EndLogFunction(2);
					return 2;
				}
				if (xTextMedicalExpressionFieldElement.ExpressionStyle == MedicalExpressionStyle.ThreeValues)
				{
					EndLogFunction(4);
					return 4;
				}
				EndLogFunction(4);
				return 4;
			}
			EndLogFunction(0);
			return 0;
		}

		[ComVisible(true)]
		public string GetMedicalformulaText(string sName)
		{
			BeginLogFunction("GetMedicalformulaText", "sName=" + sName);
			if (string.IsNullOrEmpty(sName))
			{
				EndLogFunction(null);
				return "";
			}
			XTextMedicalExpressionFieldElement xTextMedicalExpressionFieldElement = myEditControl.Document.GetElementById(sName) as XTextMedicalExpressionFieldElement;
			if (xTextMedicalExpressionFieldElement != null)
			{
				string text = xTextMedicalExpressionFieldElement.Text;
				if (text != null)
				{
					text = text.Replace(',', '&');
					EndLogFunction(text);
					return text;
				}
			}
			EndLogFunction(null);
			return "";
		}

		[ComVisible(true)]
		public virtual bool SetMedicalformulaText(bool bChangedType, int nChangedType, string sID, object sContent)
		{
			int num = 17;
			BeginLogFunction("SetMedicalformulaText", "bChangedType=" + bChangedType + "  nChangedType=" + nChangedType + "  sID=" + sID + "  sContent=" + sContent);
			XTextMedicalExpressionFieldElement xTextMedicalExpressionFieldElement = GetElementById(sID) as XTextMedicalExpressionFieldElement;
			if (xTextMedicalExpressionFieldElement != null)
			{
				if (myEditControl.DocumentControler.CanModify(xTextMedicalExpressionFieldElement))
				{
					if (bChangedType)
					{
						xTextMedicalExpressionFieldElement.ExpressionStyle = NsoMedicalTypeToDCWriter(nChangedType);
					}
					if (sContent is string[])
					{
						string[] ienumerable_ = (string[])sContent;
						string innerTextFast = WriterUtils.smethod_12(ienumerable_, ',');
						xTextMedicalExpressionFieldElement.SetInnerTextFast(innerTextFast);
					}
					xTextMedicalExpressionFieldElement.EditorRefreshView();
				}
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		private MedicalExpressionStyle NsoMedicalTypeToDCWriter(int nType)
		{
			switch (nType)
			{
			default:
				return MedicalExpressionStyle.FourValues;
			case 1:
				return MedicalExpressionStyle.FourValues1;
			case 2:
				return MedicalExpressionStyle.FourValues1;
			case 3:
				return MedicalExpressionStyle.FourValues2;
			case 4:
				return MedicalExpressionStyle.ThreeValues;
			}
		}

		[ComVisible(true)]
		public void SetIntellectiveInput(bool bFlag, int nNumber)
		{
			BeginLogFunction("SetIntellectiveInput", "bFlag=" + bFlag + "  nNumber" + nNumber);
			if (myEditControl != null)
			{
				myEditControl.DocumentOptions.BehaviorOptions.AutoAssistInsertString = bFlag;
				myEditControl.DocumentOptions.BehaviorOptions.AutoAssistInsertStringDetectTextLength = nNumber;
			}
			EndLogFunction(null);
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       void RemoveAllUsingDict (void)
		                                                                    ///       功能描述：
		                                                                    ///       移除所有的正在试用的词典
		                                                                    ///       参数：
		                                                                    ///       无
		                                                                    ///       返回值：
		                                                                    ///       无
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. RemoveAllUsingDict()
		                                                                    ///       实现说明：无
		                                                                    ///       Date:10-12 Jy
		                                                                    ///       </summary>
		[ComVisible(true)]
		public void RemoveAllUsingDict()
		{
			BeginLogFunction("RemoveAllUsingDict", null);
			if (myEditControl != null && myEditControl.InnerViewControl.AssistStringListForm != null)
			{
				myEditControl.InnerViewControl.AssistStringListForm.imethod_5();
			}
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public bool ImportOneDict(string sName)
		{
			BeginLogFunction("ImportOneDict", "sName=" + sName);
			_DictFileNames.Add(sName);
			myEditControl.ExecuteCommand("LoadGlobalAssistStringItemFromFile", showUI: false, sName);
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       Long RemoveUsingDict (BSTR sName)
		                                                                    ///       功能描述：
		                                                                    ///       移除指定名称为sName的正在使用的辞典
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sName	String	移除辞典的名称	必需	
		                                                                    ///       返回值：
		                                                                    ///       是否成功；1 成功，-1 失败
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. RemoveUsingDict (“b”)
		                                                                    ///       实现说明：无
		                                                                    ///       Date:10-12 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="sName">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public int RemoveUsingDict(string sName)
		{
			BeginLogFunction("RemoveUsingDict", "sName=" + sName);
			EndLogFunction(-1);
			return -1;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BSTR GetUsingDictName ( )
		                                                                    ///       功能描述：
		                                                                    ///       获取所有正在使用的辞典的全路径字符串
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       pVal	BSTR*	返回值		所有正在使用的辞典的全路径字符串
		                                                                    ///       返回值：
		                                                                    ///       所有正在使用的辞典的全路径字符串 
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. GetUsingDictName ()
		                                                                    ///       实现说明：无
		                                                                    ///       Date:10-12 Jy
		                                                                    ///       </summary>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public string GetUsingDictName()
		{
			BeginLogFunction("GetUsingDictName", null);
			EndLogFunction(null);
			return null;
		}

		[ComVisible(true)]
		public virtual bool ImportOneDictWithStream(string sName, object stmFile)
		{
			int num = 15;
			BeginLogFunction("ImportOneDictWithStream", "sName=" + sName + "  stmFile=" + stmFile);
			if (myEditControl != null)
			{
				Stream stream = stmFile as Stream;
				if (stream != null && myEditControl.InnerViewControl.AssistStringListForm != null && myEditControl.InnerViewControl.AssistStringListForm.imethod_2(stream) > 0)
				{
					EndLogFunction("true");
					return true;
				}
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool ImportOneDictWithString(string sName, string sBase64FileString)
		{
			int num = 4;
			BeginLogFunction("ImportOneDictWithString", "sName=" + sName + "  sBase64FileString=" + sBase64FileString);
			if (myEditControl != null && !string.IsNullOrEmpty(sBase64FileString))
			{
				byte[] buffer = Convert.FromBase64String(sBase64FileString);
				MemoryStream stream_ = new MemoryStream(buffer);
				if (myEditControl.InnerViewControl.AssistStringListForm != null && myEditControl.InnerViewControl.AssistStringListForm.imethod_2(stream_) > 0)
				{
					EndLogFunction("true");
					return true;
				}
			}
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       保存选择的文档区域到流中
		                                                                    ///       </summary>
		                                                                    /// <param name="data">输出的数据</param>
		                                                                    /// <returns>操作是否成功</returns>
		[ComVisible(true)]
		public bool SaveSelectAreaToStream(ref object data)
		{
			int num = 8;
			BeginLogFunction("SaveSelectAreaToStream", "data=" + data);
			if (MyWriterControl.Selection.Length == 0)
			{
				EndLogFunction("false");
				return false;
			}
			BeginLogFunction("SaveSelectAreaToStream", null);
			MemoryStream memoryStream = new MemoryStream();
			using (XTextDocument xTextDocument = MyWriterControl.Document.Selection.CreateDocument())
			{
				xTextDocument.Save(memoryStream, "xml");
			}
			memoryStream.Close();
			data = memoryStream.ToArray();
			EndLogFunction("true");
			return true;
		}

		[ComVisible(true)]
		public bool MergeDocuments(bool bDifferentHeader, bool bFirstDifferentHeader, string sFileUrl)
		{
			int num = 17;
			BeginLogFunction("MergeDocuments", "FileUrl=" + sFileUrl);
			bool backgroundMode = myEditControl.BackgroundMode;
			try
			{
				MyWriterControl.BackgroundMode = true;
				MyWriterControl.ExecuteCommand("MoveTo", showUI: false, MoveTarget.DocumentEnd);
				MyWriterControl.ExecuteCommand("InsertFileContent", showUI: false, sFileUrl);
				EndLogFunction("true");
			}
			finally
			{
				myEditControl.BackgroundMode = backgroundMode;
			}
			EndLogFunction("true");
			return true;
		}

		[ComVisible(true)]
		public virtual string ImportFileAtCurrentCursorWithStream(object stmFile)
		{
			int num = 12;
			BeginLogFunction("ImportFileAtCurrentCursorWithStream", "stmFile=" + stmFile);
			byte[] array = stmFile as byte[];
			if (array == null)
			{
				EndLogFunction(null);
				return "";
			}
			XTextDocument xTextDocument = new XTextDocument();
			if (InnerOpenDocumentBinary(array, xTextDocument))
			{
				XTextElementList elements = (XTextElementList)myEditControl.ExecuteCommand("InsertFileContent", showUI: false, xTextDocument);
				StringBuilder stringBuilder = new StringBuilder();
				stringBuilder.Append(FilterStructsByPropInner(elements, 1, null, null, forInsertFile: true));
				EndLogFunction(stringBuilder.ToString());
				return stringBuilder.ToString();
			}
			EndLogFunction("-1");
			return "-1";
		}

		[ComVisible(true)]
		public virtual string ImportFileAtCurrentCursorWithString(string base64String)
		{
			BeginLogFunction("ImportFileAtCurrentCursorWithString", "base64String=" + base64String);
			if (string.IsNullOrEmpty(base64String))
			{
				EndLogFunction(null);
				return "";
			}
			byte[] stmFile = Convert.FromBase64String(base64String);
			EndLogFunction(ImportFileAtCurrentCursorWithStream(stmFile));
			return ImportFileAtCurrentCursorWithStream(stmFile);
		}

		[ComVisible(true)]
		public virtual WdInfo ReloadDoc()
		{
			BeginLogFunction("ReloadDoc", null);
			AlertNotSupportedMember("ReloadDoc");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public string ImportFileAtCurrentCursor(string sFileUrl)
		{
			int num = 15;
			if (string.IsNullOrEmpty(sFileUrl))
			{
				return "";
			}
			BeginLogFunction("ImportFileAtCurrentCursor", "FileUrl=" + sFileUrl);
			byte[] stmFile = FileHelper.LoadBinaryFile(sFileUrl, throwException: true);
			string result = ImportFileAtCurrentCursorWithStream(stmFile);
			EndLogFunction(result);
			return result;
		}

		private string InnerInsertFile(string FilePath, bool getXML)
		{
			int num = 1;
			if (string.IsNullOrEmpty(FilePath))
			{
				return "";
			}
			if (!File.Exists(FilePath))
			{
				return "";
			}
			BeginLogFunction("InsertFile", "FilePath=" + FilePath + "  getXML=" + getXML);
			byte[] byte_ = File.ReadAllBytes(FilePath);
			XTextDocument xTextDocument = new XTextDocument();
			if (InnerOpenDocumentBinary(byte_, xTextDocument))
			{
				XTextElementList xTextElementList = (XTextElementList)myEditControl.ExecuteCommand("InsertFileContent", showUI: false, xTextDocument);
				if (getXML && xTextElementList != null && xTextElementList.Count > 0)
				{
					string sectionNewControlIDsWithStruct = GetSectionNewControlIDsWithStruct(xTextElementList);
					EndLogFunction(sectionNewControlIDsWithStruct);
					return sectionNewControlIDsWithStruct;
				}
			}
			EndLogFunction(null);
			return "";
		}

		private string InnerInsertFileBinary(byte[] byte_0, bool getXML)
		{
			int num = 2;
			XTextDocument xTextDocument = new XTextDocument();
			if (InnerOpenDocumentBinary(byte_0, xTextDocument))
			{
				XTextElementList xTextElementList = (XTextElementList)myEditControl.ExecuteCommand("InsertFileContent", showUI: false, xTextDocument);
				if (getXML && xTextElementList != null && xTextElementList.Count > 0)
				{
					string sectionNewControlIDsWithStruct = GetSectionNewControlIDsWithStruct(xTextElementList);
					BeginLogFunction(sectionNewControlIDsWithStruct);
					return sectionNewControlIDsWithStruct;
				}
			}
			return "";
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       void InsertFile ( BSTR FilePath )
		                                                                    ///       功能描述：
		                                                                    ///       插入指定文档。
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       FilePath	BSTR	需在文档插入文件的路径名	必需	
		                                                                    ///       返回值：无
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1.InsertFile("c:/temp/doc.odt")
		                                                                    ///       实现说明：支持的格式包括：
		                                                                    ///       Date:10-9 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="FilePath">
		                                                                    /// </param>
		[ComVisible(true)]
		public void InsertFile(string FilePath)
		{
			BeginLogFunction("InsertFile", "FilePath=" + FilePath);
			InnerInsertFile(FilePath, getXML: false);
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public string GetFilePath()
		{
			BeginLogFunction("GetFilePath", null);
			EndLogFunction(MyWriterControl.Document.FileName);
			return MyWriterControl.Document.FileName;
		}

		[ComVisible(true)]
		public int CreateNew(string module)
		{
			BeginLogFunction("CreateNew", "module=" + module);
			_ValueOfHasFileOpened = "newfile";
			ClearState();
			MyWriterControl.ExecuteCommand("FileNew", showUI: false, null);
			myEditControl.Focus();
			EndLogFunction(0);
			return 0;
		}

		private void ClearState()
		{
			UnlockCurrentFile();
			pnlMainContainer.Visible = true;
			pnlMainContainer.Dock = DockStyle.Fill;
			pnlPrintPreview.Visible = false;
			Update();
			_ListForSetStructNavigationInfo = null;
			_ListForSetTableStyleProtected.Clear();
			_ListForSetTableDeleteProtected.Clear();
			_AllTables = new XTextElementList();
			myEditControl.Focus();
		}

		                                                                    /// <summary>
		                                                                    ///       校验文档内容
		                                                                    ///       </summary>
		                                                                    /// <returns>
		                                                                    /// </returns>
		private bool CheckValidateDocument()
		{
			int num = 7;
			if (_ValidateRequireWhenSave)
			{
				ValueValidateResultList valueValidateResultList = (ValueValidateResultList)MyWriterControl.ExecuteCommand("DocumentValueValidate", showUI: true, null);
				if (valueValidateResultList != null && valueValidateResultList.Count > 0)
				{
					return false;
				}
			}
			else
			{
				myEditControl.Document.ClearValueValidateResult();
			}
			return true;
		}

		[ComVisible(true)]
		public WdInfo Save()
		{
			int num = 13;
			BeginLogFunction("Save", null);
			WdInfo wdInfo = WdInfo.wdSuccess;
			UnlockCurrentFile();
			if (!CheckValidateDocument())
			{
				wdInfo = WdInfo.wdFail;
			}
			wdInfo = ((!(bool)MyWriterControl.ExecuteCommand("FileSave", showUI: true, null)) ? WdInfo.wdcurle_write_error : WdInfo.wdSuccess);
			EndLogFunction(wdInfo.ToString());
			return wdInfo;
		}

		[ComVisible(true)]
		public WdInfo SaveAs(string fileName)
		{
			int num = 0;
			if (string.IsNullOrEmpty(fileName))
			{
				return WdInfo.wdFail;
			}
			BeginLogFunction("SaveAs", "fileName=" + fileName);
			WdInfo wdInfo = WdInfo.wdSuccess;
			UnlockCurrentFile();
			if (!CheckValidateDocument())
			{
				wdInfo = WdInfo.wdFail;
			}
			else
			{
				fileName = fileName.Trim();
				string directoryName = Path.GetDirectoryName(fileName);
				if (!Directory.Exists(directoryName))
				{
					Directory.CreateDirectory(directoryName);
				}
				ImageFormat imageFormat = GClass343.smethod_3(fileName);
				if (imageFormat != null)
				{
					using (Bitmap bitmap = myEditControl.Document.CreatePageBmp(0, showMarginLine: true))
					{
						if (bitmap != null)
						{
							bitmap.Save(fileName, imageFormat);
							EndLogFunction(wdInfo.ToString());
							return WdInfo.wdSuccess;
						}
					}
				}
				FileSaveCommandParameter fileSaveCommandParameter = new FileSaveCommandParameter();
				fileSaveCommandParameter.FileName = fileName;
				fileSaveCommandParameter.AutoSetFormat = true;
				fileSaveCommandParameter.BackgroundMode = false;
				wdInfo = ((!(bool)MyWriterControl.ExecuteCommand("FileSave", showUI: false, fileSaveCommandParameter)) ? WdInfo.wdcurle_write_error : WdInfo.wdSuccess);
			}
			EndLogFunction(wdInfo.ToString());
			return wdInfo;
		}

		[ComVisible(true)]
		public WdInfo SaveAs2(string fileName, bool backEnd)
		{
			int num = 7;
			BeginLogFunction("SaveAs2", "fileName=" + fileName + "backEnd" + backEnd);
			WdInfo wdInfo = WdInfo.wdSuccess;
			UnlockCurrentFile();
			if (backEnd && !CheckValidateDocument())
			{
				wdInfo = WdInfo.wdFail;
			}
			else
			{
				string directoryName = Path.GetDirectoryName(fileName);
				if (!Directory.Exists(directoryName))
				{
					Directory.CreateDirectory(directoryName);
				}
				ImageFormat imageFormat = GClass343.smethod_3(fileName);
				if (imageFormat != null)
				{
					using (Bitmap bitmap = myEditControl.Document.CreatePageBmp(0, showMarginLine: true))
					{
						if (bitmap != null)
						{
							bitmap.Save(fileName, imageFormat);
							EndLogFunction(wdInfo.ToString());
							return WdInfo.wdSuccess;
						}
					}
				}
				FileSaveCommandParameter fileSaveCommandParameter = new FileSaveCommandParameter();
				fileSaveCommandParameter.FileName = fileName;
				fileSaveCommandParameter.AutoSetFormat = true;
				fileSaveCommandParameter.BackgroundMode = backEnd;
				wdInfo = ((!(bool)MyWriterControl.ExecuteCommand("FileSave", showUI: false, fileSaveCommandParameter)) ? WdInfo.wdcurle_write_error : WdInfo.wdSuccess);
			}
			EndLogFunction(wdInfo.ToString());
			return wdInfo;
		}

		[ComVisible(true)]
		public object SaveToStream2()
		{
			int num = 6;
			BeginLogFunction("SaveToStream2", null);
			UnlockCurrentFile();
			if (!CheckValidateDocument())
			{
				EndLogFunction(null);
				return "";
			}
			MemoryStream memoryStream = new MemoryStream();
			MyWriterControl.SaveDocument(memoryStream, "xml");
			memoryStream.Close();
			EndLogFunction(memoryStream.ToArray());
			return memoryStream.ToArray();
		}

		[ComVisible(true)]
		public string HasFileOpened()
		{
			BeginLogFunction("HasFileOpened", null);
			EndLogFunction(_ValueOfHasFileOpened);
			return _ValueOfHasFileOpened;
		}

		[ComVisible(true)]
		public bool InsertFileWithStream(object stmFile)
		{
			int num = 19;
			BeginLogFunction("InsertFileWithStream", "stmFile" + stmFile);
			if (stmFile == null)
			{
				throw new ArgumentNullException("stmFile");
			}
			if (stmFile is byte[])
			{
				byte[] byte_ = (byte[])stmFile;
				XTextDocument xTextDocument = new XTextDocument();
				if (InnerOpenDocumentBinary(byte_, xTextDocument))
				{
					if (!(xTextDocument.Body.Elements.LastElement is XTextParagraphFlagElement))
					{
						xTextDocument.Body.Elements.Add(new XTextParagraphFlagElement());
					}
					XTextParagraphFlagElement xTextParagraphFlagElement = xTextDocument.Body.Elements.LastElement as XTextParagraphFlagElement;
					if (xTextParagraphFlagElement != null)
					{
						xTextParagraphFlagElement.AutoCreate = false;
					}
					XTextElementList xTextElementList = (XTextElementList)MyWriterControl.ExecuteCommand("InsertFileContent", showUI: false, xTextDocument);
					EndLogFunction((xTextElementList != null && xTextElementList.Count > 0).ToString());
					return xTextElementList != null && xTextElementList.Count > 0;
				}
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public WdInfo OpenDocument(string fileName, int nFlag)
		{
			int num = 10;
			BeginLogFunction("OpenDocument", "fileName=" + fileName + "nFlag" + nFlag);
			if (!File.Exists(fileName))
			{
				throw new FileNotFoundException(fileName);
			}
			ClearState();
			pnlPrintPreview.Visible = false;
			pnlMainContainer.Visible = true;
			mainMenuStrip.BringToFront();
			myEditControl.Focus();
			myEditControl.InnerViewControl.SpecifyLoadFileNameOnce = fileName;
			Update();
			bool flag = false;
			byte[] array = FileHelper.LoadBinaryFile(fileName, throwException: true);
			if (array == null || array.Length == 0)
			{
				throw new Exception("未能读取文件内容或文件内容为空");
			}
			switch (nFlag)
			{
			case 0:
				flag = InnerOpenDocumentBinary(array, null);
				ProtectDoc(bProtect: true);
				break;
			case 1:
				flag = InnerOpenDocumentBinary(array, null);
				ProtectDoc(bProtect: false);
				MyWriterControl.Document.FileName = null;
				break;
			case 2:
				flag = InnerOpenDocumentBinary(array, null);
				ProtectDoc(bProtect: false);
				break;
			case 3:
				flag = InnerOpenDocumentBinary(array, null);
				ProtectDoc(bProtect: true);
				MyWriterControl.Document.FileName = null;
				break;
			case 4:
				ProtectDoc(bProtect: false);
				MyWriterControl.ExecuteCommand("FileNew", showUI: false, null);
				flag = true;
				break;
			}
			myEditControl.Document.FileName = fileName;
			WdInfo wdInfo = WdInfo.wdSuccess;
			if (flag)
			{
				myEditControl.Document.FileName = fileName;
				if (nFlag != 1 && nFlag != 3)
				{
					LockCurrentFile(fileName);
				}
				wdInfo = WdInfo.wdSuccess;
			}
			else
			{
				wdInfo = WdInfo.wdcurle_read_error;
			}
			_ValueOfHasFileOpened = fileName;
			EndLogFunction(wdInfo);
			return wdInfo;
		}

		[ComVisible(true)]
		public WdInfo OpenDocumentWithStream(object stmLoad, int nFlag)
		{
			int num = 16;
			BeginLogFunction("OpenDocumentWithStream", string.Concat("stmLoad=", stmLoad, "nFlag", nFlag));
			ClearState();
			pnlMainContainer.Visible = true;
			mainMenuStrip.BringToFront();
			pnlPrintPreview.Visible = false;
			myEditControl.Focus();
			Update();
			if (stmLoad == null)
			{
				throw new ArgumentNullException("stmLoad");
			}
			WdInfo wdInfo = WdInfo.wdSuccess;
			if (stmLoad is byte[])
			{
				byte[] byte_ = (byte[])stmLoad;
				wdInfo = ((!InnerOpenDocumentBinary(byte_, null)) ? WdInfo.wdFail : WdInfo.wdSuccess);
				if (nFlag == 0 || nFlag == 3)
				{
					ProtectDoc(bProtect: true);
				}
				else
				{
					ProtectDoc(bProtect: false);
				}
			}
			else
			{
				wdInfo = WdInfo.wdFileDamaged;
			}
			_ValueOfHasFileOpened = "private:stream";
			EndLogFunction(wdInfo);
			return wdInfo;
		}

		[ComVisible(true)]
		public virtual WdInfo OpenDocumentWithString(string sContent, int nFlag)
		{
			int num = 16;
			BeginLogFunction("OpenDocumentWithString", "sContent=" + GClass369.smethod_2(sContent) + " nFlag" + nFlag);
			ClearState();
			pnlMainContainer.Visible = true;
			mainMenuStrip.BringToFront();
			pnlPrintPreview.Visible = false;
			myEditControl.Focus();
			Update();
			if (string.IsNullOrEmpty(sContent))
			{
				_ValueOfHasFileOpened = "-1";
				myEditControl.ClearContent();
				EndLogFunction(WdInfo.wdFail);
				return WdInfo.wdFail;
			}
			try
			{
				byte[] array = null;
				try
				{
					array = Convert.FromBase64String(sContent);
				}
				catch (Exception ex)
				{
					EndLogFunction(string.Concat(WdInfo.wdFail, ex.Message));
					return WdInfo.wdFail;
				}
				if (nFlag == 0 || nFlag == 3)
				{
					ProtectDoc(bProtect: true);
				}
				else
				{
					ProtectDoc(bProtect: false);
				}
				if (InnerOpenDocumentBinary(array, null))
				{
					_ValueOfHasFileOpened = "private:stream";
					myEditControl.Document.FileName = null;
					EndLogFunction(WdInfo.wdFail);
					return WdInfo.wdSuccess;
				}
				EndLogFunction(WdInfo.wdFail);
				return WdInfo.wdFail;
			}
			catch (Exception ex)
			{
				MessageBox.Show(this, ex.ToString());
				EndLogFunction(string.Concat(WdInfo.wdFail, ex.Message));
				return WdInfo.wdFail;
			}
		}

		                                                                    /// <summary>
		                                                                    ///       判断数据是否是ODT格式
		                                                                    ///       </summary>
		                                                                    /// <param name="bs">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		private static bool IsODTFormat(byte[] byte_0)
		{
			if (GClass339.smethod_3(byte_0))
			{
				return true;
			}
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       解密ODT文件
		                                                                    ///       </summary>
		                                                                    /// <param name="bs">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		internal byte[] DecryptODTBinary(byte[] byte_0)
		{
			if (this.EventODTDecryptBinary != null)
			{
				byte[] array = this.EventODTDecryptBinary(byte_0);
				if (array != null)
				{
					return array;
				}
			}
			if (this.EventODTDecryptBase64String != null)
			{
				string inputBase64String = Convert.ToBase64String(byte_0);
				string text = this.EventODTDecryptBase64String(inputBase64String);
				if (text != null && text.Length > 3)
				{
					return Convert.FromBase64String(text);
				}
			}
			return null;
		}

		private bool InnerOpenDocumentBinary(byte[] byte_0, XTextDocument specifyDocument)
		{
			return InnerOpenDocumentBinary(this, byte_0, specifyDocument);
		}

		internal static bool InnerOpenDocumentBinary(AxNsoControlBase axNsoControlBase_0, byte[] byte_0, XTextDocument specifyDocument)
		{
			int num = 5;
			if (axNsoControlBase_0 != null && axNsoControlBase_0.IsDisposed)
			{
				throw new Exception("控件已经被销毁了");
			}
			float tickCountFloat = CountDown.GetTickCountFloat();
			if (axNsoControlBase_0 != null && !axNsoControlBase_0.IsHandleCreated)
			{
				axNsoControlBase_0.CreateControl();
			}
			string format = null;
			if (axNsoControlBase_0 != null && (specifyDocument == null || specifyDocument == axNsoControlBase_0.myEditControl.Document))
			{
				axNsoControlBase_0?.myEditControl.ClearContent();
			}
			while (true)
			{
				if (!IsODTFormat(byte_0))
				{
					MemoryStream stream = new MemoryStream(byte_0);
					StreamReader streamReader = new StreamReader(stream, Encoding.UTF8, detectEncodingFromByteOrderMarks: true);
					char[] array = new char[100];
					int length = streamReader.Read(array, 0, array.Length);
					streamReader.Close();
					string text = new string(array, 0, length);
					if (text.IndexOf("<Template") >= 0 && text.IndexOf("<TemplateInfo") >= 0)
					{
						XmlDocument xmlDocument = new XmlDocument();
						xmlDocument.Load(new MemoryStream(byte_0));
						XmlNode xmlNode = xmlDocument.SelectSingleNode("Template/InputData/Binary");
						if (xmlNode != null)
						{
							string innerText = xmlNode.InnerText;
							byte_0 = Convert.FromBase64String(innerText);
							continue;
						}
						return false;
					}
					if (text.IndexOf("<Template") >= 0 && text.IndexOf("<Binary>") > 0)
					{
						XmlDocument xmlDocument = new XmlDocument();
						xmlDocument.Load(new MemoryStream(byte_0));
						XmlNode xmlNode = xmlDocument.SelectSingleNode("Template/Binary");
						if (xmlNode != null)
						{
							string innerText = xmlNode.InnerText;
							byte_0 = Convert.FromBase64String(innerText);
							continue;
						}
						return false;
					}
					if (text.IndexOf("<DocObjContent") < 0 || text.IndexOf("<DocObjContent") >= 20)
					{
						break;
					}
					return false;
				}
				format = "odt";
				break;
			}
			bool flag = false;
			if (specifyDocument == null)
			{
				if (axNsoControlBase_0 != null)
				{
					flag = axNsoControlBase_0.myEditControl.LoadDocumentFromBinary(byte_0, format);
					if (!string.IsNullOrEmpty(axNsoControlBase_0._Value_SetExtraCopyInformation))
					{
						axNsoControlBase_0.myEditControl.Document.Info.MRID = axNsoControlBase_0._Value_SetExtraCopyInformation;
					}
					if (flag)
					{
						foreach (XTextInputFieldElement item in axNsoControlBase_0.myEditControl.Document.GetElementsByType(typeof(XTextInputFieldElement)))
						{
							if (item.ID == item.Name)
							{
								item.Name = null;
							}
						}
						axNsoControlBase_0.myEditControl.UpdatePages();
						axNsoControlBase_0.myEditControl.MoveTo(MoveTarget.DocumentEnd);
						axNsoControlBase_0.Document.ValueValidate();
					}
				}
			}
			else
			{
				MemoryStream stream = new MemoryStream(byte_0);
				specifyDocument.Load(stream, format);
				flag = true;
			}
			XTextDocument xTextDocument = specifyDocument;
			if (xTextDocument == null && axNsoControlBase_0 != null)
			{
				xTextDocument = axNsoControlBase_0.myEditControl.Document;
			}
			if (xTextDocument == null)
			{
				return false;
			}
			bool flag2 = false;
			bool flag3 = false;
			foreach (XTextInputFieldElement item2 in xTextDocument.GetElementsByType(typeof(XTextInputFieldElement)))
			{
				if (item2.ValidateStyle != null && item2.ValidateStyle.Required)
				{
					if (!(axNsoControlBase_0?._DesignTemplateMode ?? true))
					{
						item2.BackgroundTextColor = Color.Red;
						flag2 = true;
					}
					else
					{
						item2.BackgroundTextColor = Color.Transparent;
					}
				}
				else
				{
					item2.BackgroundTextColor = Color.Transparent;
				}
				string attribute = item2.GetAttribute("BorderEndString");
				if (attribute != item2.EndBorderText)
				{
					item2.EndBorderText = attribute;
					flag3 = true;
				}
				attribute = item2.GetAttribute("BorderStartString");
				if (attribute != item2.StartBorderText)
				{
					item2.StartBorderText = attribute;
					flag3 = true;
				}
			}
			if (axNsoControlBase_0 != null)
			{
				if (xTextDocument == axNsoControlBase_0.myEditControl.Document)
				{
					if (flag3)
					{
						axNsoControlBase_0.myEditControl.RefreshDocument();
					}
					else if (flag2)
					{
						axNsoControlBase_0.myEditControl.Invalidate();
					}
				}
				tickCountFloat = CountDown.GetTickCountFloat() - tickCountFloat;
				if (axNsoControlBase_0.myEditControl.DocumentOptions.BehaviorOptions.SpecifyDebugMode)
				{
					MessageBox.Show(axNsoControlBase_0, "InnerOpenDocumentBinary( ) 耗时 " + tickCountFloat + " 毫秒");
				}
			}
			return flag;
		}

		[ComVisible(true)]
		public virtual WdInfo SaveToStream(ref object stmSave)
		{
			int num = 4;
			BeginLogFunction("SaveToStream", "stmSave=" + stmSave);
			UnlockCurrentFile();
			if (!CheckValidateDocument())
			{
				EndLogFunction(WdInfo.wdcurle_write_error);
				return WdInfo.wdcurle_write_error;
			}
			MemoryStream memoryStream = new MemoryStream();
			MyWriterControl.SaveDocument(memoryStream, "xml");
			memoryStream.Close();
			stmSave = memoryStream.ToArray();
			EndLogFunction(WdInfo.wdSuccess);
			return WdInfo.wdSuccess;
		}

		[ComVisible(true)]
		public virtual string SaveToString()
		{
			int num = 8;
			BeginLogFunction("SaveToString", null);
			if (HasFileOpened() == "-1")
			{
				EndLogFunction(null);
				return "";
			}
			float tickCountFloat = CountDown.GetTickCountFloat();
			UnlockCurrentFile();
			string s = myEditControl.SaveDocumentToString(null);
			byte[] bytes = Encoding.UTF8.GetBytes(s);
			string result = Convert.ToBase64String(bytes);
			tickCountFloat = CountDown.GetTickCountFloat() - tickCountFloat;
			if (myEditControl.DocumentOptions.BehaviorOptions.SpecifyDebugMode)
			{
				MessageBox.Show(this, "SaveToString() 耗时 " + tickCountFloat + " 毫秒");
			}
			EndLogFunction(result);
			return result;
		}

		[ComVisible(true)]
		public virtual bool InsertFileWithString(string base64String)
		{
			int num = 18;
			BeginLogFunction("InsertFileWithString", "base64String=" + GClass369.smethod_2(base64String));
			bool flag = false;
			if (!string.IsNullOrEmpty(base64String))
			{
				XTextDocument xTextDocument = new XTextDocument();
				byte[] byte_ = Convert.FromBase64String(base64String);
				if (InnerOpenDocumentBinary(byte_, xTextDocument))
				{
					if (!(xTextDocument.Body.Elements.LastElement is XTextParagraphFlagElement))
					{
						xTextDocument.Body.Elements.Add(new XTextParagraphFlagElement());
					}
					XTextParagraphFlagElement xTextParagraphFlagElement = xTextDocument.Body.Elements.LastElement as XTextParagraphFlagElement;
					if (xTextParagraphFlagElement != null)
					{
						xTextParagraphFlagElement.AutoCreate = false;
					}
					XTextElementList xTextElementList = myEditControl.ExecuteCommand("InsertFileContent", showUI: false, xTextDocument) as XTextElementList;
					flag = (xTextElementList != null && xTextElementList.Count > 0);
				}
			}
			EndLogFunction(flag);
			return flag;
		}

		[ComVisible(true)]
		public virtual bool SaveSelectAreaToStreamWithoutRedundant(bool bBlankLine, bool bSpace, bool bTab, bool bStart, bool bEnd, ref object stmSave)
		{
			BeginLogFunction("SaveSelectAreaToStreamWithoutRedundant", "bBlankLine=" + bBlankLine + "  bSpace=" + bSpace + "  bTab=" + bTab + "  bStart=" + bStart + "  bEnd=" + bEnd + "  stmSave=" + stmSave);
			AlertNotSupportedMember("SaveSelectAreaToStreamWithoutRedundant");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BSTR SaveSelectAreaToString()
		                                                                    ///       功能描述：
		                                                                    ///       保存选中区域的内容为字符串数据。
		                                                                    ///       参数：
		                                                                    ///       无
		                                                                    ///       返回值：
		                                                                    ///       BSTR 字符串
		                                                                    ///       代码示例（VB）：
		                                                                    ///       以简单的VB代码作为例子
		                                                                    ///        Dim arr() As Byte
		                                                                    ///       Str1 = AxNsoControl1. SaveSelectAreaToString ().
		                                                                    ///       实现说明：
		                                                                    ///       如果选中区域不合法，比如选中结构的一半，则直接返回空。如果保存成功，
		                                                                    ///       则保存为字符串流后可以通过OpenDocumentWithString接口打开该流
		                                                                    ///       </summary>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public virtual string SaveSelectAreaToString()
		{
			BeginLogFunction("SaveSelectAreaToString", null);
			XTextDocument xTextDocument = myEditControl.Selection.CreateDocument();
			if (xTextDocument != null)
			{
				string xMLText = xTextDocument.XMLText;
				byte[] bytes = Encoding.UTF8.GetBytes(xMLText);
				string result = Convert.ToBase64String(bytes);
				EndLogFunction(result);
				return result;
			}
			EndLogFunction(null);
			return "";
		}

		                                                                    /// <summary>
		                                                                    ///       保存选中区域的内容为特定格式的本地文件
		                                                                    ///       </summary>
		                                                                    /// <param name="nFileFormat">导出的文件格式1 – rtf 2 -- html</param>
		                                                                    /// <param name="sFileUrl">导出的本地文件路径</param>
		                                                                    /// <returns>BOOL, True：成功, False：不成功</returns>
		[ComVisible(true)]
		public virtual bool ExportSelectAreaToFile(int nFileFormat, string sFileUrl)
		{
			int num = 16;
			BeginLogFunction("ExportSelectAreaToFile", "nFileFormat=" + nFileFormat + " sFileUrl=" + sFileUrl);
			XTextDocument xTextDocument = myEditControl.Selection.CreateDocument();
			if (xTextDocument != null)
			{
				string text = null;
				if (nFileFormat == 1)
				{
					text = "rtf";
				}
				if (nFileFormat == 2)
				{
					text = "html";
				}
				xTextDocument.Save(sFileUrl + "." + text, text);
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool MergeDocumentsWithStream(bool bDifferentHeader, bool bFirstDifferentHeader, object stmFile)
		{
			int num = 15;
			if (stmFile == null)
			{
				return false;
			}
			byte[] array = stmFile as byte[];
			if (array == null)
			{
				return false;
			}
			BeginLogFunction("MergeDocumentsWithStream", "bytes.Length=" + array.Length);
			XTextDocument xTextDocument = new XTextDocument();
			if (InnerOpenDocumentBinary(array, xTextDocument))
			{
				bool flag = MergeDocumentsWithDocument(bDifferentHeader, bFirstDifferentHeader, xTextDocument);
				EndLogFunction(flag);
				return flag;
			}
			EndLogFunction("false");
			return false;
		}

		internal static bool MergeDocumentsWithString(AxNsoControlBase axNsoControlBase_0, byte[] byte_0, XTextDocument specifyDocument)
		{
			int num = 15;
			string format = null;
			if (IsODTFormat(byte_0))
			{
				format = "odt";
			}
			string string_ = Convert.ToBase64String(byte_0);
			specifyDocument.LoadUseAppendModeFromBase64String(string_, format);
			return true;
		}

		[ComVisible(true)]
		public virtual bool MergeDocumentsWithString(bool bDifferentHeader, bool bFirstDifferentHeader, string base64String)
		{
			int num = 8;
			if (string.IsNullOrEmpty(base64String))
			{
				return false;
			}
			BeginLogFunction("MergeDocumentsWithString", "base64String.Length=" + base64String.Length);
			XTextDocument xTextDocument = new XTextDocument();
			byte[] byte_ = Convert.FromBase64String(base64String);
			if (InnerOpenDocumentBinary(byte_, xTextDocument))
			{
				bool flag = MergeDocumentsWithDocument(bDifferentHeader, bFirstDifferentHeader, xTextDocument);
				EndLogFunction(flag);
				return flag;
			}
			EndLogFunction("false");
			return false;
		}

		private bool MergeDocumentsWithDocument(bool bDifferentHeader, bool bFirstDifferentHeader, XTextDocument xtextDocument_0)
		{
			if (xtextDocument_0 == null)
			{
				return false;
			}
			myEditControl.Document.Body.Focus();
			bool isAdministrator = myEditControl.IsAdministrator;
			bool @readonly = myEditControl.Readonly;
			myEditControl.Readonly = false;
			myEditControl.IsAdministrator = true;
			myEditControl.Document.Body.Focus();
			_Value_GetStatusAfterMerged = 0;
			int num = -1;
			int num2 = -1;
			XTextElementList privateContent = xtextDocument_0.Body.PrivateContent;
			for (int i = 0; i < privateContent.Count; i++)
			{
				XTextElement xTextElement = privateContent[i];
				if (!(xTextElement is XTextParagraphFlagElement))
				{
					if (xTextElement is XTextPageBreakElement)
					{
						num = i;
					}
					else if (xTextElement is XTextCharElement)
					{
						char charValue = ((XTextCharElement)xTextElement).CharValue;
						if (!char.IsWhiteSpace(charValue))
						{
							num2 = i;
						}
					}
					else
					{
						num2 = i;
					}
					continue;
				}
				int num3 = i;
				if (num >= 0)
				{
					_Value_GetStatusAfterMerged = 3;
					if (num3 == 1)
					{
						_Value_GetStatusAfterMerged = 1;
					}
					else if (num2 < 0)
					{
						_Value_GetStatusAfterMerged = 2;
					}
				}
				else
				{
					_Value_GetStatusAfterMerged = 0;
				}
				break;
			}
			XTextElement currentElement = myEditControl.Document.CurrentElement;
			XTextContentElement xTextContentElement = (XTextContentElement)myEditControl.Document.GetCurrentElement(typeof(XTextContentElement));
			if (xTextContentElement == null || xTextContentElement.PrivateContent.IndexOf(currentElement) <= 0)
			{
			}
			XTextElementList elements = xtextDocument_0.Body.Elements;
			myEditControl.Document.ImportElementsSpceifyImportPermssion(elements, preserveUserTrack: true, enablePermission: false);
			bool flag = true;
			myEditControl.BackgroundMode = true;
			try
			{
				flag = (myEditControl.DocumentControler.InsertElements(elements) > 0);
			}
			finally
			{
				myEditControl.BackgroundMode = false;
			}
			myEditControl.BackgroundMode = false;
			myEditControl.IsAdministrator = isAdministrator;
			myEditControl.OnDocumentContentChanged(null);
			ProtectDoc(@readonly);
			EndLogFunction(flag);
			return flag;
		}

		                                                                    /// <summary>
		                                                                    ///       关闭文档
		                                                                    ///       </summary>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public int Close()
		{
			int num = 0;
			BeginLogFunction("Close", null);
			_ValueOfHasFileOpened = "-1";
			if (EnableRaiseOnNsoFileClosingEvent)
			{
				RaiseOnNsoFileClosingEvent();
			}
			ClearState();
			myEditControl.ExecuteCommand("FileNew", showUI: false, null);
			pnlMainContainer.Visible = false;
			pnlPrintPreview.Visible = false;
			EndLogFunction(0);
			return 0;
		}

		                                                                    /// <summary>
		                                                                    ///       锁定文件
		                                                                    ///       </summary>
		                                                                    /// <param name="fileName">文件名</param>
		private void LockCurrentFile(string fileName)
		{
			if (!AutoLockFile)
			{
				return;
			}
			UnlockCurrentFile();
			if (!string.IsNullOrEmpty(fileName) && File.Exists(fileName))
			{
				FileAttributes attributes = File.GetAttributes(fileName);
				if ((attributes & FileAttributes.ReadOnly) != FileAttributes.ReadOnly)
				{
					_CurrentLockFileStream = new FileStream(fileName, FileMode.Open, FileAccess.ReadWrite, FileShare.None);
				}
			}
		}

		                                                                    /// <summary>
		                                                                    ///       解锁文件
		                                                                    ///       </summary>
		private void UnlockCurrentFile()
		{
			if (_CurrentLockFileStream != null)
			{
				_CurrentLockFileStream.Close();
				_CurrentLockFileStream = null;
			}
		}

		[ComVisible(true)]
		public virtual bool CreateUserRootMenuItem(string strRootCommand, string strRootLabel)
		{
			AlertNotSupportedMember("CreateUserRootMenuItem");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public void SetFocus2()
		{
			BeginLogFunction("SetFocus2", null);
			MyWriterControl.Focus();
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public virtual bool SetScrollBarVisible(bool bShowHori, bool bShowVert)
		{
			AlertNotSupportedMember("SetScrollBarVisible");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool SetScrollWin(bool bIsScrollWin)
		{
			AlertNotSupportedMember("SetScrollWin");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public bool EnableFloatbar(bool bShow)
		{
			BeginLogFunction("EnableFloatbar", "bShow=" + bShow);
			_EnableFloatbar = bShow;
			myPreviewControl.MainToolStrip.Visible = bShow;
			EndLogFunction("true");
			return true;
		}

		[ComVisible(true)]
		public void ActiveNsoWindow(int int_0)
		{
			BeginLogFunction("ActiveNsoWindow", "p=" + int_0);
			if (pnlMainContainer.Visible)
			{
				myEditControl.Focus();
			}
			else if (pnlPrintPreview.Visible)
			{
				myPreviewControl.Focus();
			}
			else
			{
				Focus();
			}
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public void SetMenuBarVisible(bool visible)
		{
			BeginLogFunction("SetMenuBarVisible", "visible=" + visible);
			mainMenuStrip.Visible = visible;
			if (visible)
			{
				pnlMainContainer.TopToolStripPanelVisible = true;
			}
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public void SetSpecificToolBarVisible(string ToolBar_Name, bool bVisible)
		{
			BeginLogFunction("SetSpecificToolBarVisible", "ToolBar_Name=" + ToolBar_Name + "  bVisible=" + bVisible);
			foreach (Control control in pnlMainContainer.TopToolStripPanel.Controls)
			{
				if (control.Name == ToolBar_Name)
				{
					control.Visible = bVisible;
					break;
				}
			}
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public bool RemoveAllUserToolbarItem(string strToolbar)
		{
			int num = 4;
			BeginLogFunction("RemoveAllUserToolbarItem", "strToolbar=" + strToolbar);
			GetUserToolbar(strToolbar, create: false)?.Items.Clear();
			EndLogFunction("true");
			return true;
		}

		[ComVisible(true)]
		public bool CreateUserToolbar(string strToolbar, string strUIName)
		{
			BeginLogFunction("CreateUserToolbar", "strToolbar=" + strToolbar + "  strUIName=" + strUIName);
			ToolStrip userToolbar = GetUserToolbar(strToolbar, create: true);
			EndLogFunction(userToolbar != null);
			return userToolbar != null;
		}

		[ComVisible(true)]
		private ToolStrip GetUserToolbar(string name, bool create)
		{
			foreach (Control control in pnlMainContainer.TopToolStripPanel.Controls)
			{
				if (control is ToolStrip)
				{
					ToolStrip toolStrip = (ToolStrip)control;
					if (toolStrip.Name == name)
					{
						return toolStrip;
					}
				}
			}
			if (create)
			{
				ToolStrip toolStrip = new ToolStrip();
				toolStrip.ShowItemToolTips = false;
				toolStrip.Name = name;
				pnlMainContainer.TopToolStripPanel.Controls.Add(toolStrip);
				return toolStrip;
			}
			return null;
		}

		[ComVisible(true)]
		public bool InsertExternalToolbarItem(string strToolbar, string strExternalCommand, string strLabel, string strPngPath)
		{
			int num = 16;
			BeginLogFunction("InsertExternalToolbarItem", "strToolbar=" + strToolbar + "  strExternalCommand=" + strExternalCommand + "  strLabel=" + strLabel + "  strPngPath=" + strPngPath);
			ToolStrip userToolbar = GetUserToolbar(strToolbar, create: false);
			if (userToolbar != null)
			{
				ToolStripButton toolStripButton = GetToolStripButton(strExternalCommand, userToolbar);
				if (toolStripButton == null)
				{
					toolStripButton = new ToolStripButton();
					toolStripButton.DisplayStyle = ToolStripItemDisplayStyle.Text;
					toolStripButton.Name = strExternalCommand;
					toolStripButton.Text = strLabel;
					toolStripButton.Click += btn_Click;
					userToolbar.Items.Add(toolStripButton);
				}
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		private ToolStripButton GetToolStripButton(string name, ToolStrip toolStrip_0)
		{
			foreach (ToolStripItem item in toolStrip_0.Items)
			{
				if (item is ToolStripButton)
				{
					ToolStripButton toolStripButton = (ToolStripButton)item;
					if (toolStripButton.Name == name)
					{
						return toolStripButton;
					}
				}
			}
			return null;
		}

		private void btn_Click(object sender, EventArgs e)
		{
			ToolStripButton toolStripButton = (ToolStripButton)sender;
			string name = toolStripButton.Name;
			if (name.StartsWith("AddIn", StringComparison.CurrentCultureIgnoreCase))
			{
				string s = name.Substring(5);
				int result = 0;
				if (int.TryParse(s, out result) && EnableRaiseOnNsoUserToolbarEvent)
				{
					RaiseOnNsoUserToolbarEvent(this, new _INsoControlEvents_NsoUserToolbarEventEvent(result, null, null));
				}
			}
		}

		[ComVisible(true)]
		public void SetUserToolbarVisible(string strToolbar, bool bVisible)
		{
			BeginLogFunction("SetUserToolbarVisible", "strToolbar=" + strToolbar + "  bVisible=" + bVisible);
			ToolStrip userToolbar = GetUserToolbar(strToolbar, create: false);
			if (userToolbar != null)
			{
				userToolbar.Visible = bVisible;
			}
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public bool InsertInternalToolbarItem(string strToolbar, string strInternalCommand)
		{
			BeginLogFunction("InsertInternalToolbarItem", "strToolbar=" + strToolbar + "  strInternalCommand=" + strInternalCommand);
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       void SetToolBarsVisible ( BSTR Module_ToolBar_Name, BOOL bVisible )
		                                                                    ///       功能描述：
		                                                                    ///       设置一组工具栏是否可见。
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       Module_ToolBar_Name	BSTR	模块名	必需	sw: 字处理
		                                                                    ///       sc: 表格
		                                                                    ///       sd: 演示文稿
		                                                                    ///       standard: 常用和格式工具栏
		                                                                    ///       all: 全部
		                                                                    ///       bVisible	BOOL	显示状态	必需	
		                                                                    ///       返回值：无
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1.ToolBarsVisible(“sw” , FALSE)
		                                                                    ///       实现说明：无
		                                                                    ///       Date:10-11 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="Module_ToolBar_Name">
		                                                                    /// </param>
		                                                                    /// <param name="bVisble">
		                                                                    /// </param>
		[ComVisible(true)]
		public void SetToolBarsVisible(string Module_ToolBar_Name, bool bVisible)
		{
			BeginLogFunction("SetToolBarsVisible", "Module_ToolBar_Name=" + Module_ToolBar_Name + "  bVisible=" + bVisible);
			if (Module_ToolBar_Name == "all")
			{
				foreach (Control control in pnlMainContainer.TopToolStripPanel.Controls)
				{
					if (control is ToolStrip)
					{
						control.Visible = bVisible;
					}
				}
			}
			else
			{
				ToolStrip userToolbar = GetUserToolbar(Module_ToolBar_Name, create: false);
				if (userToolbar != null)
				{
					userToolbar.Visible = bVisible;
				}
			}
			EndLogFunction(null);
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       void SetStatusBarVisible ( BOOL bVisible )
		                                                                    ///       功能描述：
		                                                                    ///       显示和隐藏状态栏
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       bVisible	BOOL	状态栏显示或隐藏	必需	TRUE：表示显示FALSE：表示隐藏
		                                                                    ///       返回值：无
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1. SetStatusBarVisible (FALSE)
		                                                                    ///       实现说明：无
		                                                                    ///       Date:10-11 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="bVisible">
		                                                                    /// </param>
		[ComVisible(true)]
		public void SetStatusBarVisible(bool bVisible)
		{
			BeginLogFunction("SetStatusBarVisible", "bVisible=" + bVisible);
			pnlStatus.Visible = bVisible;
			EndLogFunction(null);
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       void SetRulersVisible ( BOOL bHideHori,BOOL bHideVert )
		                                                                    ///       功能描述：
		                                                                    ///       显示和隐藏标尺
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       bHideHori	BOOL	水平标尺显示或隐藏	必需	TRUE：表示显示
		                                                                    ///       FALSE：表示隐藏
		                                                                    ///       bHideVert	BOOL	垂直标尺显示或隐藏	必需	TRUE：表示显示
		                                                                    ///       FALSE：表示隐藏
		                                                                    ///       返回值：无
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1.SetRulersVisible (TRUE, TRUE)
		                                                                    ///       实现说明：无
		                                                                    ///       Date:10-11 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="bHideHori">
		                                                                    /// </param>
		                                                                    /// <param name="bHideVert">
		                                                                    /// </param>
		[ComVisible(true)]
		public void SetRulersVisible(bool bHideHori, bool bHideVert)
		{
			BeginLogFunction("SetRulersVisible", "bHideHori=" + bHideHori + "  bHideVert=" + bHideVert);
			if (bHideHori || bHideVert)
			{
				myEditControl.RuleVisible = false;
			}
			else
			{
				myEditControl.RuleVisible = true;
			}
			EndLogFunction(null);
		}

		                                                                    /// <summary>
		                                                                    ///       函数说明：
		                                                                    ///       void SetCustomToolbarVisible (BSTR sToolbarName,BOOL bVisible)
		                                                                    ///       功能描述：
		                                                                    ///       设置用户自定义工具栏是否可见
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       sToolbarName	BSTR	名称	必需	用户自定义工具栏名称，如：新建工具栏1
		                                                                    ///       bVisible	BOOL	是否可见	必需	
		                                                                    ///       返回值：
		                                                                    ///       无
		                                                                    ///       代码示例：
		                                                                    ///       AxNsoControl1. SetCustomToolbarVisible (“Costom”,TRUE)
		                                                                    ///       实现说明：
		                                                                    ///       无
		                                                                    ///       Date:10-11 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="sToolbarName">
		                                                                    /// </param>
		                                                                    /// <param name="bVisible">
		                                                                    /// </param>
		[ComVisible(true)]
		public void SetCustomToolbarVisible(string sToolbarName, bool bVisible)
		{
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       Void ShowDialog ( short DialogType )
		                                                                    ///       功能描述：
		                                                                    ///       弹出各种对话框。详细见参数列表。
		                                                                    ///       参数：
		                                                                    ///       名称	类型	可选	取值
		                                                                    ///       DialogType	Short	必须	
		                                                                    ///
		                                                                    ///       0：New 新建
		                                                                    ///       1：Open 打开
		                                                                    ///       2：Save 保存
		                                                                    ///       3：SaveAs 另存为
		                                                                    ///       4：Print  打印
		                                                                    ///       5：PageSetup 页面设置
		                                                                    ///       6：PageProperties 页面属性
		                                                                    ///       7：查找与替换
		                                                                    ///       8：插入特殊符号
		                                                                    ///       返回值：无
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNSOOffice1.ShowDialog(3)
		                                                                    ///       实现说明：
		                                                                    ///       ShowDialog 弹出的对话框是Office编辑器内部的对话框。
		                                                                    ///       而ShowDialog2 弹出的对话框是Windows系统的一些对话框，且ShowDialog2接
		                                                                    ///       口 是为了BS架构下一些脚本语言服务的
		                                                                    ///       Date:10-12 Jy
		                                                                    ///       </summary>
		                                                                    /// <param name="DialogType">
		                                                                    /// </param>
		[ComVisible(true)]
		public void ShowDialog(int DialogType)
		{
			int num = 7;
			BeginLogFunction("ShowDialog", "DialogType=" + DialogType);
			switch (DialogType)
			{
			case 0:
				myEditControl.ExecuteCommand("FileNew", showUI: true, null);
				break;
			case 1:
				myEditControl.ExecuteCommand("FileOpen", showUI: true, null);
				break;
			case 2:
				myEditControl.ExecuteCommand("FileSave", showUI: true, null);
				break;
			case 3:
				myEditControl.ExecuteCommand("FileSaveAs", showUI: true, null);
				break;
			case 4:
				myEditControl.ExecuteCommand("FilePrint", showUI: true, null);
				break;
			case 5:
				myEditControl.ExecuteCommand("FilePageSettings", showUI: true, null);
				break;
			case 6:
				myEditControl.ExecuteCommand("FilePageSettings", showUI: true, null);
				break;
			case 7:
				myEditControl.ExecuteCommand("SearchReplace", showUI: true, null);
				break;
			case 8:
				myEditControl.ExecuteCommand("InsertSpecifyCharacter", showUI: true, null);
				break;
			default:
				myEditControl.AppHost.UITools.ShowErrorMessageBox(this, "不支持ShowDilalog(" + DialogType + ")");
				break;
			case 10:
				break;
			}
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public virtual bool DisableContextMenuItem(int nType)
		{
			BeginLogFunction("DisableContextMenuItem", "nType=" + nType);
			cmFont.Visible = ((nType & 0x10) == 0);
			bool visible = (nType & 0x80) == 0;
			cmAlignCenter.Visible = visible;
			cmAlignLeft.Visible = visible;
			cmAlignRight.Visible = visible;
			EndLogFunction("true");
			return true;
		}

		[ComVisible(true)]
		public virtual void DisableKey(string strKeyName)
		{
			AlertNotSupportedMember("DisableKey");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public void SetVScrollbarPos(int position)
		{
			BeginLogFunction("SetVScrollbarPos", "position=" + position);
			Point autoScrollPosition = myEditControl.InnerViewControl.AutoScrollPosition;
			myEditControl.InnerViewControl.SetAutoScrollPosition(new Point(-autoScrollPosition.X, position));
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public int GetVScrollbarPos()
		{
			BeginLogFunction("GetVScrollbarPos", null);
			EndLogFunction(-myEditControl.InnerViewControl.AutoScrollPosition.Y);
			return -myEditControl.InnerViewControl.AutoScrollPosition.Y;
		}

		[ComVisible(true)]
		public virtual int GetCursorAbsoluteScreenXPoint()
		{
			BeginLogFunction("GetCursorAbsoluteScreenXPoint", null);
			Point selectionStartPosition = myEditControl.InnerViewControl.SelectionStartPosition;
			selectionStartPosition = myEditControl.InnerViewControl.PointToScreen(selectionStartPosition);
			EndLogFunction(selectionStartPosition.X);
			return selectionStartPosition.X;
		}

		[ComVisible(true)]
		public virtual int GetCursorAbsoluteScreenYPoint()
		{
			BeginLogFunction("GetCursorAbsoluteScreenYPoint", null);
			Point selectionStartPosition = myEditControl.InnerViewControl.SelectionStartPosition;
			selectionStartPosition = myEditControl.InnerViewControl.PointToScreen(selectionStartPosition);
			EndLogFunction(selectionStartPosition.Y);
			return selectionStartPosition.Y;
		}

		[ComVisible(true)]
		public virtual void HideMenuItem(string strMenuName)
		{
			BeginLogFunction("HideMenuItem", "strMenuName=" + strMenuName);
			foreach (string key in UIMenuItems.Keys)
			{
				if (string.Compare(key, strMenuName, ignoreCase: true) == 0)
				{
					object obj = UIMenuItems[key];
					if (obj is ToolStripItem)
					{
						((ToolStripItem)obj).Visible = false;
						break;
					}
				}
			}
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public virtual bool InsertExternalSubMenuItem(string strRootCommand, string strExternalCommand, string strLabel, string strPngPath)
		{
			AlertNotSupportedMember("InsertExternalSubMenuItem");
			throw new NotSupportedException();
		}

		public virtual bool InsertInternalSubMenuItem(string strRootCommand, string strInternalCommand)
		{
			AlertNotSupportedMember("InsertInternalSubMenuItem");
			throw new NotSupportedException();
		}

		                                                                    /// <summary>
		                                                                    ///       添加扩展工具栏按钮。
		                                                                    ///       扩展工具栏的数目已扩展到五条。要显示扩展工具栏二请调用 SetSpecificToolbarVisible(“扩展工具栏2”, 1)
		                                                                    ///       </summary>
		                                                                    /// <param name="strPic">图片路径</param>
		                                                                    /// <param name="strUNO">Uno名字的数字部分,取值为1到100</param>
		                                                                    /// <param name="strHelpText">中文提示</param>
		                                                                    /// <returns>BOOL 
		                                                                    ///       当strUNO，strHelpText是空字符串，或者编号为strUNO的按钮已经存在，
		                                                                    ///       或者strPic不是空字符串并且该路径下图片不存在或者图片尺寸不符合，
		                                                                    ///       都返回FALSE</returns>
		[ComVisible(true)]
		public virtual bool InsertToolbarItem(string strPic, string strUNO, string strHelpText)
		{
			int num = 12;
			BeginLogFunction("InsertToolbarItem", "strPic=" + strPic + " strUNO=" + strUNO + " strHelpText=" + strHelpText);
			if (string.IsNullOrEmpty(strUNO) || string.IsNullOrEmpty(strHelpText))
			{
				EndLogFunction("false");
				return false;
			}
			if (IsToolbarItemOn(strUNO))
			{
				EndLogFunction("false");
				return false;
			}
			if (!string.IsNullOrEmpty(strUNO) && !File.Exists(strPic))
			{
				EndLogFunction("false");
				return false;
			}
			if (!string.IsNullOrEmpty(strUNO) && File.Exists(strPic))
			{
				Image image = Image.FromFile(strPic);
				if (image.Width != 16 || image.Height != 16)
				{
					EndLogFunction("false");
					return false;
				}
				ToolStripItem toolStripItem = new ToolStripButton();
				toolStripItem.ToolTipText = strHelpText;
				toolStripItem.Image = image;
				toolStripItem.Name = strUNO;
				foreach (Control control in pnlMainContainer.TopToolStripPanel.Controls)
				{
					if (control is ToolStrip)
					{
						ToolStrip toolStrip = (ToolStrip)control;
						toolStrip.Items.Add(toolStripItem);
					}
				}
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       按钮是否已在工具栏上
		                                                                    ///       </summary>
		                                                                    /// <param name="strUNO">Uno 名字的数字部分，数字部分的取值为 1 到 100</param>
		                                                                    /// <returns>BOOL 型， true 表示按钮已在工具栏上，false 反之</returns>
		[ComVisible(true)]
		public virtual bool IsToolbarItemOn(string strUNO)
		{
			int num = 4;
			BeginLogFunction("IsToolbarItemOn", "strUNO=" + strUNO);
			foreach (Control control in pnlMainContainer.TopToolStripPanel.Controls)
			{
				if (control is ToolStrip)
				{
					ToolStrip toolStrip = (ToolStrip)control;
					foreach (ToolStripItem item in toolStrip.Items)
					{
						string text = Regex.Replace(item.Name, "\\D", "");
						if (text.Trim() == strUNO)
						{
							EndLogFunction("true");
							return true;
						}
					}
				}
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool IsUserRootMenuItemOn(string strRootCommand)
		{
			AlertNotSupportedMember("IsUserRootMenuItemOn");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool IsUserSubMenuItemOn(string strRootCommand, string strSubCommmand)
		{
			AlertNotSupportedMember("IsUserSubMenuItemOn");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool IsUserToolbarItemOn(string strToolbar, string strToolbarItem)
		{
			int num = 8;
			BeginLogFunction("IsUserToolbarItemOn", "strToolbar=" + strToolbar + " strToolbarItem=" + strToolbarItem);
			if (string.IsNullOrEmpty(strToolbar))
			{
				EndLogFunction("false");
				return false;
			}
			ToolStrip userToolbar = GetUserToolbar(strToolbar, create: false);
			if (userToolbar != null && userToolbar.Items.Count > 0)
			{
				foreach (ToolStripItem item in userToolbar.Items)
				{
					if (strToolbarItem == item.Name)
					{
						EndLogFunction("true");
						return true;
					}
				}
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool RemoveAllSubMenuItem(string strRootCommand)
		{
			AlertNotSupportedMember("RemoveAllSubMenuItem");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool RemoveExternalSubMenuItem(string strRootCommand, string strExternalCommand)
		{
			AlertNotSupportedMember("RemoveExternalSubMenuItem");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool RemoveExternalToolbarItem(string strToolbar, string strExternalCommand)
		{
			AlertNotSupportedMember("RemoveExternalToolbarItem");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool RemoveInternalSubMenuItem(string strRootCommand, string strInternalCommand)
		{
			AlertNotSupportedMember("RemoveInternalSubMenuItem");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool RemoveInternalToolbarItem(string strToolbar, string strInternalCommand)
		{
			int num = 11;
			BeginLogFunction("RemoveInternalToolbarItem", "strToolbar=" + strToolbar + "  strInternalCommand=" + strInternalCommand);
			ToolStrip userToolbar = GetUserToolbar(strToolbar, create: false);
			if (userToolbar != null)
			{
				foreach (ToolStripItem item in userToolbar.Items)
				{
					if (item.Name == strInternalCommand)
					{
						userToolbar.Items.Remove(item);
						EndLogFunction("true");
						return true;
					}
				}
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual void RemoveToolbarItem(string strUNO)
		{
			AlertNotSupportedMember("RemoveToolbarItem");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual void RemoveToolbarItemAll(int nBarNum)
		{
			AlertNotSupportedMember("RemoveToolbarItemAll");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool RemoveUserRootMenuItem(string strRootCommand)
		{
			AlertNotSupportedMember("RemoveUserRootMenuItem");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool RemoveUserToolbar(string strToolbar)
		{
			AlertNotSupportedMember("RemoveUserToolbar");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool RenameExternalSubMenuItem(string strRootCommand, string strExternalCommand, string strNewLabel)
		{
			AlertNotSupportedMember("RenameExternalSubMenuItem");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool RenameExternalToolbarItem(string strToolbar, string strExternalCommand, string strNewLabel)
		{
			AlertNotSupportedMember("RenameExternalToolbarItem");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool RenameUserRootMenuItem(string strRootCommand, string strNewRootLabel)
		{
			AlertNotSupportedMember("RenameUserRootMenuItem");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool RenameUserToolbar(string strToolbar, string strUIName)
		{
			AlertNotSupportedMember("RenameUserToolbar");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool ReplaceExternalSubMenuItemIcon(string strRootCommand, string strExternalCommand, string strNewPngPath)
		{
			AlertNotSupportedMember("ReplaceExternalSubMenuItemIcon");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool ReplaceExternalToolbarItemIcon(string strToolbar, string strExternalCommand, string strNewPngPath)
		{
			AlertNotSupportedMember("ReplaceExternalToolbarItemIcon");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual bool SetToolbarItemVisible(string strToolbar, string strToolbarItem, bool bVisible)
		{
			int num = 6;
			BeginLogFunction("SetToolbarItemVisible", "strToolbar=" + strToolbar + "  strToolbarItem=" + strToolbarItem + "  bVisible=" + bVisible);
			string key = strToolbar + "." + strToolbarItem;
			if (UIButtons.ContainsKey(key) && UIButtons[key] != null)
			{
				UIButtons[key].Visible = bVisible;
				if (UIButtons[key].Owner != null)
				{
					UpdateSpliterVisible(UIButtons[key].Owner.Items);
				}
				EndLogFunction("true");
				return true;
			}
			ToolStrip userToolbar = GetUserToolbar(strToolbarItem, create: false);
			if (userToolbar != null)
			{
				foreach (ToolStripItem item in userToolbar.Items)
				{
					if (item.Name == strToolbarItem)
					{
						item.Visible = bVisible;
						if (item.Owner != null)
						{
							UpdateSpliterVisible(item.Owner.Items);
						}
						EndLogFunction("true");
						return true;
					}
				}
			}
			EndLogFunction("false");
			return false;
		}

		private void UpdateSpliterVisible(ToolStripItemCollection items)
		{
			if (items != null)
			{
				foreach (ToolStripItem item in items)
				{
					if (item is ToolStripSeparator)
					{
						ToolStripItem toolStripItem2 = null;
						ToolStripItem toolStripItem3 = null;
						for (int num = items.IndexOf(item) - 1; num >= 0; num--)
						{
							ToolStripItem toolStripItem4 = items[num];
							if (toolStripItem4.Visible)
							{
								if (!(toolStripItem4 is ToolStripSeparator))
								{
									toolStripItem2 = toolStripItem4;
								}
								break;
							}
						}
						for (int num = items.IndexOf(item) + 1; num < items.Count; num++)
						{
							ToolStripItem toolStripItem4 = items[num];
							if (toolStripItem4.Visible)
							{
								if (!(toolStripItem4 is ToolStripSeparator))
								{
									toolStripItem3 = toolStripItem4;
								}
								break;
							}
						}
						item.Visible = (toolStripItem2 != null && toolStripItem3 != null);
					}
				}
			}
		}

		[ComVisible(true)]
		public virtual string ShowDialog2(int nType, string sRev1, string sRev2, string sRev3)
		{
			AlertNotSupportedMember("ShowDialog2");
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual void ShowMenuItem(string strMenuName)
		{
			BeginLogFunction("ShowMenuItem", "strMenuName=" + strMenuName);
			foreach (string key in UIMenuItems.Keys)
			{
				if (string.Compare(key, strMenuName, ignoreCase: true) == 0)
				{
					object obj = UIMenuItems[key];
					if (obj is ToolStripItem)
					{
						ToolStripItem toolStripItem = (ToolStripItem)obj;
						toolStripItem.Visible = true;
						if (toolStripItem.Owner != null)
						{
							UpdateSpliterVisible(toolStripItem.Owner.Items);
						}
						break;
					}
				}
			}
			EndLogFunction(null);
		}

		[ComVisible(true)]
		public bool SetNumboxOutRangeInfo(string strName, string strInfo)
		{
			int num = 12;
			BeginLogFunction("SetNumboxOutRangeInfo", "strName=" + strName + "  strInfo=" + strInfo);
			XTextInputFieldElement xTextInputFieldElement = MyWriterControl.GetElementById(strName) as XTextInputFieldElement;
			if (xTextInputFieldElement != null)
			{
				if (xTextInputFieldElement.ValidateStyle == null)
				{
					xTextInputFieldElement.ValidateStyle = new ValueValidateStyle();
					xTextInputFieldElement.ValidateStyle.ValueType = ValueTypeStyle.Numeric;
				}
				xTextInputFieldElement.ValidateStyle.CustomMessage = strInfo;
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public bool SetNumboxText(string name, int lText)
		{
			int num = 10;
			BeginLogFunction("SetNumboxText", "name=" + name + "  lText=" + lText);
			XTextElement elementById = GetElementById(name);
			if (elementById != null && elementById is XTextInputFieldElement)
			{
				XTextInputFieldElement xTextInputFieldElement = (XTextInputFieldElement)elementById;
				xTextInputFieldElement.EditorTextExt = lText.ToString();
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual string GetNumboxErrorInputInfo(string strName)
		{
			BeginLogFunction("GetNumboxErrorInputInfo", "strName=" + strName);
			XTextInputFieldElement xTextInputFieldElement = Document.GetElementById(strName) as XTextInputFieldElement;
			if (xTextInputFieldElement != null && xTextInputFieldElement.ValidateStyle != null)
			{
				EndLogFunction(xTextInputFieldElement.ValidateStyle.CustomMessage);
				return xTextInputFieldElement.ValidateStyle.CustomMessage;
			}
			EndLogFunction("");
			return "";
		}

		                                                                    /// <summary>
		                                                                    ///       函数原型：
		                                                                    ///       BSTR GetNumboxOutRangeInfo(BSTR strName)
		                                                                    ///       功能描述：
		                                                                    ///       获取数字框输入不在最小值到最大值范围后的警告信息
		                                                                    ///       参数：
		                                                                    ///       名称	类型	说明	可选	取值
		                                                                    ///       strName	BSTR	Numbox的名称	必须	
		                                                                    ///       返回值： 
		                                                                    ///       BSTR 数字框输入不在最小值到最大值范围后的警告信息 
		                                                                    ///       代码示例（VB）：
		                                                                    ///       AxNsoControl1. GetNumboxOutRangeInfo ("numBox1")
		                                                                    ///       实现说明：
		                                                                    ///       如果没有设置输入不在最小值到最大值范围后的警告信息获取的是默认的警告信息
		                                                                    ///       </summary>
		                                                                    /// <param name="strName">
		                                                                    /// </param>
		                                                                    /// <returns>
		                                                                    /// </returns>
		[ComVisible(true)]
		public virtual string GetNumboxOutRangeInfo(string strName)
		{
			int num = 6;
			BeginLogFunction("GetNumboxOutRangeInfo", "strName=" + strName);
			XTextInputFieldElement xTextInputFieldElement = GetElementById(strName) as XTextInputFieldElement;
			if (xTextInputFieldElement != null)
			{
				string customMessage = xTextInputFieldElement.ValidateStyle.CustomMessage;
				if (customMessage == null || customMessage == string.Empty)
				{
					xTextInputFieldElement.ValidateStyle.CustomMessage = "超出范围";
				}
				EndLogFunction(xTextInputFieldElement.ValidateStyle.CustomMessage);
				return xTextInputFieldElement.ValidateStyle.CustomMessage;
			}
			EndLogFunction("");
			return "";
		}

		[ComVisible(true)]
		public virtual int GetNumboxPrecision(string name)
		{
			int num = 3;
			BeginLogFunction("GetNumboxPrecision", "name=" + name);
			XTextInputFieldElement xTextInputFieldElement = GetElementById(name) as XTextInputFieldElement;
			if (xTextInputFieldElement != null)
			{
				string attribute = xTextInputFieldElement.GetAttribute("NsoNumboxPrecision");
				if (string.IsNullOrEmpty(attribute))
				{
					EndLogFunction(0);
					return 0;
				}
				int result = 0;
				if (int.TryParse(attribute, out result))
				{
					EndLogFunction(Math.Max(result, 0));
					return Math.Max(result, 0);
				}
				EndLogFunction(0);
				return 0;
			}
			EndLogFunction(-1);
			return -1;
		}

		                                                                    /// <summary>
		                                                                    ///       获取Numbox的文本
		                                                                    ///       </summary>
		                                                                    /// <param name="name">Numbox的名称</param>
		                                                                    /// <returns>NumBox的数值</returns>
		[ComVisible(true)]
		public virtual int GetNumboxText(string name)
		{
			BeginLogFunction("GetNumboxText", "name=" + name);
			XTextInputFieldElement xTextInputFieldElement = GetElementById(name) as XTextInputFieldElement;
			if (xTextInputFieldElement != null)
			{
				int result = -1;
				if (int.TryParse(xTextInputFieldElement.Text, out result))
				{
					EndLogFunction(result);
					return result;
				}
			}
			EndLogFunction(-1);
			return -1;
		}

		[ComVisible(true)]
		public virtual string GetNumboxUnit(string name)
		{
			BeginLogFunction("GetNumboxUnit", "name=" + name);
			XTextInputFieldElement xTextInputFieldElement = GetElementById(name) as XTextInputFieldElement;
			if (xTextInputFieldElement != null)
			{
				EndLogFunction(xTextInputFieldElement.UnitText);
				return xTextInputFieldElement.UnitText;
			}
			EndLogFunction("");
			return "";
		}

		[ComVisible(true)]
		public virtual bool SetNumboxErrorInputInfo(string strName, string strInfo)
		{
			int num = 14;
			BeginLogFunction("SetNumboxErrorInputInfo", "strName=" + strName + "  strInfo=" + strInfo);
			XTextInputFieldElement xTextInputFieldElement = GetElementById(strName) as XTextInputFieldElement;
			if (xTextInputFieldElement != null)
			{
				if (xTextInputFieldElement.ValidateStyle == null)
				{
					xTextInputFieldElement.ValidateStyle = new ValueValidateStyle();
				}
				xTextInputFieldElement.ValidateStyle.Message = strInfo;
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool SetNumboxMaxValue(string name, double maxValue)
		{
			int num = 15;
			BeginLogFunction("SetNumboxMaxValue", "name=" + name + "  maxValue=" + maxValue);
			XTextInputFieldElement xTextInputFieldElement = GetElementById(name) as XTextInputFieldElement;
			if (xTextInputFieldElement != null)
			{
				if (xTextInputFieldElement.ValidateStyle == null)
				{
					xTextInputFieldElement.ValidateStyle = new ValueValidateStyle();
				}
				if (maxValue == 65535.0 || double.IsNaN(maxValue))
				{
					xTextInputFieldElement.ValidateStyle.CheckMaxValue = false;
					xTextInputFieldElement.ValidateStyle.MaxValue = 0.0;
				}
				else
				{
					xTextInputFieldElement.ValidateStyle.CheckMaxValue = true;
					xTextInputFieldElement.ValidateStyle.MaxValue = maxValue;
				}
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool SetNumboxMinValue(string name, double minValue)
		{
			int num = 7;
			BeginLogFunction("SetNumboxMinValue", "name=" + name + "  minValue=" + minValue);
			XTextInputFieldElement xTextInputFieldElement = GetElementById(name) as XTextInputFieldElement;
			if (xTextInputFieldElement != null)
			{
				if (xTextInputFieldElement.ValidateStyle == null)
				{
					xTextInputFieldElement.ValidateStyle = new ValueValidateStyle();
				}
				if (minValue == -65535.0 || double.IsNaN(minValue))
				{
					xTextInputFieldElement.ValidateStyle.CheckMinValue = false;
					xTextInputFieldElement.ValidateStyle.MinValue = 0.0;
				}
				else
				{
					xTextInputFieldElement.ValidateStyle.CheckMinValue = true;
					xTextInputFieldElement.ValidateStyle.MinValue = minValue;
				}
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		                                                                    /// <summary>
		                                                                    ///       获得数值输入框的最小值
		                                                                    ///       </summary>
		                                                                    /// <param name="name">输入框的编号</param>
		                                                                    /// <returns>获得的最小值</returns>
		[ComVisible(true)]
		public double GetNumboxMinValue(string name)
		{
			BeginLogFunction("GetNumboxMinValue", "name=" + name);
			XTextInputFieldElement xTextInputFieldElement = GetElementById(name) as XTextInputFieldElement;
			if (xTextInputFieldElement != null && xTextInputFieldElement.ValidateStyle != null && xTextInputFieldElement.ValidateStyle.CheckMinValue)
			{
				EndLogFunction(xTextInputFieldElement.ValidateStyle.MinValue);
				return xTextInputFieldElement.ValidateStyle.MinValue;
			}
			EndLogFunction(-65535);
			return -65535.0;
		}

		                                                                    /// <summary>
		                                                                    ///       获得数值输入框的最大值
		                                                                    ///       </summary>
		                                                                    /// <param name="name">输入框的编号</param>
		                                                                    /// <returns>最大值</returns>
		[ComVisible(true)]
		public double GetNumboxMaxValue(string name)
		{
			BeginLogFunction("GetNumboxMaxValue", "name=" + name);
			XTextInputFieldElement xTextInputFieldElement = GetElementById(name) as XTextInputFieldElement;
			if (xTextInputFieldElement != null && xTextInputFieldElement.ValidateStyle != null && xTextInputFieldElement.ValidateStyle.CheckMaxValue)
			{
				EndLogFunction(xTextInputFieldElement.ValidateStyle.MaxValue);
				return xTextInputFieldElement.ValidateStyle.MaxValue;
			}
			EndLogFunction(65535);
			return 65535.0;
		}

		[ComVisible(true)]
		public virtual bool SetNumboxPrecision(string name, int precision)
		{
			int num = 16;
			BeginLogFunction("SetNumboxPrecision", "name=" + name + "  precision=" + precision);
			XTextInputFieldElement xTextInputFieldElement = GetElementById(name) as XTextInputFieldElement;
			if (xTextInputFieldElement != null && IsNewControl(xTextInputFieldElement))
			{
				xTextInputFieldElement.SetAttribute("NsoNumboxPrecision", precision.ToString());
				if (xTextInputFieldElement.DisplayFormat == null)
				{
					xTextInputFieldElement.DisplayFormat = new ValueFormater();
				}
				xTextInputFieldElement.DisplayFormat.Style = ValueFormatStyle.Numeric;
				xTextInputFieldElement.DisplayFormat.Format = "0." + new string('0', precision);
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool SetNumboxUnit(string name, string sUnit)
		{
			int num = 7;
			BeginLogFunction("SetNumboxUnit", "name=" + name + "  sUnit=" + sUnit);
			XTextInputFieldElement xTextInputFieldElement = GetElementById(name) as XTextInputFieldElement;
			if (xTextInputFieldElement != null)
			{
				xTextInputFieldElement.UnitText = sUnit;
				xTextInputFieldElement.EditorRefreshView();
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public bool SetCompoundBoxCodeAndValueByArray(string sName, object lstCode, object lstValue, int iType)
		{
			int num = 7;
			BeginLogFunction("SetCompoundBoxCodeAndValueByArray", string.Concat("sName=", sName, "  lstCode=", lstCode, "  lstValue=", lstValue, "  iType=", iType));
			IList list = lstCode as IList;
			IList list2 = lstValue as IList;
			XTextElement elementById = GetElementById(sName);
			if (elementById != null && elementById is XTextInputFieldElement)
			{
				XTextInputFieldElement xTextInputFieldElement = (XTextInputFieldElement)elementById;
				if (xTextInputFieldElement.FieldSettings == null)
				{
					xTextInputFieldElement.FieldSettings = new InputFieldSettings();
				}
				if (xTextInputFieldElement.FieldSettings.ListSource == null)
				{
					xTextInputFieldElement.FieldSettings.ListSource = new ListSourceInfo();
				}
				if (xTextInputFieldElement.FieldSettings.ListSource.Items == null)
				{
					xTextInputFieldElement.FieldSettings.ListSource.Items = new ListItemCollection();
				}
				for (int i = 0; i < list.Count && i < list2.Count; i++)
				{
					ListItem listItem = new ListItem();
					listItem.Text = Convert.ToString(list[i]);
					listItem.Value = Convert.ToString(list2[i]);
					xTextInputFieldElement.FieldSettings.ListSource.Items.Add(listItem);
				}
				EndLogFunction("true");
				return true;
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool SetCompoundBoxCodeAndValue(string sName, string sCode, string sValue, int iType)
		{
			int num = 11;
			BeginLogFunction("SetCompoundBoxCodeAndValue", "sName=" + sName + "  sCode=" + sCode + "  sValue=" + sValue + "  iType=" + iType);
			bool flag = false;
			XTextInputFieldElement xTextInputFieldElement = GetElementById(sName) as XTextInputFieldElement;
			if (xTextInputFieldElement != null)
			{
				switch (iType)
				{
				case 1:
					xTextInputFieldElement.SetAttribute("NsoControlTypeName", "Combox");
					if (xTextInputFieldElement.FieldSettings == null)
					{
						xTextInputFieldElement.FieldSettings = new InputFieldSettings();
					}
					if (xTextInputFieldElement.FieldSettings.ListSource == null)
					{
						xTextInputFieldElement.FieldSettings.ListSource = new ListSourceInfo();
					}
					xTextInputFieldElement.FieldSettings.EditStyle = InputFieldEditStyle.DropdownList;
					if (xTextInputFieldElement.FieldSettings.ListSource.Items == null)
					{
						xTextInputFieldElement.FieldSettings.ListSource.Items = new ListItemCollection();
					}
					xTextInputFieldElement.FieldSettings.ListSource.Items.AddByTextValue(sCode, sValue);
					flag = true;
					break;
				case 2:
					xTextInputFieldElement.SetAttribute("NsoControlTypeName", "ListBox");
					if (xTextInputFieldElement.FieldSettings == null)
					{
						xTextInputFieldElement.FieldSettings = new InputFieldSettings();
					}
					if (xTextInputFieldElement.FieldSettings.ListSource == null)
					{
						xTextInputFieldElement.FieldSettings.ListSource = new ListSourceInfo();
					}
					xTextInputFieldElement.FieldSettings.EditStyle = InputFieldEditStyle.DropdownList;
					if (xTextInputFieldElement.FieldSettings.ListSource.Items == null)
					{
						xTextInputFieldElement.FieldSettings.ListSource.Items = new ListItemCollection();
					}
					xTextInputFieldElement.FieldSettings.ListSource.Items.Add(new ListItem
					{
						Text = sCode,
						Value = sValue
					});
					flag = true;
					break;
				case 3:
					xTextInputFieldElement.SetAttribute("NsoControlTypeName", "MultiListBox");
					if (xTextInputFieldElement.FieldSettings == null)
					{
						xTextInputFieldElement.FieldSettings = new InputFieldSettings();
					}
					if (xTextInputFieldElement.FieldSettings.ListSource == null)
					{
						xTextInputFieldElement.FieldSettings.ListSource = new ListSourceInfo();
					}
					xTextInputFieldElement.FieldSettings.EditStyle = InputFieldEditStyle.DropdownList;
					xTextInputFieldElement.FieldSettings.MultiSelect = true;
					if (xTextInputFieldElement.FieldSettings.ListSource.Items == null)
					{
						xTextInputFieldElement.FieldSettings.ListSource.Items = new ListItemCollection();
					}
					xTextInputFieldElement.FieldSettings.ListSource.Items.Add(new ListItem
					{
						Text = sCode,
						Value = sValue
					});
					flag = true;
					break;
				case 4:
					xTextInputFieldElement.SetAttribute("NsoControlTypeName", "MultiComBox");
					if (xTextInputFieldElement.FieldSettings == null)
					{
						xTextInputFieldElement.FieldSettings = new InputFieldSettings();
					}
					if (xTextInputFieldElement.FieldSettings.ListSource == null)
					{
						xTextInputFieldElement.FieldSettings.ListSource = new ListSourceInfo();
					}
					xTextInputFieldElement.FieldSettings.EditStyle = InputFieldEditStyle.DropdownList;
					xTextInputFieldElement.FieldSettings.MultiSelect = true;
					if (xTextInputFieldElement.FieldSettings.ListSource.Items == null)
					{
						xTextInputFieldElement.FieldSettings.ListSource.Items = new ListItemCollection();
					}
					xTextInputFieldElement.FieldSettings.ListSource.Items.Add(new ListItem
					{
						Text = sCode,
						Value = sValue
					});
					flag = true;
					break;
				}
			}
			EndLogFunction(flag);
			return flag;
		}

		[ComVisible(true)]
		public virtual bool SetCompoundBoxCurrentCodeByValue(string strName, int iType, string strValue)
		{
			int num = 13;
			BeginLogFunction("SetCompoundBoxCurrentCodeByValue", "strName=" + strName + "  iType=" + iType + "  strValue=" + strValue);
			XTextInputFieldElement xTextInputFieldElement = myEditControl.GetElementById(strName) as XTextInputFieldElement;
			if (xTextInputFieldElement != null)
			{
				ListItemCollection runtimeListItems = xTextInputFieldElement.GetRuntimeListItems();
				if (runtimeListItems != null)
				{
					string text = null;
					text = ((!xTextInputFieldElement.FieldSettings.MultiSelect) ? runtimeListItems.ValueToText(strValue) : runtimeListItems.MultiValuesToText(strValue));
					xTextInputFieldElement.InnerValue = strValue;
					xTextInputFieldElement.EditorTextExt = text;
					EndLogFunction("true");
					return true;
				}
			}
			EndLogFunction("false");
			return false;
		}

		[ComVisible(true)]
		public virtual bool ResetCompoundBoxCode(string sName, string sOldCode, string sNewCode, int iType)
		{
			BeginLogFunction("ResetCompoundBoxCode", "sName=" + sName + "  sOldCode=" + sOldCode + "  sNewCode=" + sNewCode + "  iType=" + iType);
			AlertNotSupportedMember("ResetCompoundBoxCode");
			EndLogFunction(null);
			throw new NotSupportedException();
		}

		[ComVisible(true)]
		public virtual int GetCompoundBoxCodeAndValueCount(string sName, int iType)
		{
			BeginLogFunction("GetCompoundBoxCodeAndValueCount", "sName=" + sName + "  iType=" + iType);
			XTextInputFieldElement xTextInputFieldElement = myEditControl.GetElementById(sName) as XTextInputFieldElement;
			if (xTextInputFieldElement != null)
			{
				ListItemCollection runtimeListItems = xTextInputFieldElement.GetRuntimeListItems();
				if (runtimeListItems != null)
				{
					EndLogFunction(runtimeListItems.Count);
					return runtimeListItems.Count;
				}
			}
			EndLogFunction(0);
			return 0;
		}

		[ComVisible(true)]
		public virtual object GetCompoundBoxCodeWithArray(string sName, int iType)
		{
			BeginLogFunction("GetCompoundBoxCodeWithArray", "sName=" + sName + "  iType=" + iType);
			EndLogFunction(GetMultiCheckboxCodeWithArray(sName));
			return GetMultiCheckboxCodeWithArray(sName);
		}

		[ComVisible(true)]
		public virtual string GetCompoundBoxCurrentCode(string sName, int iType)
		{
			BeginLogFunction("GetCompoundBoxCurrentCode", "sName=" + sName + "  iType=" + iType);
			string text = "";
			XTextInputFieldElement xTextInputFieldElement = GetElementById(sName) as XTextInputFieldElement;
			if (xTextInputFieldElement != null)
			{
				text = xTextInputFieldElement.Text;
			}
			if (text == null)
			{
				text = "";
			}
			EndLogFunction(text);
			return text;
		}

		[ComVisible(true)]
		public virtual string GetCompoundBoxCurrentValue(string sName, int iType)
		{
			BeginLogFunction("GetCompoundBoxCurrentValue", "sName=" + sName + "  iType=" + iType);
			string text = "";
			XTextInputFieldElement xTextInputFieldElement = GetElementById(sName) as XTextInputFieldElement;
			if (xTextInputFieldElement != null)
			{
				text = xTextInputFieldElement.InnerValue;
			}
			if (text == null)
			{
				text = "";
			}
			EndLogFunction(text);
			return text;
		}

		[ComVisible(true)]
		public virtual string GetCompoundBoxValueByCode(string sName, string sCode, int iType)
		{
			int num = 12;
			BeginLogFunction("GetCompoundBoxValueByCode", "sName=" + sName + "  sCode=" + sCode + "  iType=" + iType);
			if (sName == null)
			{
				throw new ArgumentNullException("sName");
			}
			if (sCode == null)
			{
				throw new ArgumentNullException("sCode");
			}
			XTextInputFieldElement xTextInputFieldElement = myEditControl.GetElementById(sName) as XTextInputFieldElement;
			if (xTextInputFieldElement != null && xTextInputFieldElement.FieldSettings != null && xTextInputFieldElement.FieldSettings.EditStyle == InputFieldEditStyle.DropdownList && xTextInputFieldElement.FieldSettings.ListSource != null && xTextInputFieldElement.FieldSettings.ListSource.Items != null)
			{
				foreach (ListItem item in xTextInputFieldElement.FieldSettings.ListSource.Items)
				{
					if (item.Text == sCode)
					{
						EndLogFunction(item.Value);
						return item.Value;
					}
				}
			}
			EndLogFunction("");
			return "";
		}

		[ComVisible(true)]
		public virtual object GetCompoundBoxValueWithArray(string sName, int iType)
		{
			BeginLogFunction("GetCompoundBoxValueWithArray", "sName=" + sName + "  iType=" + iType);
			EndLogFunction(GetMultiCheckboxValueWithArray(sName));
			return GetMultiCheckboxValueWithArray(sName);
		}
	}
}
