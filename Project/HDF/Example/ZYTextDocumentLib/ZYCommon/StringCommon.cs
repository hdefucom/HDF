using System;
using System.Collections;
using System.Collections.Specialized;
using System.Drawing;
using System.Drawing.Imaging;
using System.Globalization;
using System.IO;
using System.Net;
using System.Security.Cryptography;
using System.Text;
using System.Web;
using System.Xml;

namespace ZYCommon
{
	public class StringCommon
	{
		private class NameValueItem
		{
			public string Name;

			public string Value;
		}

		public delegate bool PostEventHandler(string strURL, long ContentLength, long CompletedLength, int Tick, int Status);

		public const string c_HexCharList = "0123456789ABCDEF";

		public const string c_Base64CharList = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

		public const string StartPunctuaction = "!),.:;?]}\u00a8·\u02c7\u02c9―‖’”…∶、。〃\u3005〉》」』】〕〗！＂＇），．：；？］\uff40｜｝～￠";

		public const string EndPunctuaction = "([{·‘“〈《「『【〔〖（．［｛￡￥";

		private static int intAllocCount = 0;

		private static string strChineseFirstPY = "";

		private static NameValueCollection myStringTable = null;

		public static int GetSymbolSplitLevel(char vSymbol)
		{
			if (vSymbol == '.' || vSymbol == '。')
			{
				return 5;
			}
			if (vSymbol == ';' || vSymbol == '；')
			{
				return 4;
			}
			if (vSymbol == ',' || vSymbol == '，')
			{
				return 3;
			}
			if (vSymbol == '、')
			{
				return 2;
			}
			if (char.IsWhiteSpace(vSymbol))
			{
				return 1;
			}
			return 0;
		}

		public static string LoadAnsiFile(string strFile)
		{
			StreamReader streamReader = null;
			try
			{
				if (File.Exists(strFile))
				{
					streamReader = new StreamReader(strFile, Encoding.GetEncoding(936));
					string result = streamReader.ReadToEnd();
					streamReader.Close();
					return result;
				}
			}
			catch
			{
				streamReader?.Close();
			}
			return null;
		}

		public static string GetShortCutChars(string strExcept)
		{
			string text = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
			if (strExcept != null)
			{
				strExcept = strExcept.Trim().ToUpper();
			}
			StringBuilder stringBuilder = new StringBuilder();
			string text2 = text;
			foreach (char value in text2)
			{
				if (strExcept == null || strExcept.IndexOf(value) < 0)
				{
					stringBuilder.Append(value);
				}
			}
			return stringBuilder.ToString();
		}

		public static string RemoveXMLDeclear(string strXML)
		{
			if (strXML != null)
			{
				int num = strXML.IndexOf("?>");
				if (num > 0)
				{
					return strXML.Substring(num + 2);
				}
			}
			return null;
		}

		public static string GetTypeVersion(Type t)
		{
			string[] array = AnalyseStringList(t.AssemblyQualifiedName, ',', '=', AllowSameName: false);
			if (array != null && array.Length > 0)
			{
				for (int i = 0; i < array.Length; i += 2)
				{
					if (array[i].Trim() == "Version")
					{
						return array[i + 1];
					}
				}
			}
			return null;
		}

		public static string AllocObjectName()
		{
			intAllocCount++;
			return "C" + Environment.TickCount.ToString("X") + intAllocCount;
		}

		public static string CombinStringArray(string[] strItems, string strItemSplit, string strValueSplit)
		{
			if (strItems != null && strItems.Length > 0 && strItems.Length % 2 == 0)
			{
				StringBuilder stringBuilder = new StringBuilder();
				int num = strItems.Length / 2;
				for (int i = 0; i < strItems.Length; i += 2)
				{
					if (stringBuilder.Length > 0)
					{
						stringBuilder.Append(strItemSplit);
					}
					stringBuilder.Append(strItems[i]);
					stringBuilder.Append(strValueSplit);
					stringBuilder.Append(strItems[i + 1]);
				}
				return stringBuilder.ToString();
			}
			return null;
		}

		public static string[] SplistString(string strText, char Spliter)
		{
			if (strText == null || strText.Length == 0)
			{
				return null;
			}
			int num = strText.IndexOf(Spliter);
			string[] array = new string[2];
			if (num >= 0)
			{
				array[0] = strText.Substring(0, num);
				array[1] = strText.Substring(num + 1);
			}
			else
			{
				array[0] = strText;
				array[1] = "";
			}
			return array;
		}

		public static string[] SplistString(string strText, string strSpliter)
		{
			if (strText == null || strSpliter == null || strText.Length == 0)
			{
				return null;
			}
			int num = strText.IndexOf(strSpliter);
			string[] array = new string[2];
			if (num >= 0)
			{
				array[0] = strText.Substring(0, num);
				array[1] = strText.Substring(num + strSpliter.Length);
			}
			else
			{
				array[0] = strText;
				array[1] = "";
			}
			return array;
		}

		public static string[] AnalyseSingleLineParams(string strList, string strLastParamName, bool AllowSameName)
		{
			if (strList == null || strList.Length == 0)
			{
				return null;
			}
			ArrayList arrayList = new ArrayList();
			string text = null;
			string text2 = null;
			string text3 = null;
			int num = 0;
			while (num < strList.Length)
			{
				int num2 = IndexofWiteSpace(strList, num);
				if (num2 < 0)
				{
					num2 = strList.Length;
				}
				if (num2 > num + 1)
				{
					text = strList.Substring(num, num2 - num);
					int num3 = text.IndexOf('=');
					if (num3 > 0)
					{
						text2 = text.Substring(0, num3);
						text3 = text.Substring(num3 + 1);
					}
					else
					{
						text2 = text;
						text3 = "";
					}
					if (strLastParamName != null && strLastParamName.Equals(text2))
					{
						num = strList.IndexOf('=', num);
						text3 = ((num <= 0) ? "" : strList.Substring(num + 1));
					}
					bool flag = true;
					if (!AllowSameName)
					{
						foreach (NameValueItem item in arrayList)
						{
							if (item.Name == text2)
							{
								flag = false;
								break;
							}
						}
					}
					if (flag)
					{
						NameValueItem nameValueItem2 = new NameValueItem();
						nameValueItem2.Name = text2;
						nameValueItem2.Value = text3;
						arrayList.Add(nameValueItem2);
					}
				}
				num = num2 + 1;
			}
			string[] array = new string[arrayList.Count * 2];
			int num4 = 0;
			foreach (NameValueItem item2 in arrayList)
			{
				array[num4] = item2.Name;
				array[num4 + 1] = item2.Value;
				num4 += 2;
			}
			return array;
		}

		public static string[] AnalyseLineParams(string strText)
		{
			if (strText == null || strText.Length == 0)
			{
				return null;
			}
			StringReader stringReader = new StringReader(strText);
			ArrayList arrayList = new ArrayList();
			for (string text = stringReader.ReadLine(); text != null; text = stringReader.ReadLine())
			{
				if (text.Length > 0)
				{
					int num = text.IndexOf('=');
					if (num >= 0)
					{
						arrayList.Add(text.Substring(0, num));
						arrayList.Add(text.Substring(num + 1));
					}
					else
					{
						arrayList.Add(text);
						arrayList.Add("");
					}
				}
			}
			if (arrayList.Count > 0)
			{
				return (string[])arrayList.ToArray(typeof(string));
			}
			return null;
		}

		public static NameValueCollection AnalyseNameValueList(string strList, char ItemSplit, char ValueSplit, bool AllowSameName)
		{
			string[] array = AnalyseStringList(strList, ItemSplit, ValueSplit, AllowSameName);
			if (array != null && array.Length > 0)
			{
				NameValueCollection nameValueCollection = new NameValueCollection();
				for (int i = 0; i < array.Length; i += 2)
				{
					nameValueCollection.Set(array[i], array[i + 1]);
				}
				return nameValueCollection;
			}
			return null;
		}

		public static string[] AnalyseStringList(string strList, char ItemSplit, char ValueSplit, bool AllowSameName)
		{
			if (strList == null || strList.Length == 0)
			{
				return null;
			}
			ArrayList arrayList = new ArrayList();
			string text = null;
			string text2 = null;
			string text3 = null;
			int num = 0;
			while (num < strList.Length)
			{
				int num2 = strList.IndexOf(ItemSplit, num);
				if (num2 < 0)
				{
					num2 = strList.Length;
				}
				if (num2 > num + 1)
				{
					text = strList.Substring(num, num2 - num);
					int num3 = text.IndexOf(ValueSplit);
					if (num3 > 0)
					{
						text2 = text.Substring(0, num3);
						text3 = text.Substring(num3 + 1);
					}
					else
					{
						text2 = text;
						text3 = "";
					}
					bool flag = true;
					if (!AllowSameName)
					{
						foreach (NameValueItem item in arrayList)
						{
							if (item.Name == text2)
							{
								flag = false;
								break;
							}
						}
					}
					if (flag)
					{
						NameValueItem nameValueItem2 = new NameValueItem();
						nameValueItem2.Name = text2;
						nameValueItem2.Value = text3;
						arrayList.Add(nameValueItem2);
					}
				}
				num = num2 + 1;
			}
			string[] array = new string[arrayList.Count * 2];
			int num4 = 0;
			foreach (NameValueItem item2 in arrayList)
			{
				array[num4] = item2.Name;
				array[num4 + 1] = item2.Value;
				num4 += 2;
			}
			return array;
		}

		public static string GetChineseSpell(string strText)
		{
			if (strText == null || strText.Length == 0)
			{
				return strText;
			}
			StringBuilder stringBuilder = new StringBuilder();
			int num = 0;
			foreach (char c in strText)
			{
				if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
				{
					stringBuilder.Append(char.ToUpper(c));
					continue;
				}
				num = c - 19968;
				if (num >= 0 && num < strChineseFirstPY.Length)
				{
					stringBuilder.Append(strChineseFirstPY[num]);
				}
			}
			return stringBuilder.ToString();
		}

		public static string ClearWhiteSpace(string strText, int intMaxLength, bool bolHtml)
		{
			if (strText == null)
			{
				return null;
			}
			bool flag = false;
			StringBuilder stringBuilder = new StringBuilder();
			int num = 0;
			foreach (char c in strText)
			{
				if (char.IsWhiteSpace(c))
				{
					flag = true;
					continue;
				}
				if (bolHtml && flag)
				{
					stringBuilder.Append(" ");
				}
				stringBuilder.Append(c);
				if (intMaxLength > 0)
				{
					num++;
					if (num > intMaxLength)
					{
						break;
					}
				}
				flag = false;
			}
			return stringBuilder.ToString();
		}

		public static Image ImageFromBase64String(string strBase64)
		{
			try
			{
				byte[] buffer = Convert.FromBase64String(strBase64);
				MemoryStream memoryStream = new MemoryStream(buffer);
				Image result = Image.FromStream(memoryStream);
				memoryStream.Close();
				return result;
			}
			catch
			{
			}
			return null;
		}

		public static string ImageToBase64String(Image myImage, ImageFormat format)
		{
			if (myImage == null)
			{
				return null;
			}
			if (format == null)
			{
				format = ImageFormat.Png;
			}
			MemoryStream memoryStream = new MemoryStream();
			myImage.Save(memoryStream, format);
			byte[] inArray = memoryStream.ToArray();
			memoryStream.Close();
			return Convert.ToBase64String(inArray);
		}

		public static string PostStringData(string strSend, string strURL, PostEventHandler vEvent)
		{
			byte[] bytes = Encoding.UTF8.GetBytes(strSend);
			int tickCount = Environment.TickCount;
			if (!(vEvent?.Invoke(strURL, bytes.Length, 0L, 0, 0) ?? true))
			{
				return null;
			}
			HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(strURL);
			httpWebRequest.ContentType = "application/x-www-form-urlencoded";
			httpWebRequest.ContentLength = bytes.Length;
			httpWebRequest.Method = "POST";
			Stream requestStream = httpWebRequest.GetRequestStream();
			int num = 0;
			while (true)
			{
				bool flag = true;
				if (num + 1024 > bytes.Length)
				{
					requestStream.Write(bytes, num, bytes.Length - num);
					if (!(vEvent?.Invoke(strURL, bytes.Length, bytes.Length, Environment.TickCount - tickCount, 1) ?? true))
					{
						requestStream.Close();
						httpWebRequest.Abort();
						return null;
					}
					break;
				}
				requestStream.Write(bytes, num, 1024);
				num += 1024;
				if (!(vEvent?.Invoke(strURL, bytes.Length, num, Environment.TickCount - tickCount, 1) ?? true))
				{
					requestStream.Close();
					httpWebRequest.Abort();
					return null;
				}
			}
			requestStream.Close();
			if (!(vEvent?.Invoke(strURL, bytes.Length, num, Environment.TickCount - tickCount, 2) ?? true))
			{
				httpWebRequest.Abort();
				return null;
			}
			HttpWebResponse httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
			requestStream = httpWebResponse.GetResponseStream();
			if (!(vEvent?.Invoke(strURL, httpWebResponse.ContentLength, 0L, Environment.TickCount - tickCount, 3) ?? true))
			{
				httpWebResponse.Close();
				httpWebRequest.Abort();
				return null;
			}
			MemoryStream memoryStream = new MemoryStream(1024);
			byte[] buffer = new byte[1024];
			while (true)
			{
				bool flag = true;
				int num2 = requestStream.Read(buffer, 0, 1024);
				if (num2 == 0)
				{
					break;
				}
				memoryStream.Write(buffer, 0, num2);
				if (!(vEvent?.Invoke(strURL, httpWebResponse.ContentLength, memoryStream.Length, Environment.TickCount - tickCount, 4) ?? true))
				{
					httpWebResponse.Close();
					httpWebRequest.Abort();
					memoryStream.Close();
					return null;
				}
			}
			requestStream.Close();
			httpWebResponse.Close();
			httpWebRequest.Abort();
			if (!(vEvent?.Invoke(strURL, httpWebResponse.ContentLength, memoryStream.Length, Environment.TickCount - tickCount, 5) ?? true))
			{
				return null;
			}
			byte[] array = memoryStream.ToArray();
			memoryStream.Close();
			char[] array2 = new char[Encoding.UTF8.GetCharCount(array, 0, array.Length)];
			Encoding.UTF8.GetChars(array, 0, array.Length, array2, 0);
			return new string(array2);
		}

		public static string GetNowString14()
		{
			return ZYTime.GetServerTime().ToString("yyyyMMddHHmmss");
		}

		public static string GetNowString12()
		{
			return ZYTime.GetServerTime().ToString("yyyyMMddHHmm");
		}

		public static DateTime ConvertToDateTime(string strValue, string strFromFormat, DateTime DefaultValue)
		{
			try
			{
				return ConvertToDateTime(strValue, strFromFormat);
			}
			catch
			{
				return DefaultValue;
			}
		}

		public static DateTime ConvertToDateTime(string strValue, string strFromFormat)
		{
			if (isBlankString(strFromFormat))
			{
				strValue = strValue.Trim();
				switch (strValue.Length)
				{
				case 14:
					strFromFormat = "yyyyMMddHHmmss";
					break;
				case 12:
					strFromFormat = "yyyyMMddHHmm";
					break;
				case 10:
					strFromFormat = ((strValue.IndexOf("-") < 0) ? "yyyyMMddHH" : "yyyy-MM-dd");
					break;
				case 8:
					strFromFormat = "yyyyMMdd";
					break;
				case 19:
					strFromFormat = "yyyy-MM-dd HH:mm:ss";
					break;
				case 16:
					strFromFormat = "yyyy-MM-dd HH:mm";
					break;
				case 13:
					strFromFormat = "yyyy-MM-dd HH";
					break;
				}
			}
			if (isBlankString(strFromFormat))
			{
				return DateTime.Parse(strValue);
			}
			DateTimeFormatInfo dateTimeFormatInfo = new DateTimeFormatInfo();
			IFormatProvider provider = new CultureInfo("zh-CN", useUserOverride: false);
			return DateTime.ParseExact(strValue, strFromFormat, provider);
		}

		public static string FormatDateTime(string strValue, string strFromFormat, string strToFormat)
		{
			try
			{
				return ConvertToDateTime(strValue, strFromFormat).ToString(strToFormat);
			}
			catch
			{
				return "";
			}
		}

		public static string fixVariableString(string strText, string strHead, string strEnd, Hashtable myKeys)
		{
			if (strText == null || strHead == null || strEnd == null || strHead.Length == 0 || strEnd.Length == 0 || strText.Length == 0 || myKeys == null || myKeys.Count == 0)
			{
				return strText;
			}
			int num = strText.IndexOf(strHead);
			if (num < 0)
			{
				return strText;
			}
			int num2 = 0;
			StringBuilder stringBuilder = new StringBuilder();
			do
			{
				int num3 = strText.IndexOf(strEnd, num + 1);
				if (num3 <= num)
				{
					break;
				}
				int num4 = num;
				do
				{
					num = num4;
					num4 = strText.IndexOf(strHead, num4 + 1);
				}
				while (num4 > num && num4 < num3);
				string key = strText.Substring(num + strHead.Length, num3 - num - strHead.Length);
				if (myKeys.ContainsKey(key))
				{
					if (num2 < num)
					{
						stringBuilder.Append(strText.Substring(num2, num - num2));
					}
					stringBuilder.Append(myKeys[key] as string);
					num = num3 + strEnd.Length;
					num2 = num;
				}
				else
				{
					num = num3 + strEnd.Length;
				}
			}
			while (num >= 0 && num < strText.Length);
			if (num2 < strText.Length)
			{
				stringBuilder.Append(strText.Substring(num2));
			}
			return stringBuilder.ToString();
		}

		public static bool isHttpURL(string strData)
		{
			if (strData != null)
			{
				strData = strData.Trim().ToLower();
				return strData.StartsWith("http://");
			}
			return false;
		}

		public static Color ColorFromHtml(string strText, Color DefaultValue)
		{
			if (strText != null)
			{
				strText = strText.ToUpper().Trim();
				if (strText.StartsWith("#") && strText.Length <= 7)
				{
					int num = 0;
					int num2 = 0;
					for (int i = 1; i < strText.Length; i++)
					{
						num2 = "0123456789ABCDEF".IndexOf(strText[i]);
						if (num2 >= 0)
						{
							num = num * 16 + num2;
							continue;
						}
						return DefaultValue;
					}
					Color baseColor = Color.FromArgb(num);
					return Color.FromArgb(255, baseColor);
				}
				try
				{
					return Color.FromArgb(Convert.ToInt32(strText));
				}
				catch
				{
					return DefaultValue;
				}
			}
			return DefaultValue;
		}

		public static string ColorToHtml(Color myColor)
		{
			return "#" + Convert.ToInt32(myColor.ToArgb() & 0xFFFFFF).ToString("X6");
		}

		public static void LoadStringTable(string strURL)
		{
			XmlDocument xmlDocument = new XmlDocument();
			XmlElement xmlElement = null;
			xmlDocument.Load(strURL);
			myStringTable = new NameValueCollection();
			foreach (XmlNode childNode in xmlDocument.DocumentElement.ChildNodes)
			{
				xmlElement = (childNode as XmlElement);
				if (xmlElement != null)
				{
					myStringTable.Set(xmlElement.GetAttribute("name"), xmlElement.InnerText);
				}
			}
		}

		public static string GetStringValue(string strName)
		{
			if (myStringTable != null)
			{
				return myStringTable[strName];
			}
			return null;
		}

		public static string ClearBlankLine(string strData)
		{
			if (strData == null)
			{
				return null;
			}
			StringReader stringReader = new StringReader(strData);
			StringBuilder stringBuilder = new StringBuilder();
			string text = stringReader.ReadLine();
			bool flag = true;
			while (text != null)
			{
				string text2 = text;
				foreach (char c in text2)
				{
					if (!char.IsWhiteSpace(c))
					{
						if (!flag)
						{
							stringBuilder.Append("\r\n");
						}
						stringBuilder.Append(text);
						flag = false;
						break;
					}
				}
				text = stringReader.ReadLine();
			}
			stringReader.Close();
			return stringBuilder.ToString();
		}

		public static string HTMLToText(string strHTML)
		{
			if (strHTML != null)
			{
				return HttpUtility.HtmlDecode(strHTML);
			}
			return null;
		}

		public static string ToXMLString(string strData)
		{
			if (strData != null)
			{
				if (strData.IndexOf('"') >= 0)
				{
					strData = strData.Replace("\"", "&quot;");
				}
				if (strData.IndexOf('>') >= 0)
				{
					strData = strData.Replace(">", "&gt;");
				}
				if (strData.IndexOf('<') >= 0)
				{
					strData = strData.Replace("<", "&lt;");
				}
				return strData;
			}
			return "";
		}

		public static DateTime ToDBDateTime(string strData, DateTime DefaultValue)
		{
			try
			{
				if (strData == null)
				{
					return DefaultValue;
				}
				strData = strData.PadRight(14, '0');
				return DateTime.Parse("yyyyMMddhhmmss");
			}
			catch
			{
				return DefaultValue;
			}
		}

		public static int ToInt32Value(string strData, int DefaultValue)
		{
			try
			{
				if (strData == null || strData.Length == 0)
				{
					return DefaultValue;
				}
				return Convert.ToInt32(strData);
			}
			catch
			{
				return DefaultValue;
			}
		}

		public static string ToStringValue(object obj, string DefaultValue)
		{
			try
			{
				return Convert.ToString(obj);
			}
			catch
			{
				return DefaultValue;
			}
		}

		public static bool ToBoolValue(string strData, bool DefaultValue)
		{
			try
			{
				if (strData == null)
				{
					return DefaultValue;
				}
				return Convert.ToBoolean(strData);
			}
			catch
			{
				return DefaultValue;
			}
		}

		public static int IndexofEx(string strData, string strFind)
		{
			int num = -1;
			int num2 = 0;
			if (strData != null && strFind != null)
			{
				for (int i = 0; i < strFind.Length; i++)
				{
					num2 = strData.IndexOf(strFind[i]);
					if (num2 < num || num == -1)
					{
						num = num2;
					}
				}
			}
			return num;
		}

		public static int IndexofWiteSpace(string strData)
		{
			for (int i = 0; i < strData.Length; i++)
			{
				if (char.IsWhiteSpace(strData, i))
				{
					return i;
				}
			}
			return strData.Length;
		}

		public static int IndexofWiteSpace(string strData, int StartIndex)
		{
			if (StartIndex < 0 || StartIndex >= strData.Length)
			{
				StartIndex = 0;
			}
			for (int i = StartIndex; i < strData.Length; i++)
			{
				if (char.IsWhiteSpace(strData, i))
				{
					return i;
				}
			}
			return strData.Length;
		}

		public static bool isInteger(string strData)
		{
			if (strData != null)
			{
				foreach (char c in strData)
				{
					if (!char.IsNumber(c))
					{
						return false;
					}
				}
				return true;
			}
			return false;
		}

		public static bool isBlankString(string strData)
		{
			if (strData == null)
			{
				return true;
			}
			for (int i = 0; i < strData.Length; i++)
			{
				if (!char.IsWhiteSpace(strData[i]))
				{
					return false;
				}
			}
			return true;
		}

		public static bool HasContent(string strData)
		{
			if (strData != null && strData.Length > 0)
			{
				foreach (char c in strData)
				{
					if (!char.IsWhiteSpace(c))
					{
						return true;
					}
				}
			}
			return false;
		}

		public static string TransToXSLFrame(string strXML)
		{
			return "<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" version=\"1.0\"><xsl:template match=\"/*\">" + strXML + "</xsl:template></xsl:stylesheet>";
		}

		public static bool IsLetterOrDigit(string strData)
		{
			if (strData != null)
			{
				for (int i = 0; i < strData.Length; i++)
				{
					if (!char.IsLetterOrDigit(strData, i))
					{
						return false;
					}
				}
				return true;
			}
			return false;
		}

		public static bool IsInteger(string strData)
		{
			if (strData != null)
			{
				foreach (char c in strData)
				{
					if (!char.IsNumber(c))
					{
						return false;
					}
				}
				return true;
			}
			return false;
		}

		public static string GetMD5String(string strData)
		{
			MD5CryptoServiceProvider mD5CryptoServiceProvider = new MD5CryptoServiceProvider();
			byte[] bytes = Encoding.Unicode.GetBytes(strData);
			byte[] bytBuf = mD5CryptoServiceProvider.ComputeHash(bytes, 0, bytes.Length);
			return ByteToHex(bytBuf);
		}

		public static string ByteToHex(byte[] bytBuf)
		{
			StringBuilder stringBuilder = new StringBuilder();
			for (int i = 0; i < bytBuf.Length; i++)
			{
				stringBuilder.Append(bytBuf[i].ToString("X2"));
			}
			return stringBuilder.ToString();
		}

		public static string ToHexString(string strData)
		{
			if (strData != null)
			{
				byte[] bytes = Encoding.GetEncoding(936).GetBytes(strData);
				return ByteToHex(bytes);
			}
			return null;
		}

		public static string FromHexString(string strData)
		{
			if (strData != null)
			{
				Decoder decoder = Encoding.GetEncoding(936).GetDecoder();
				byte[] array = HexToByte(strData);
				char[] array2 = new char[decoder.GetCharCount(array, 0, array.Length)];
				decoder.GetChars(array, 0, array.Length, array2, 0);
				return new string(array2);
			}
			return null;
		}

		public static byte[] HexToByte(string strData)
		{
			if (strData != null)
			{
				int length = strData.Length;
				byte[] array = new byte[length];
				int num = 0;
				int num2 = 0;
				int num3 = 0;
				Encoding.ASCII.GetBytes(strData.ToUpper(), 0, strData.Length, array, 0);
				for (num3 = 0; num3 < length; num3++)
				{
					int num4 = array[num3];
					if ((array[num3] >= 48 && array[num3] <= 57) || (array[num3] >= 65 && array[num3] <= 70))
					{
						num4 = ((array[num3] > 57) ? (array[num3] - 65 + 10) : (array[num3] - 48));
						num2++;
						if (num2 % 2 == 0 && num2 > 0)
						{
							array[num] = Convert.ToByte(array[num] * 16 + num4);
							num++;
						}
						else
						{
							array[num] = Convert.ToByte(num4);
						}
					}
				}
				byte[] array2 = new byte[num];
				for (num3 = 0; num3 < num; num3++)
				{
					array2[num3] = array[num3];
				}
				return array2;
			}
			return null;
		}

		public static string ToBase64String(string strData)
		{
			if (strData == null)
			{
				return null;
			}
			return Convert.ToBase64String(Encoding.GetEncoding(936).GetBytes(strData));
		}

		public static string FromBase64String(string strData)
		{
			if (strData == null)
			{
				return null;
			}
			byte[] bytes = Convert.FromBase64String(strData);
			char[] chars = Encoding.GetEncoding(936).GetChars(bytes);
			return new string(chars);
		}

		public static bool isBase64Ascii(int intChar)
		{
			return (intChar >= 65 && intChar <= 90) || (intChar >= 97 && intChar <= 122) || (intChar >= 48 && intChar <= 57) || intChar == 43 || intChar == 47 || intChar == 61;
		}

		public static string FormatBase64String(string strBase64, int GroupSize, int LineGroupCount)
		{
			if (strBase64 == null || strBase64.Length == 0 || (GroupSize <= 0 && LineGroupCount <= 0))
			{
				return strBase64;
			}
			StringBuilder stringBuilder = new StringBuilder();
			int length = strBase64.Length;
			int num = 0;
			LineGroupCount *= GroupSize;
			while (true)
			{
				bool flag = true;
				stringBuilder.Append(" ");
				if (num + GroupSize >= length)
				{
					break;
				}
				stringBuilder.Append(strBase64.Substring(num, GroupSize));
				num += GroupSize;
				if (num % LineGroupCount == 0)
				{
					stringBuilder.Append("\r\n");
				}
			}
			stringBuilder.Append(strBase64.Substring(num));
			return stringBuilder.ToString();
		}

		public static bool isExchangeEncrypt(string strData)
		{
			if (strData != null && strData.StartsWith("HTEEV1.0") && strData.EndsWith("HTEEV1.0"))
			{
				return true;
			}
			return false;
		}

		public static string ExchangeEncrypt(string strSource, bool toEncrypt, bool bolHead)
		{
			if (isBlankString(strSource))
			{
				return null;
			}
			int iStep;
			char[] array;
			if (toEncrypt)
			{
				iStep = (int)Math.Ceiling((double)strSource.Length / 2.0);
				array = strSource.ToCharArray();
				ExchangeChar(array, 2, iStep, bolDirect: true);
				ExchangeChar(array, 3, iStep, bolDirect: true);
				ExchangeChar(array, 7, 3, bolDirect: true);
				ExchangeChar(array, 3, 33, bolDirect: true);
				string text = new string(array);
				if (bolHead)
				{
					return "HTEEV1.0" + text + "HTEEV1.0";
				}
				return text;
			}
			if (bolHead)
			{
				strSource = strSource.Trim();
				if (!strSource.StartsWith("HTEEV1.0") || !strSource.EndsWith("HTEEV1.0"))
				{
					return null;
				}
				strSource = strSource.Substring("HTEEV1.0".Length, strSource.Length - "HTEEV1.0".Length * 2);
			}
			iStep = (int)Math.Ceiling((double)strSource.Length / 2.0);
			array = strSource.ToCharArray();
			ExchangeChar(array, 3, 33, bolDirect: false);
			ExchangeChar(array, 7, 3, bolDirect: false);
			ExchangeChar(array, 3, iStep, bolDirect: false);
			ExchangeChar(array, 2, iStep, bolDirect: false);
			return new string(array);
		}

		public static void ExchangeChar(char[] myChar, int iStep, int iStep2, bool bolDirect)
		{
			if (iStep == 0)
			{
				return;
			}
			int num = myChar.Length;
			int num2;
			if (bolDirect)
			{
				for (int i = 0; i < num; i += iStep)
				{
					num2 = (i + iStep2) % num;
					char c = myChar[i];
					myChar[i] = myChar[num2];
					myChar[num2] = c;
				}
				return;
			}
			num2 = num - 1 - (num - 1) % iStep;
			iStep = -iStep;
			for (int i = num2; i >= 0; i += iStep)
			{
				num2 = (i + iStep2) % num;
				char c = myChar[i];
				myChar[i] = myChar[num2];
				myChar[num2] = c;
			}
		}
	}
}
